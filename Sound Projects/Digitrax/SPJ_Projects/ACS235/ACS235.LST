MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001          LIST           P=18f242,C=132,T=ON,N=75,R=DEC,ST=OFF,W=1,X=ON ;changed 66 to 80 lines
                      00002       TITLE   "single scheme- discrete notching SDF3.0 Decoder Series6"
                      00003 ;----------------------------------------------------------------------------
                      00004 ;PROJECT_ID:    256  3/16/23
                      00005 ;   AMTRK 600 25 kV, 60 Hz AC, Catenary Passenger Engine ACS-64       
                      00006 ;       ACS-64.SPJ Version 7.0
                      00007 ;BASE CODE:     EL7c4x6d30 -- Discrete Notching,  4 Channel, SDF Version 2.0
                      00008 ;MEMORY:        2 Mega bytes required
                      00009 ;SDF3.0:        Requires --      #INCLUDE       ../SFX3p0_snd_cmd.INC
                      00010 ;                                               and      #INCLUDE       ../SFX3p0_snd_macs.inc
                      00011 ;DMF:           Requires --     SW Ver 8 OR newer
                      00012 ;Author:  John McMasters
                      00013 ;       Custom sound scheme. MAR, 2023 NOT for resale.
                      00014 ;       (C) Copyright John McMasters 2023 used with permission.
                      00015 ;CHANNELS:      4
                      00016 ;SERIES:        6
                      00017 ;CV60=0=DIESEL5 SOUND SCHEME
                      00018 ;----------------------------------------------------------------------------
                      00019 ;    AMTRK 600 Passenger Engine ACS-64 Electric
                      00020 ;Specifications:
                      00021 ;
                      00022 ;ACS-64
                      00023 ;
                      00024 ;Type and origin
                      00025 ;Power type     Electric
                      00026 ;Builder        Siemens Mobility
                      00027 ;Order number   Amtrak: 70
                      00028 ;                               SEPTA: 15 (option for 3 additional)
                      00029 ;Build date     Amtrak: 2012–2016
                      00030 ;                       SEPTA: 2015–2018
                      00031 ;Configuration:  • AAR      B-B
                      00032 ;Gauge  1,435 mm (4 ft 81⁄2 in) standard gauge
                      00033 ;Trucks Siemens model SF4
                      00034 ;Wheel diameter 1,117 mm (43.98 in) (new)
                      00035 ;                               1,041 mm (40.98 in) (worn)
                      00036 ;Minimum curve  76 m (249.3 ft)
                      00037 ;Wheelbase      9.9 m (32 ft 5.8 in) (bogie center distance)
                      00038 ;Length 20,320 mm (66 ft 8 in)
                      00039 ;Width  2,984 mm (9 ft 91⁄2 in)
                      00040 ;Height 3,810 mm (12 ft 6 in) (excluding pantograph)
                      00041 ;Axle load      54,250 lb (24,610 kg)
                      00042 ;Adhesive weight        100%
                      00043 ;Loco weight    215,537 lb (97,766 kg)
                      00044 ;Electric system/s
                      00045 ;       12 kV, 25 Hz AC, Catenary
                      00046 ;       12.5 kV, 60 Hz AC, Catenary
                      00047 ;       25 kV, 60 Hz AC, Catenary
                      00048 ;Current pickup(s)      Pantograph
                      00049 ;Traction motors        3-phase, AC, Fully Suspended, Siemens built (Norwood, Ohio)
                      00050 ;Head end power 1,300 hp (970 kW) 3-phase, 60 Hz, 480 VAC, 1000 kVA
                      00051 ;Transmission   Pinion Hollow Shaft Drive w/ Partially Suspended Gearboxes
                      00052 ;MU working     Yes
                      00053 ;Loco brake     Regenerative braking, NYAB Electro-Pneumatic Cheek Mounted Disk Brakes
                      00054 ;Train brakes   Electro-Pneumatic[1]
                      00055 ;Safety systems FRA standards
                      00056 ;                               ACSES II[2]
                      00057 ;
                      00058 ;Performance figures
                      00059 ;Maximum speed
                      00060 ;       125 mph (201 km/h) Service
                      00061 ;       135 mph (217 km/h) Design[3]
                      00062 ;Power output
                      00063 ;       6,400 kW (8,600 hp) Maximum (Short-Time)
                      00064 ;       5,000 kW (6,700 hp) Continuous
                      00065 ;Tractive effort
                      00066 ;Starting:      320 kN (72,000 lbf)
                      00067 ;Continuous (5,000 kW or 6,700 hp):
                      00068 ;                       282 kN (63,000 lbf)@40 mph (64 km/h)
                      00069 ;                       89 kN (20,000 lbf)@125 mph (200 km/h)
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  2
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00070 ;Short-time (6,400 kW or 8,600 hp):
                      00071 ;       270 kN (61,000 lbf)@53.5 mph (86 km/h)
                      00072 ;       115 kN (26,000 lbf)@125 mph (200 km/h)
                      00073 ;Factor of adh. 2.99 (33.4%)
                      00074 ;Brakeforce     150 kN (34,000 lbf), 5,000 kW (6,700 hp) Maximum[4]
                      00075 ;Career
                      00076 ;Operators      Amtrak, SEPTA
                      00077 ;Numbers
                      00078 ;    • Amtrak: 600–665, 667–670
                      00079 ;    • SEPTA: 901–915
                      00080 ;Nicknames      Sprinters
                      00081 ;Delivered      2013-2018 [5]
                      00082 ;First run      February 7, 2014 with Amtrak
                      00083 ;
                      00084 ;
                      00085 ;---------------------------------------------------
                      00086 ;       INTRODUCTION
                      00087 ; ----------------------------------------------------------------------------
                      00088 ;  This is the Sound Definition Language (SDL) file for a project that can be
                      00089 ;  used for a 16bit premium 8mb sound decoder for a typical Electric Lovomotive. 
                      00090 ;
                      00091 ;       SLOTS / Channels:
                      00092 ;       1       Prime Mover     --      motor sounds vary: idle blip, load sensing
                      00093 ;       2       --Low Idle -- Optional, Idle run is trimmed, also optional ALCO stumble
                      00094 ;       3       Horn (trigger Auto Bell)        -- Selectable, playable, signal toots   -- Grade crossin
                      00095 ;       4       Auto Bell ON/OFF Trigger        -- bells may be chained to play for simulation of rope p
                      00096 ;       5       Coupler
                      00097 ;       6       Dynamic Brake Fan       -- Variable Dynamics --  will notch up to run 4 and play dynamic
                      00098 ;       7       Air Compressor
                      00099 ;       8       Radiator Fan    -- High and low alternate random
                      00100 ;       9       Automatic Brake Emergency
                      00101 ;       10      Automatic Brake
                      00102 ;       11      Independent Brake       -- Brake Interlock      -- will lock motor at standstill until r
                      00103 ;       12      Independent Brake Bail OFF
                      00104 ;       13      Sanding Valve
                      00105 ;       14      Hand Brake
                      00106 ;       15      Cab Door
                      00107 ;       16      Engine Compartment Doors
                      00108 ;       17      Air Dryer
                      00109 ;       18      Air Dryer ON
                      00110 ;       19      Reverser (pos 1)
                      00111 ;       20      Reverser Center 1
                      00112 ;       21      Isolation Switch 1
                      00113 ;       22      Alarm Bell
                      00114 ;       23      Flange Squeal
                      00115 ;       24      Short Air Let OFF 1
                      00116 ;       25      Traction Motor
                      00117 ;       26      Starting Delay
                      00118 ;       27      Manual Notching Logic Auto Low/High Idle
                      00119 ;       28      Smart Start Beep
                      00120 ;       29      Brake Set/Release Automatic 1
                      00121 ;       30      Alerter 1
                      00122 ;       31      
                      00123 ;       32 Shutters Open/Closed
                      00124 ;
                      00125 ;Steam  Slots / Channels
                      00126 ;       1       Chuffs (prime mover)
                      00127 ;       2       Chuffs (Rear Articulated) with secondary trigger
                      00128 ;       3       Whistles
                      00129 ;       4       Bells   -- bells may be chained to play for simulation of rope pulls
                      00130 ;       5       Coupler
                      00131 ;       6       Dynamo (single or dual)
                      00132 ;       7       Air Pump (cross compound)
                      00133 ;       8       Oil Burner Blower
                      00134 ;       9       Injector
                      00135 ;       10      Safety Valve
                      00136 ;       11      Independent Brake
                      00137 ;       12      Brake Set / Release
                      00138 ;       13      Ash Dump
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  3
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00139 ;       14      
                      00140 ;       15      Coal Shoveling / Oil Refill
                      00141 ;       16      
                      00142 ;       17      Power Reverser
                      00143 ;       18      Sander 
                      00144 ;       19      Blowdown
                      00145 ;       20      Air Pump Slow
                      00146 ;       21      Air Horn
                      00147 ;       22      
                      00148 ;       23      Wheel Flange
                      00149 ;       24      Boiler Hiss
                      00150 ;       25      Water Refill
                      00151 ;       26      Dumping
                      00152 ;       27      Sanding Valve
                      00153 ;       28      Coasting (rod clanks)
                      00154 ;       29      Open Cylinders
                      00155 ;       30      Cylinder Cock #1
                      00156 ;       31      Cylinder Cock #2
                      00157 ;       32
                      00158 ;
                      00159 ; ----------------------------------------------------------------------------
                      00160 ;       DESIGN NOTES 
                      00161 ; ----------------------------------------------------------------------------
                      00162 ;SET -- SCV_LOAD_MIN,4,0        ;Range Volume Scale to a value between 1-5
                      00163 ;                                               Drifting volume will diminish to this level.
                      00164 ;
                      00165 ;COLD STARTUP FUNCTIONS:
                      00166 ;       Play Startup Sounds: 
                      00167 ;               COLD START SF4 or SF8 (initial time only, otherwise will mute)
                      00168 ;       The following Function Keys will SKIP STARTUP Sounds and begin with RUN sounds:
                      00169 ;       SF8, SF0, SF1, SF2, SF5, SF11   
                      00170 ;
                      00171 ;USE CASES:
                      00172 ;1      Startup Begin All (hold off all other channels until finished)
                      00173 ;               Prime Mover Sounds
                      00174 ;               Servo Enable
                      00175 ;               Muting
                      00176 ;               OpSW Reset
                      00177 ;               Shutdown
                      00178 ;               Servo Disable
                      00179 ;               EStop (silent until restart)
                      00180 ;               Restart (warm or cold)
                      00181 ;               Increaase to Run
                      00182 ;               Idle Trim
                      00183 ;               Startmove
                      00184 ;               Moving (vary with load and notch)
                      00185 ;               Cadence (vary load)
                      00186 ;               Exaust (vary load)
                      00187 ;               Evaluate Motor
                      00188 ;               Run Main
                      00189 ;               Set Acceleration
                      00190 ;               Set Deceleration
                      00191 ;               Run
                      00192 ;2      Horn SF2
                      00193 ;               Whistle SF2
                      00194 ;3      Brake SF10
                      00195 ;               Toots
                      00196 ;4      Bell
                      00197 ;5      Dynamics
                      00198 ;               Hand Brake
                      00199 ;6      Increase Load
                      00200 ;               Decrease Load
                      00201 ;7      Decelerate Brake sounds
                      00202 ;8      Air Compressor
                      00203 ;9      Coupler events
                      00204 ;               Coupler
                      00205 ;               Wheel Flange sound
                      00206 ;               UnCoupler
                      00207 ;10     Distance Event
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  4
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00208 ;               Grade Crossing
                      00209 ;11     Seconday Mover Sounds (Steam Drift, Traction Drift)
                      00210 ;12     Idle (not moving)
                      00211 ;               ALCO Stumble
                      00212 ;               AUX and HEP
                      00213 ;13     Setup Random Sounds (scatter)
                      00214 ;               Cab Chatter
                      00215 ;               User Sounds
                      00216 ;               Air Letoff (SF19)
                      00217 ;               Notch Set (SF21-SF28)
                      00218 ;               Trim Notch and Idle
                      00219 ;               Wheel Flange sound2
                      00220 ;14     Fan
                      00221 ;15     DRYER
                      00222 ;16     Load Default CVs
                      00223 ;
                      00224 ;
                      00225 ;Limits:
                      00226 ;       One SPJ project SDF of multiple schemes can run up to 64Kbytes of code.
                      00227 ;       A single scheme has a 4Kbyte GOTO instruction branch range. (e.g. 2K 2-byte or 4K 4-byte instruc
                      00228 ;       That means that a BRANCH_TO an address beyond the range limit will not execute...Use BRANCH_EXT 
                      00229 ;
                      00230 ;Changes v7.0:
                      00231 ;       1) Remap function keys as noted above
                      00232 ;       2) Fix Compressor on eStop 2/21/22
                      00233 ;
                      00234 ;Function Key Mapping:
                      00235 ;This version (v7) includes new sections for mapping functions to default to other manufactures F0-F28 k
                      00236 ;Or you can edit the TRIG include file, re-assemble and make your own custom function mapping.
                      00237 ;
                      00238 ;HOW FUNCTION KEY MAPPING WORKS
                      00239 ;Mapping functions to default to other manufactures F0-F28 keys:
                      00240 ;Mapping is done by using symbolic constants to define the hex value for each function key. 
                      00241 ;For example TRIG_WHISTLES_ON is a value of 0x09. 
                      00242 ;The hex value 0x09 is the physical decoder function key (F2 in this case). 
                      00243 ;This is the same as the standard include for TRIG_SF2   EQU  0x09    ;byte 1, bit1.  
                      00244 ;And the new symbolic constant is TRIG_WHISTLES_ON       EQU  0x09    ;2-F2: byte 1, bit1. 
                      00245 ;The new base code uses the remapped symbolic name for all functions. 
                      00246 ;So any change to the physical assignment is masked.
                      00247 ;Whereas TRIG_SF4        EQU 0x0B now has a symbolic value of TRIG_OPENCYLS_ON EQU 0x0B ;4-F4: CYL COCKS
                      00248 ;One of the re-mapped values is TRIG_SAFETY_ON   EQU  0x24 ;25-F25: BLOWOFF
                      00249 ;This means that when F25 is toggled the SAFETY BLOWOFF sound function will play.
                      00250 ;I have annotated eac EQU statement with the physical decoder button number 
                      00251 ;for example: ;2-F2: byte 1, bit1
                      00252 ;See SR7TrigV7.INC for F-Key values. The ASM code has the INCLUDE for this file name.
                      00253 ;
                      00254 ;
                      00255 ;Use the following CVs to disable optional features:
                      00256 ;CV185 bit values to disable features1:                                 0-128   [0]
                      00257 ;               bit0 disable  HEP Aux Gen =0 AUX GEN    =1                      =1              
                      00258 ;               bit1 disable hard automatic braking                     =2
                      00259 ;               bit2 disable start up sounds                                    =4
                      00260 ;               bit3 disable Fans                                                               =8
                      00261 ;               bit4 disable toots on direction change                  =16
                      00262 ;               bit5 disable grade crossing random play                 =32
                      00263 ;               bit6 disable bell                                                               =64
                      00264 ;               bit7 fuel prime once for Gen1 diesels OR multiple start warning bells Gen2      =128
                      00265 ;CV186 bit values to disable additional features2               0-128   [0]
                      00266 ;               bit0 enable Low Idle=1          Disabled=0      =1=Enabled
                      00267 ;               bit1 disable Chain bells                                                1-4     =2
                      00268 ;               bit2 disable STOKER change to SHOVEL                    =4
                      00269 ;               bit3 disable AUTO VARY NOTCH                                    =8
                      00270 ;               bit4 disable Shaft Driven Compressor                    =16
                      00271 ;               bit5 disable ALCO Idle Stumble=32 Disable=0             =32
                      00272 ;               bit6 disable Auto REAR horn signals: 0=Off, 64=On       =64
                      00273 ;               bit7 disable Dual Prime Movers           0=Off 128=Dual On
                      00274 ;CV187 bit values to disable additional features3       0-128 [0]
                      00275 ;               bit0 disable Short Opt Horn/whistle      Enabled=0,   =1=disabled
                      00276 ;               bit1 disable DEMO ALL HornS/whistles Enabled=on=0,=2=disabled
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  5
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00277 ;               bit2 disable Bell on Idle Exit                          =4
                      00278 ;               bit3 disable Motor Lock on F3                           =8
                      00279 ;               bit4 disable Start up Muted                                     =16
                      00280 ;               bit5 disable Dynamic BRAKES                                     =32
                      00281 ;               bit6 disable                                                            =64
                      00282 ;               bit7 disable Auto Wheel Slip                            =128
                      00283 ;CV188  BIT values to disable additional features4      0-254 [0] 
                      00284 ;               bit0 disable Traction Motor                             =1 Disabled
                      00285 ;               bit1 disable 2                                                          =2
                      00286 ;               bit2 disable 3                                                          =4
                      00287 ;               bit3 disable 4                                                          =8
                      00288 ;               bit4 disable 5                                                          =16
                      00289 ;               bit5 disable 6                                                          =32
                      00290 ;               bit6 disable 7                                                          =64
                      00291 ;               bit7 disable 8                                                          =128
                      00292 ;
                      00293 ;----------------------------------
                      00294 ;NOTES:
                      00295 ; notch volume routine is improved when the volume scale is set by
                      00296 ;       other external events (deceleration, start from standing, acceleration, etc.)
                      00297 
                      00298 ;
                      00299                                                                                                         
                      00300  
                      00301                                                                                                         
                      00302 ;----------------------------------
                      00303 ;     FUNCTION KEYS DEFINED:   
                      00304 ;----------------------------------
                      00305 ;(A) Function Key Usage: 
                      00306 ;F0- Lights  [disables start-up sounds when on during initialization]
                      00307 ;F1- Bell (Bells1-4 may be chained)
                      00308 ;F2- Horn/Whistle       CV150 selects Horn/Whistle type (Playable when bit7 of CV150 is on)     -- Short
                      00309 ;F3- Coupler / Coupler disconnect       [Auto-coupler/brake set by  CV151 max spd]
                      00310 ;               Lift ring and connect plays with SF3 when SF3 is ON
                      00311 ;               Long train consist brake sounds with SF19 ON
                      00312 ;               Steam Wheel Slip on start-up (Enable) /auto coupler
                      00313 ;               (disables toots on SF3) [Leave on for auto toots]
                      00314 ;F4- Dynamic brake fans when moving             
                      00315 ;               Otherwise: Handbrake sequence   [Handbrake while stopped] 
                      00316 ;               Handbrake loop will PLAY until SF14 Off
                      00317 ;               Must be toggled off after start-up (SF10+SF11) or else handbrake will 
                      00318 ;               keep unit from moving...
                      00319 ;F5- Emergency Lights / Short Horn / Reserved for light function (turn on rear light, etc.) / Cold start
                      00320 ;               Will play shorter horn on SF2
                      00321 ;F6- Ditchlights (Front -- flashing)
                      00322 ;F7- Wheel Flange (continuous when moving) [Disables bell on SF1]
                      00323 ;F8- Prime Mover ON / Mute control/Start-up     [SF8 to OFF is muted to CV volume, 
                      00324 ;               SF8 ON, set REG volume]
                      00325 ;               On the initial push of SF8 the sound comes up. 
                      00326 ;               A secondary push raises the sound again to normal levels.
                      00327 ;               EStop  on SF8 On with SF10 on shut-down (disables motor movement until OFF)
                      00328 ;F9- UNCOUPLE / Disconnect
                      00329 ;F10- BRAKE TO STOP -- Usage:
                      00330 ;                       Independent Brake/Train Brake   [Leave SF3 OFF for auto brakes] 
                      00331 ;                       [SF10 on will enable servo motor stop.]
                      00332 ;                       Toggle OFF plays directional toots WHEN SF3 ON
                      00333 ;               1) Slow servo motor to stop using CV3,CV4 momentum values (where
                      00334 ;                       larger value (50) takes longer to slow/accelerate)
                      00335 ;               2) Lock motor at standstill to simulate engine brake set. Servo
                      00336 ;                       will not resume until SF10 is toggled off.
                      00337 ;               3) While brake is set toggle SF3 on to begin uncoupling. SF3 will play 
                      00338 ;                       lift ring noise in preparation for disconnect. 
                      00339 ;               4) Releasing the brake and advancing the throttle will play coupler
                      00340 ;                       disconnect when SF3 is already on.
                      00341 ;               Brake rate is determined by BEMF and CV3,4
                      00342 ;               Auto Coupler coupler clank and BRAKE if SF3 is ON,  is dir chng and last PK spd below e.
                      00343 ;                       [Auto-coupler/brake set by  CV151 max spd] SF3 ON for un-coupler
                      00344 ;                       [Leave SF3 on for auto coupler] 
                      00345 ;                       EStop  on SF8 On with SF10 on Shutdown  (disables servo motor movement until OFF
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  6
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00346 ;                       Toggle OFF plays directional toots WHEN F11 OFF
                      00347 ;       SF10 OFF -- Release Brake [not SF10 Apply else Release] 
                      00348 ;               Use for start-up -- SF10 on + F11 on to cold start (release F11 to end fuel prime)
                      00349 ;F11- High Fan / Steam=Greaser
                      00350 ;               Allow SUSTAIN horn on SF2
                      00351 ;F12- Coupler / Coupler disconnect      [Autocoupler/brake set by  CV151 max spd]
                      00352 ;               Lift ring and connect plays with SF3 when F11 is ON
                      00353 ;               Long train consist brake sounds with SF19 ON
                      00354 ;               Steam Wheel Slip on start-up (Enable) /auto coupler
                      00355 ;               (disables toots on SF3) [Leave on for auto toots]
                      00356 ;F13- Ditchlights (Rear -- flashing)
                      00357 ;F14- Hand Brake
                      00358 ;F15- EStop when moving and shut-down   (disables motor movement until OFF)
                      00359 ;F16- Air Dryer ON Shutdown
                      00360 ;F17- Brake Set / Release Automatic
                      00361 ;F18- Sanding Valve / Water Fill
                      00362 ;F19- Short Air Let Off 
                      00363 ;F20- Compressor / Air features disable   / Coal Fill  
                      00364 ;               SF20 ON =disable AIR sound/FEATURES, trig BLOWOFF/HNDL_FAST_DRYER1 then compressor ONE t
                      00365 ;               [SF20 OFF enables pop-off, DRYER and compressor]
                      00366 ;F21- Straight to manual notch1
                      00367 ;F22- Engine Compartment Sounds
                      00368 ;F23- Grade crossing Air-horn/Whistle sequence  [Bell stays on until SF23 off]
                      00369 ;F24- Reverser Center
                      00370 ;F25- Enables AUX generator (Disables Auto Notch Vary)
                      00371 ;               Pressing SF30 on the throttle once HEP has already been 
                      00372 ;               engaged will allow the prime mover to come down a little. 
                      00373 ;F26- Manual Notching Up / Run8
                      00374 ;               Leave on for increased load;
                      00375 ;               Leave SF26 OFF to use run trim option: [will increment 
                      00376 ;               notches on acceleration events; 
                      00377 ;               SF27 will decrement run trim.
                      00378 ;F27- Notch down        -- Leave ON for decreased load;
                      00379 ;               Toggle SF27 ON Is notch down for EVENT, 
                      00380 ;                       integrate -VE in SPEED_DELTA;
                      00381 ;               SF27 will decrement run trim (i.e., use to select lower trim value).
                      00382 ;               Steam=Wheel-slip, when CV155 is not 0 and SF3 ON
                      00383 ;               Manual Notching Down / Coast
                      00384 ;F28- Straight to manual notch8
                      00385 ;============================ virtual functions: =====================
                      00386 ;F29- FORCE STARTUP SOUNDS / Load / Global Gain
                      00387 ;F30- Enables AUX generator (Disables Auto Notch Vary)
                      00388 ;               Pressing SF30 on the throttle once HEP has already been 
                      00389 ;               engaged will allow the prime mover to come down a little. 
                      00390 ;F34- Cab Chatter / Shutters    --       Cab Sounds
                      00391 ;
                      00392 ;       ==================================  
                      00393 ;Note: Many sound levels have been reduced so that horn/whistle is much louder.
                      00394 ;       Global Gain in the project has been maximized to help. Some low volume 
                      00395 ;       levels may need increases on your model.
                      00396 ;
                      00397 ;       ==================================  
                      00398 ;(B) Sound FX defined CV's:     [decoder CV8=8  reset value in brackets]
                      00399 ;CV3      Momentum acceleration rate, 0-63, 63=max, (uses after braking to start) [50]
                      00400 ;CV4      Momentum deceleration rate, 0-63, 63=max, (uses for braking to stop) [40]
                      00401 ;CV7 Version ID 51=Older decoders, 16=Newer SFX2 decoders
                      00402 ;SCV_RESET (CV8)  Reset Decoder values to factory =129=Digitrax
                      00403 ;SCV_19  Advanced Consist [0]
                      00404 ;SCV_21  Advanced Consist SF0-SF8 [248] 
                      00405 ;SCV_22  Advanced Consist SF3-SF7 [52] 
                      00406 ;SCV_54 (Cv60)   Road or Switching Mode [64,0,1]
                      00407 ;SCV_57  BEMF Consist + Advanced Consist, 0-15 / 0-15, 15=max (14,14; 15,15) [238]
                      00408 ;CV58  Master Volume, 0-15, 0= max, (SF8 used for Mute) [11] 
                      00409 ;       DEFAULT_GLBL_GAIN               Predefined as 0xC0
                      00410 ;CV60  Scheme select CV, 0=Electric 1=Steam     [0]
                      00411 ;CV64  Logic select CV, 0=Aux Logic output 64=Normal LED outputs        [64]
                      00412 ;SCV_USER_SDF_SUB_ID            ;CV105  [xx] Sub ID is SUB id or project version
                      00413 ;SCV_USER_SDF_FIX_ID            ;CV106  [xx] FIX ID is change id or project release
                      00414 ;CV121 Sound Project SDF Version 0,4,8,16       Read Only Value
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  7
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00415 ;CV122 Product TYpe, 12 = Digitrax SFX sound decoder    Read Only Value
                      00416 ;CV123 Hardware Version, 64= SDXH166 type decoder       Read Only Value. May vary based on SFX2 decoder 
                      00417 ;                               ;CV126= DL config byte
                      00418 ;SNDCV_CONFIGA  ;CV129= config byte
                      00419 ;SNDCV_CONFIGB  ;CV130= config byte
                      00420 ;SCV_DCONFIG    ;CV131= Electric config
                      00421 ;CV132 Engine Notch rate                64-192  [164]
                      00422 ;CV133 Steam Chuff/CAM config, 128=>EXT cam, 1-127=>DRIVER dia in inches [60]
                      00423 ;CV134 Steam gear ratio trim, 32=100% ratio,    [41]
                      00424 ;CV135 vol level when MUTE action is triggered, e.g. SF8=ON     [30]
                      00425 ;SCV_MAIN_PITCH ;CV136
                      00426 ;SCV_137                ;CV137
                      00427 ;SCV_138                ;SCV138= 
                      00428 ;CV139 Set to trigger distance event    0-64    [30]
                      00429 ;User configurable SoundCV's
                      00430 ;SCV_FREEFORM           ;SCV_140+, here the SCV's are SDF defined:
                      00431 ;CV140 PRIME mover Electric/chuff-exhaust vol 0-64      [50]
                      00432 ;CV141 Bell Volume                                                      0-64    [36]
                      00433 ;CV142 WHISTLE/HORN vol                                         0-64    [42]
                      00434 ;CV143 AIR feature volume, brake release Air sounds Volume 0-64 [49]
                      00435 ;CV144 Engine brake volume 0-64 [55]
                      00436 ;CV145 Miscellaneous volume 0-64        [51] 
                      00437 ;CV146 Delay (24mS counts) between Bells 1-100  [01] 
                      00438 ;notCV147 Time between DRYER cycles Users normally reset DRYER rate to 10 or more[27] 
                      00439 ;notCV148 Time between Air-pump/Compressor cycles       [30] 
                      00440 ;notCV149 Air-pump/Compressor run time                          [52] 
                      00441 ;CV150 Horn/Whistle Selector,0=std ,  1/7 =Alternate, +128 for Playable volume [0]
                      00442 ;                       HORN SELECTED CV150:
                      00443 ;                                               Decimal HEX                     Bit
                      00444 ;                                                                                       7654 3210
                      00445 ;                               1               0               0x00            0000 0000
                      00446 ;                               2               1               0x01            0000 0001
                      00447 ;                               3               2               0x02            0000 0010
                      00448 ;                               4               3               0x03            0000 0011
                      00449 ;                               5               4               0x04            0000 0100
                      00450 ;                               6               5               0x05            0000 0101
                      00451 ;                               7               6               0x06            0000 0110
                      00452 ;                               PLAYABLE:
                      00453 ;                               1               128             0x80            1000 0000
                      00454 ;                               2               129             0x81            1000 0001
                      00455 ;                               3               130             0x82            1000 0010
                      00456 ;                               4               131             0x83            1000 0011
                      00457 ;                               5               132             0x84            1000 0100
                      00458 ;                                               Decimal HEX                     Bit
                      00459 ;CV151 speed limit FOR AUTOMATIC COUPLER/BRAKE on DIR chng. about 1/2MPH per unit
                      00460 ;CV152 defines USER code for this SDF
                      00461 ;CV153 is SUB id
                      00462 ;CV154 Delay brake apply 1-100/ speed at which brake sounds begin to play [12] 
                      00463 ;CV155 Notching mode 0=AUTO, 1=SEMIAUTO, 2=MANUAL NOTCHES       [01] /STEAM Slip Mode: 0=AUTO, 1=SEMIAUT
                      00464 ;CV156 delay for HORN start in 27mS VALUES
                      00465 ;CV157 is FOR bell selection 
                      00466         ;BELL SELECTED CV157:
                      00467                         ;                       Decimal HEX                     Bit
                      00468                         ;                                                               7654 3210
                      00469                         ;       1               0               0x00            0000 0000
                      00470                         ;       2               1               0x01            0000 0001
                      00471                         ;       3               2               0x02            0000 0010
                      00472                         ;       4               3               0x03            0000 0011
                      00473                         ;       5               4               0x04            0000 0100
                      00474 ;CV158  DIGITRAX RESERVED
                      00475 ;CV159  Min value to tune minimum volume 5-8 [7]
                      00476 ;CV160  VARIANT id or project version   0-254   [000]
                      00477 ;       Extended Custom CV values: These are not easily modified by the user as yet (Use SoundLoader to 
                      00478 ;CV161 Initial Idle Trim                                                        4-64    [48]
                      00479         ;INIT_IDLE_TRIM EQU 0x48        ;decimal 4, 16, 32, 64
                      00480 ;CV162          Air Letoff Volume                                               0-64    [25]
                      00481 ;notCV163       Safety Run Time/ how often to check boiler pressure             0-64    [32]
                      00482 ;notCV164  Level in the guage/ Water Pump Cycle Time, percent full      0-64     [19]
                      00483 ;notCV165       add fuel to firebox at 150lbs/ Stoker/oil pump run time 0-254   [20]    
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  8
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00484 ;notCV166       Cut-off Speed for wheel slip chuffs                             4-9     [9]
                      00485 ;notCV167       Cut-off Speed for Auto Cyl. blow down                   0-64    [7]
                      00486 ;CV168  Sander Volume                                                                   0-64    [32]
                      00487 ;CV169  Cutoff Speed for high speed chuffs                              40-99   [48]
                      00488 ;CV170  Cut-off Speed LOW       skips brake sounds                      4-39    [12]
                      00489 ;CV171  AUX GEN VOLUME                                                                  0-64    [40]
                      00490 ;CV172  FAN MOTOR VOLUME                                                                0-64    [30]
                      00491 ;CV173  STEAM blow-down volume                                                  0-64    [50]
                      00492 ;CV174  AIR DRYER Air sounds Volume                                     0-64    [49] 
                      00493 ;CV175  Air compressor volume                                                   0-64    [40]
                      00494 ;CV176  TRACTION MOTOR VOLUME                                                   0-64    [60]            
                      00495 ;CV177  Coupler Slack Volume                                                    0-64    [31]
                      00496 ;CV178  Wheel Flange Volume                                                             0-64    [40]
                      00497 ;CV179  Dynamic brake / Dynamo volume                                   0-64    [55]
                      00498 ;CV180  Steam Blow-down/Safety vol                                              0-64    [59]
                      00499 ;CV181  Power Reverser volume                                                   0-64    [40]
                      00500 ;CV182  brake release Air sounds Volume                                 0-64    [32] 
                      00501 ;CV183  Water fill/Coal fill Volume                                             0-64    [54]
                      00502 ;CV184  Steam cock blow down threshold                                  1-64    [24]
                      00503 ;CV185 bit values to disable features1:                                 0-128   [0]
                      00504 ;               bit0 disable  HEP Aux Gen =0 AUX GEN    =1                      =1              
                      00505 ;               bit1 disable hard automatic braking                     =2
                      00506 ;               bit2 disable start-up sounds                                    =4
                      00507 ;               bit3 disable Fans                                                               =8
                      00508 ;               bit4 disable toots on direction change                  =16
                      00509 ;               bit5 disable grade crossing random play                 =32
                      00510 ;               bit6 disable bell                                                               =64
                      00511 ;               bit7 fuel prime once for Gen1 diesels OR multiple start warning bells Gen2      =128
                      00512 ;CV186 bit values to disable additional features2               0-128   [0]
                      00513 ;               bit0 enable Low Idle=1 Disabled=0       =1=Enabled
                      00514 ;               bit1 disable Chain bells 1-4                                    =2
                      00515 ;               bit2 disable STOKER change to SHOVEL                    =4
                      00516 ;               bit3 disable AUTO VARY NOTCH                                    =8
                      00517 ;               bit4 disable Shaft Driven Compressor                    =16
                      00518 ;               bit5 disable ALCO Idle Stumble=32 Disable=0             =32
                      00519 ;               bit6 disable Auto REAR horn signals: 0=Off, 64=On       =64
                      00520 ;               bit7 disable Dual Prime Movers          0=Off 128=Dual On
                      00521 ;CV187 bit values to disable additional features3       0-128 [0]
                      00522 ;               bit0 disable Short Opt Horn/whistle     Enabled=0, =1=disabled
                      00523 ;               bit1 disable DEMO ALL HornS/whistles Enabled=on=0, =2=disabled
                      00524 ;               bit2 disable Bell on Idle Exit                          =4;
                      00525 ;               bit3 disable Motor Lock on SF10                         =8
                      00526 ;               bit4 disable start-up Muted                                     =16
                      00527 ;               bit5 disable Dynamic BRAKES                                     =32
                      00528 ;               bit6 disable                                                            =64
                      00529 ;               bit7 disable Auto Wheel Slip                            =128
                      00530 ;CV188 bit values to disable additional features4       0-128 [0]
                      00531 ;               bit0 disable 1                                                          =1
                      00532 ;               bit0 disable 2                                                          =2
                      00533 ;               bit2 disable 3                                                          =4;
                      00534 ;               bit3 disable 4                                                          =8
                      00535 ;               bit4 disable 5                                                          =16
                      00536 ;               bit5 disable 6                                                          =32
                      00537 ;               bit6 disable 7                                                          =64
                      00538 ;               bit7 disable 8                                                          =128
                      00539 ;CV189 Water Alarm Volume                       0-64    [45]
                      00540 ;notCV190 Cut-off Speed for high speed chuffs                           40-99   [48]    
                      00541 ;notCV191 Stoker/oil pump run time              0-254   [20]    
                      00542 ;notCV192 Drift Volume                                  0-64    [20]                                    
                      00543 ;notCV193 Cut-off Speed for LONG HORN   4-9     [9]
                      00544 ;notCV193 Sound Project TYPE
                      00545 ;Possible Values are :
                      00546 ;       :                       Decimal HEX                     Bit
                      00547 ;       :                                                               7654 3210
                      00548 ;       :       1               0               0x00            0000 0000               Steam Coal
                      00549 ;       :       2               1               0x01            0000 0001               Steam Oil
                      00550 ;       :       3               2               0x02            0000 0010               Steam Coal  Arti
                      00551 ;       :       4               3               0x03            0000 0011               Steam Oil Articu
                      00552 ;       :       5               4               0x04            0000 0100               Steam Geared    
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE  9
single scheme- discrete notching SDF3.0 Decoder Series6

LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00553 ;       :       9               8               0x08            0000 1000               Steam non-fired 
                      00554 ;       :       81              80              0x50            0101 0000               Gas Carbody / Do
                      00555 ;       :       127             128             0x80            1000 0000               Diesel
                      00556 ;       :       145             144             0x90            1001 0000               Diesel Carbody  
                      00557 ;       :       193             192             0xC0            1100 0000               Diesel Dual Moto
                      00558 ;       :       225             224             0xE0            1110 0000               Diesel Dual Moto
                      00559 ;       :       241             240             0xF0            1111 0000               Diesel Boxcab
                      00560 ;       :       137             136             0x88            1000 1000               Traction
                      00561 ;notCV194 Sound Project Memory Required [1=512kb, 2=1024kb, 3=8mb, 4=4mb, 8=8mb, 16=16mb].
                      00562 ;notCV195 Sound Project JMRI Definition(0-255)
                      00563 ;CV200 RESERVED
                      00564 ;CV201 RESERVED
                      00565 ;CV202 RESERVED
                      00566 ;notCV203 Decoder Memory Available (read only) [1=512kb, 2=1024kb, 3=8mb, 4=4mb, 8=8mb, 16=16mb].
                      00567         
                      00568 ;==================================================
                      00569 ;----------------------------------
                      00570 ;macros to ASSEMBLE  SDF
                      00571 ;----------------------------------
  00000030            00572 VERNO   SET     VERSION_3       ;SDF ver 3.00
                      00576     LIST
  000000FB            00577 CUSTOM_SDF                      EQU     0xFB    ;cv152  AUTHOR code John McMasters (CV 251)
  00000046            00578 USER_SDF_SUB_ID         set     70              ;cv105  AND CV160       ;Version 6 where 60=v6.1
  00000000            00579 USER_SDF_FIX_ID         set     0               ;cv106  AND CV160       ;Version 7.0 where 0=v6.1
  00000100            00580 PROJECT_ID                      EQU     256             ;cv153  000-254 <ENTER ID HERE> 
                      00581 ;
                      00582 ;REVISED FROM SCVs 1/5/21
                      00583 ;<ENTER HERE> Modify these constants for your custom model 
  00000037            00584 DRIFT_VOLUME                    EQU 55  ;Drift Volume           0-64    [20]                            
  00000003            00585 START_SLIP_SPEED                EQU 3   ;Minimum Speed to Slip  0-32    [3]
  0000002F            00586 DRYER_RATE                              EQU 47  ;Time between DRYER cycles [12]
  0000001E            00587 AIRPUMP_START_RATE              EQU 30  ;Time between Compressor cycles [30]
  00000058            00588 AIR_PRESSURE_LIMIT              EQU 88  ;COMPRESSOR DURATION
                      00589 
                      00590 
                      00591 
                      00592          #INCLUDE       EL7TrigV7.INC
                      00001 
                      00002 ;MAP V6 FUNCTION VALUES TO TRIGGER:     SR7TrigV6.inc 5/24/22
  0000000C            00003 TRIG_LIGHTS_ON          EQU     0x0C            ;0-F0: headlight/F0 state
                      00004 ;                                               DYNAMO_SUSTAIN,loop_till_LIGHTS_OFF
  00000008            00005 TRIG_BELLS_ON           EQU     0x08            ;1-F1: Bell
  00000009            00006 TRIG_HORNS_ON           EQU     0x09            ;2-F2: byte 1, bit1
                      00007 ;                                               WHISTLE_LOOP,loop_till_HORNS_OFF
  0000000A            00008 TRIG_COUPLE_ON          EQU     0x0A            ;3-F3: Coupler
  0000000B            00009 TRIG_DYNBRK_ON          EQU     0x0B            ;4-F4: Dynamic Brake
                      00010 ;                                               SHOVEL_LOOP,loop_till_DYNBRK_OFF
  00000010            00011 TRIG_ELIGHTS_ON         EQU     0x10            ;5-F5: byte 2,bit0 Emergency Lights
  00000011            00012 TRIG_DITCHL_ON          EQU     0x11            ;6-F6: Ditch Lights Front
  00000012            00013 TRIG_FLANGES_ON         EQU     0x12            ;7-F7: WHEEL_FLANGE
                      00014 ;                                               WHEEL_FLANGE2,loop_till_FLANGES_OFF
  00000013            00015 TRIG_SMUTE_ON           EQU     0x13            ;8-F8: Mute half, Mute Full, Unmute
                      00016 
                      00017 ;---------
  00000018            00018 TRIG_UNCOUPLE_ON        EQU     0x18    ;9-F9: byte 3 bit 0 Uncouple lift ring
                      00019 ;                                               SILENCE,loop_till_UNCOUPLE_OFF
  00000019            00020 TRIG_IBRAKES_ON         EQU     0x19    ;10-F10:        BRAKE TO STOP
  0000001A            00021 TRIG_FANS_ON            EQU     0x1A    ;11-F11:        FAN HIGH
  0000001B            00022 TRIG_COUPLERD_ON        EQU     0x1B    ;12-F12:        DISCONNECT COUPLER
                      00023 
  00000014            00024 TRIG_DITCHR_ON          EQU     0x14    ;13-F13: BYTE 2, bit 4, Ditch Lights Rear
                      00025 ;                                               REAR DITCHLIGHTS
  00000015            00026 TRIG_HBRAKE_ON          EQU     0x15    ;14-F14:        HAND BRAKE
  00000016            00027 TRIG_ESTOP_ON           EQU     0x16    ;15-F15:        EMERG STOP
  00000017            00028 TRIG_DRYER_ON           EQU     0x17    ;16-F16:        AIR DRYER
                      00029 
  0000001C            00030 TRIG_BRAKEA_ON          EQU     0x1C    ;17-F17 ;byte 3, bit 4  BRAKE SET
  0000001D            00031 TRIG_SAND_ON            EQU     0x1D    ;18-F18:        SANDING
  0000001E            00032 TRIG_LETOFF_ON          EQU     0x1E    ;19-F19:        AIR LETOFF
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 10
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001F            00033 TRIG_COMPR_ON           EQU     0x1F    ;20-F20:        COMPRESSOR DISABLE
                      00034 ;
  00000020            00035 TRIG_RUN1_ON            EQU     0x20    ;21-F21: expanded FUNCTIONS Drive Hold Notch1
  00000021            00036 TRIG_USERSND_ON         EQU     0x21    ;22-F22:        ENG COMP SNDS
  00000022            00037 TRIG_ALTGCS_ON          EQU     0x22    ;23-F23:        GRADE CROSSING
  00000023            00038 TRIG_REVS_ON            EQU     0x23    ;24-F24:        REVERSER CENTER
                      00039 
  00000024            00040 TRIG_GMAINT_ON          EQU     0x24    ;25-F25: GENERATOR HEP / General Maint
  00000025            00041 TRIG_NOTCHUP_ON         EQU     0x25    ;26-F26: NOTCHUP
  00000026            00042 TRIG_NOTCHDN_ON         EQU     0x26    ;27-F27: NOTCHDN
  00000027            00043 TRIG_RUN8_ON            EQU     0x27    ;28-F28:
                      00044 
                      00045 
                      00046 ;----------------FIRST 8 bsc regs reserved
  00000028            00047 TRIG_SHUTTERS_ON        EQU     0x28    ;29-F29: expanded FUNCTIONS: Shutters
  00000029            00048 TRIG_STARTUP_ON         EQU     0x29    ;30-F30:        FORCE STARTUP
  00000024            00049 TRIG_AXGEN_ON           EQU     0x24    ;31-F25:        GENERATOR HEP
  0000002B            00050 TRIG_TBRAKE_ON          EQU 0x2B        ;32-F32:        T Brake
                      00051 
  0000002C            00052 TRIG_FAND_ON            EQU     0x2C    ;33-F33:        Fan D
  0000002D            00053 TRIG_USERSND2_ON        EQU     0x2D    ;34-F34:        CAB CHATTER 
  0000002E            00054 TRIG_BX6_ON                     EQU     0x2E    ;35-F35:
  0000002F            00055 TRIG_BX7_ON                     EQU     0x2F    ;36-F36:
                      00056 
                      00057 ;FUNCTION change events
  0000000C            00058 loop_till_LIGHTS_OFF    EQU     TRIG_LIGHTS_ON          ;headlight
                      00059 
  00000008            00060 loop_till_BELLS_OFF             EQU     TRIG_BELLS_ON           ;F1 change event
  00000009            00061 loop_till_HORNS_OFF             EQU     TRIG_HORNS_ON
  00000019            00062 loop_till_IBRAKES_OFF   EQU     TRIG_IBRAKES_ON
  0000000B            00063 loop_till_DYNBRK_OFF    EQU     TRIG_DYNBRK_ON
                      00064 
  00000015            00065 loop_till_HBRAKE_OFF    EQU     TRIG_HBRAKE_ON
  00000025            00066 loop_till_NOTCHUP_OFF   EQU     TRIG_NOTCHUP_ON
  00000026            00067 loop_till_NOTCHDN_OFF   EQU     TRIG_NOTCHDN_ON
  00000013            00068 loop_till_SMUTE_OFF             EQU     TRIG_SMUTE_ON
                      00069 
  00000018            00070 loop_till_UNCOUPLE_OFF  EQU     TRIG_UNCOUPLE_ON
  00000022            00071 loop_till_ALTGCS_OFF    EQU     TRIG_ALTGCS_ON
  0000000A            00072 loop_till_COUPLE_OFF    EQU     TRIG_COUPLE_ON
  00000012            00073 loop_till_FLANGES_OFF   EQU     TRIG_FLANGES_ON
                      00074 
  0000001D            00075 loop_till_CFILL_OFF             EQU     TRIG_SAND_ON
  00000016            00076 loop_till_ESTOP_OFF             EQU     TRIG_ESTOP_ON
  0000002C            00077 loop_till_WFILL_OFF             EQU     TRIG_FAND_ON
  0000002D            00078 loop_till_CSHOV_OFF             EQU     TRIG_USERSND2_ON
                      00079 
  00000024            00080 loop_till_GMAINT_OFF    EQU     TRIG_GMAINT_ON
  0000001F            00081 loop_till_COMPR_OFF             EQU     TRIG_COMPR_ON
  0000001E            00082 loop_till_LETOFF_OFF    EQU     TRIG_LETOFF_ON
                      00083 
  00000017            00084 loop_till_DRYER_OFF             EQU     TRIG_DRYER_ON
  00000020            00085 loop_till_BOILER_OFF    EQU     TRIG_RUN1_ON
  00000021            00086 loop_till_BLOWER_OFF    EQU     TRIG_USERSND_ON
  00000023            00087 loop_till_REVS_OFF              EQU     TRIG_REVS_ON
                      00088 
  0000001A            00089 loop_till_TRIG_FANS_OFF         EQU     TRIG_FANS_ON
  0000002B            00090 loop_till_SAFETY_OFF    EQU     TRIG_TBRAKE_ON
  00000024            00091 loop_till_AX27_OFF              EQU     TRIG_AXGEN_ON
  00000027            00092 loop_till_RUN8_OFF              EQU     TRIG_RUN8_ON
                      00093 
                      00094 ;;;;;;;;;;;;; end SR7TrigV6.inc
                      00593 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00594 ;PRIME MOVER CONSTANTS:
                      00595 ;Idle speed - 315 rotations per minute (rpm)
  0000013B            00596 MIN_RPM         EQU     315     
                      00597 ;645 series has a maximum engine speed of between 900 and 950
  00000384            00598 MAX_RPM         EQU     900
                      00599 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 11
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00600          #INCLUDE       EL7c4x6d30base.INC
                      00001 ; 12/2/22 v7.0
                      00002 ;disable low idle       
                      00003 ;project id and author id
                      00004 ;volumes
                      00005 ; moving brake fix
                      00006 
                      00007         ;THIS IS EL7c4x6d30base.INC
                      00008 
                      00009 ;------------------------------------------
  00000001            00010 USER_VARIANT_ID         EQU     1               ;CV160 is variant# 
  00000002            00011 USER_VARIATION_ID       EQU     2               ;cv156  Variation with Notching if CV121/SW version is 2
                      00012 ;spare WORK flag BIT
  00000005            00013 WKSB_INTERLOCK_BIT  EQU 5               ;0= MUTE channels 2/3 for chnl 1 DIESEL STATUP
  00000020            00014 WKSB_INTERLOCK_MASK EQU 0x20            ;bit involved
                      00015 ;additional SDF settings
  00000006            00016 WKSB_IDLELOCK_BIT       EQU     6               ;0= IDLE interlock
  00000040            00017 WKSB_IDLELOCK_MASK      EQU     0x40            ;bit involved
  00000003            00018 WKSB_ACCEL_BIT          EQU     3               ;0= IDLE interlock
  00000008            00019 WKSB_ACCEL_MASK         EQU     0x08            ;bit involved
                      00020 ;USER_INTLK_BITS MASKS:
  00000080            00021 VARY_DRIFT_MASK7        EQU     0x80    ;MASK just do bit7      Vary auto grade crossing 6/25/16        
  00000040            00022 STATIC_MAINT_MASK6      EQU     0x40    ;MASK just do bit6      STATIC MAINTENANCE SOUNDS INTERLOCK
  00000020            00023 COUPLER_MASK5           EQU     0x20    ;MASK just do bit5      AUTO COUPLER INTERLOCK
  00000010            00024 CYLCOCK_MASK4           EQU     0x10    ;MASK just do bit4      OPEN CYLCOCK INTERLOCK
  00000008            00025 DYN_CTRL_MASK3          EQU     0x08    ;MASK just do bit3      NOT_USED INTERLOCK
  00000004            00026 AUTO_BRAKE_MASK2        EQU     0x04    ;MASK just do bit2      AUTOMATIC BRAKING INTERLOCK
  00000002            00027 START_MASK1                     EQU     0x02    ;MASK just do bit1      STARTUP SOUNDS INTERLOCK
  00000001            00028 COMP_MASK0                      EQU     0x01    ;MASK just do bit0      COMPRESSOR AND AIR SOUNDS INTERL
                      00029 
                      00030 ;VOLUME SCALE CONSTANTS v2.0
  0000000F            00031 SCALE_F EQU     0x0F
  0000000E            00032 SCALE_E EQU     0x0E
  0000000D            00033 SCALE_D EQU     0x0D
  0000000C            00034 SCALE_C EQU     0x0C
  0000000B            00035 SCALE_B EQU     0x0B
  0000000A            00036 SCALE_A EQU     0x0A
  00000009            00037 SCALE_9         EQU     0x09
  00000008            00038 SCALE_8         EQU     0x08
  00000007            00039 SCALE_7         EQU     0x07
  00000006            00040 SCALE_6         EQU     0x06
  00000005            00041 SCALE_5         EQU     0x05
  00000004            00042 SCALE_4         EQU     0x04
  00000003            00043 SCALE_3         EQU     0x03
  00000002            00044 SCALE_2         EQU     0x02
  00000001            00045 SCALE_1         EQU     0x01
                      00046 
  00000001            00047 SCALE_INCR_1    EQU 0x01
  00000002            00048 SCALE_INCR_2    EQU 0x02
  00000003            00049 SCALE_INCR_3    EQU 0x03
  00000004            00050 SCALE_INCR_4    EQU 0x04
  00000006            00051 SCALE_INCR_6    EQU 0x06
  00000008            00052 SCALE_INCR_8    EQU 0x08
                      00053 
                      00054 ;see SCV_LOAD_MIN for Min value to tune minimum volume 1-5 [5] VARY_LOAD / SCALE
  00000008            00055 SCALE_MIN               EQU     SCALE_8 ;motor scale will vary 01-15
  0000000B            00056 SCALE_DRIFT             EQU     SCALE_B
  0000000C            00057 SCALE_MID               EQU     SCALE_C
  0000000F            00058 SCALE_MAX               EQU SCALE_F
                      00059 ;see    DRIFT_VOLUME,58,0                       ;CV191 Drift Volume             0-64    [20]            
                      00060 
  0000004F            00061 IMAXG_DIESEL    EQU     0x4F    ;MAXG_DIESEL    EQU     0x1C
  0000005E            00062 IMAXP_DIESEL    EQU     0x5E    ;0x7E   ;MAXP_DIESEL    EQU     0x3E
  0000004F            00063 IMAXG_STEAM             EQU     0x4F    ;MAXG_STEAM     EQU     0x1C
  0000007E            00064 IMAXP_STEAM             EQU     0x7E    ;0x5E   ;0x7E   ;0x3E   ; MAXP_STEAM    EQU     0x7E            
                      00065 ;notch volume changes with change in working notch [used with volume scales above]
  0000008F            00066 COMP_notchbits  EQU     0x8F                    ;MASK just compare 3 NOTCH bits in COMPARE xNNN-xxxx
  0000007F            00067 COMP_bit7               EQU     0x7F                    ;MASK just do bit7      0111 1111
  000000BF            00068 COMP_bit6               EQU     0xBF                    ;MASK just do bit6      1011 1111
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 12
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000DF            00069 COMP_bit5               EQU     0xDF                    ;MASK just do bit5      1101 1111
  000000EF            00070 COMP_bit4               EQU     0xEF                    ;MASK just do bit4      1110 1111
  000000F7            00071 COMP_bit3               EQU     0xF7                    ;MASK just do bit3      1111 0111
  000000FB            00072 COMP_bit2               EQU     0xFB                    ;MASK just do bit2      1111 1011
  000000FD            00073 COMP_bit1               EQU     0xFD                    ;MASK just do bit1      1111 1101
  000000FE            00074 COMP_bit0               EQU     0xFE                    ;MASK just do bit0      1111 1110
                      00075 ;===================================================================================
                      00076 ;       WORK_NOTCH is computed by the decoder and is continuously changed. 
                      00077 ;       The rate of change is managed by the SCV_NOTCH   (CV132) Controller Notch Rate where the 
                      00078 ;       default value CV132=127 is mid range. Lower values are a slower rate -- higher is faster.  
                      00079 ;       This project uses increments by NOTCH_UP_VAL of decimal 16 [0x10] for each notch.
                      00080 ;       WORK_NOTCH will vary by more than one increment depending on rate of speed change and notch rate
                      00081 ;       The variable input to the computation is WORK_SPEED which is an internal value from decimal 0-12
                      00082 ;       128 divided by 16 gives the 7 integers for notches 1-8.
                      00083 ;       However the WORK_NOTCH register is incremented by 16's and has the range:
                      00084 ;       NOTCH   Decimal HEX                     Bit                     Throttle 
                      00085 ;                                                               7654 3210       Speed (typical) at notch
                      00086 ;       0               0               (low idle option is at rest, not moving... )
                      00087 ;       1               0               0x00            0000 0000               1-10
                      00088 ;       2               16              0x10            0001 0000               10-20
                      00089 ;       3               32              0x20            0010 0000               21-22
                      00090 ;       4               48              0x30            0011 0000               23-25
                      00091 ;       5               64              0x40            0100 0000               26-35
                      00092 ;       6               80              0x50            0101 0000               36-38
                      00093 ;       7               96              0x60            0110 0000               39-49
                      00094 ;       8               112             0x70            0111 0000               50-99
                      00095 ;       9               128             0x80            1000 0000               
                      00096 ;       10              144             0x90            1001 0000
                      00097 ;       11              160             0xA0            1010 0000
                      00098 ;       12              176             0xB0            1011 0000
                      00099 ;       13              192             0xC0            1100 0000
                      00100 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  00000010            00101 NOTCH_UP_VAL    EQU     16
  FFFFFFF0            00102 NOTCH_DOWN_VAL  EQU     -NOTCH_UP_VAL
  00000000            00103 NOTCH1  EQU     0x00
  00000010            00104 NOTCH2  EQU     0x10
  00000020            00105 NOTCH3  EQU     0x20
  00000030            00106 NOTCH4  EQU     0x30
  00000040            00107 NOTCH5  EQU     0x40
  00000050            00108 NOTCH6  EQU     0x50
  00000060            00109 NOTCH7  EQU     0x60
  00000070            00110 NOTCH8  EQU     0x70
                      00111 ;NOTCH9 EQU     0x80
  00000020            00112 MAX_NOTCH_VAL   EQU     NOTCH3
  00000000            00113 MIN_NOTCH_VAL   EQU     NOTCH1
                      00114 ;USE CV_169;INIT_IDLE_TRIM      EQU 0x48        ;decimal 4, 16, 32, 64
                      00115 ;SCV_SPEED_MODE                 ;CV155, 0=AUTO, 1=SEMIAUTO, 2=MANUAL NOTCHES
  00000000            00116 CV155_AUTO      EQU     0               ;AUTOMATIC code
  00000001            00117 CV155_SEMI      EQU     1               ;SEMI-AUTO code 
  00000002            00118 CV155_MANUAL    EQU     2               ;MANUAL code 
  00000000            00119 CV155_NOSLIP    EQU     0               ;00=STD=NO wheel slip on SF27, 01=WHEEL slip with SF27 ON
  00000028            00120 SLIP_VALUE      EQU     0x28            ;spd incrememt when slipping
  00000000            00121 NO_SLIP_VALUE   EQU     0
  000000FF            00122 MAX_SLIP_VAL    EQU     0xFF    
                      00123 
                      00124 ;CONSTANTS FOR AIR AND BRAKES:
  00000028            00125 MIN_AIR_PRESS   EQU     40
  0000003C            00126 MIN_BRAKE_PRESS EQU     60
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 13
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00127         PAGE 
                      00128 
                      00129 
                      00130 
                      00131 ;==================================
                      00132 ;SOUND handles ALLOCATION for Series4 is (MAX 64 handles)
                      00133 ;SOUND handles ALLOCATION for Series6 is (MAX 180 handles) 
                      00134 ; handle 0=unused externally, is SILENCE internal value
                      00135 ;----------------------------------
                      00136 ;   SOUND WAVE FILE HANDLES
                      00137 ;----------------------------------
                      00138         cblock   0   ; Start assigning location of  Sound Clips 0, 1, 2, etc.
  00000000            00139 HNDL_SC0_MUTE                   ;HNDL 0 ALWAYS internal SILENCE value
                      00140 ;       Arrange so that the first 64 handles fit Series4 and the >64 handles fit
                      00141 ;       Series6 (i.e., optional and disused handles at the end)
                      00142 
  00000001            00143 HNDL_SC0_STARTUP
                      00144 
  00000002            00145 HNDL_SC0_INC_01
  00000003            00146 HNDL_SC0_INC_12
  00000004            00147 HNDL_SC0_INC_23
                      00148 
  00000005            00149 HNDL_SC0_RUN_IDLE
  00000006            00150 HNDL_SC0_RUN_1
  00000007            00151 HNDL_SC0_RUN_2
  00000008            00152 HNDL_SC0_RUN_3
                      00153 
  00000009            00154 HNDL_SC0_DEC_32
  0000000A            00155 HNDL_SC0_DEC_21
  0000000B            00156 HNDL_SC0_DEC_10
                      00157 
                      00158 
  0000000C            00159 HNDL_SC0_SHUTDOWN_BEGIN
  0000000D            00160 HNDL_SC0_SHUTDOWN_END
                      00161 
  0000000E            00162 HNDL_SC0_HORN0_START                    ;default Horn 00
  0000000F            00163 HNDL_SC0_HORN0_LOOP     
  00000010            00164 HNDL_SC0_HORN0_SUSTAIN
  00000011            00165 HNDL_SC0_HORN0_END
  00000012            00166 HNDL_SC0_HORN0_SHORT
                      00167 
  00000013            00168 HNDL_SC0_HORN1_START    ;1ST ALT Horn 01
  00000014            00169 HNDL_SC0_HORN1_LOOP                     
  00000015            00170 HNDL_SC0_HORN1_SUSTAIN
  00000016            00171 HNDL_SC0_HORN1_END
  00000017            00172 HNDL_SC0_HORN1_SHORT
                      00173 
                      00174 ;BELLS
                      00175 ;Chained or selected bells
  00000018            00176 HNDL_SC0_BELL1
  00000019            00177 HNDL_SC0_BELL2
                      00178 
  0000001A            00179 HNDL_SC0_ENGINE_BRAKE_BEGIN
  0000001B            00180 HNDL_SC0_ENGINE_BRAKE_LOOP1     ; hard braking plays combinations of loop2 and 1
  0000001C            00181 HNDL_SC0_ENGINE_BRAKE_LOOP2
  0000001D            00182 HNDL_SC0_ENGINE_BRAKE_END
                      00183 
  0000001E            00184 HNDL_SC0_ISOLATION_REVERSE_FWD
  0000001F            00185 HNDL_SC0_ISOLATION_REVERSE_REV
  00000020            00186 HNDL_SC0_ISOLATION_CENTER
                      00187 
  00000021            00188 HNDL_SC0_BRAKE_SET
  00000022            00189 HNDL_SC0_BRAKE_RELEASE
  00000023            00190 HNDL_SC0_BRAKE_BAIL_OFFOFF
  00000024            00191 HNDL_SC0_BRAKE_BAIL_OFFON
                      00192 
  00000025            00193 HNDL_SC0_HBRAKE_BEGIN
  00000026            00194 HNDL_SC0_HBRAKE_LOOP
  00000027            00195 HNDL_SC0_HBRAKE_RELEASE
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 14
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000028            00196 HNDL_SC0_HBRAKE_END
                      00197 
  00000029            00198 HNDL_SC0_DYN_BRAKE_START
  0000002A            00199 HNDL_SC0_DYN_BRAKE_SUSTAIN
  0000002B            00200 HNDL_SC0_DYN_BRAKE_END
                      00201 
  0000002C            00202 HNDL_SC0_AIRCOMP_START
                      00203 
  0000002D            00204 HNDL_SC0_AIRCOMP_RUN1
  0000002E            00205 HNDL_SC0_AIRCOMP_END
                      00206 
  0000002F            00207 HNDL_SC0_TRACTION_START
  00000030            00208 HNDL_SC0_TRACTION_RUN
  00000031            00209 HNDL_SC0_TRACTION_END
                      00210 
  00000032            00211 HNDL_SC0_AIR_LETOFF
  00000033            00212 HNDL_SC0_SILENCE        ;is used to fill sound during Estop...
                      00213 
                      00214 ;==================================================
                      00215 ; Shared Common Sound Files -- for multiple scheme projects
                      00216 ;==================================================
  00000034            00217 HNDL_SC0_FAN1_START
  00000035            00218 HNDL_SC0_FAN1_LOOP
  00000036            00219 HNDL_SC0_FAN1_END
                      00220 
  00000037            00221 HNDL_SC0_AIR_DRYER1
  00000038            00222 HNDL_SC0_AIR_DRYER2
  00000039            00223 HNDL_SC0_AIR_DRYER3
                      00224 
  0000003A            00225 HNDL_SC0_SANDER_START
  0000003B            00226 HNDL_SC0_SANDER_RUN
  0000003C            00227 HNDL_SC0_SANDER_END
                      00228 ;==================================================
  0000003D            00229 HNDL_SC0_COUPLER_LIFT_RING
  0000003E            00230 HNDL_SC0_COUPLER_CLASH
  0000003F            00231 HNDL_SC0_COUPLER_SLACK
  00000040            00232 HNDL_SC0_UNCOUPLE_BEGIN
  00000041            00233 HNDL_SC0_UNCOUPLE_DISCONNECT
                      00234 
  00000042            00235 HNDL_SC0_DEFECT_ALARM
  00000043            00236 HNDL_SC0_WARNING_ALARM
                      00237 
  00000044            00238 HNDL_SC0_ENGINE_DOOR_OPEN
  00000045            00239 HNDL_SC0_ENGINE_DOOR_CLOSE
  00000046            00240 HNDL_SC0_SHUTTERS
                      00241 
  00000047            00242 HNDL_SC0_CAB_DOOR_OPEN
  00000048            00243 HNDL_SC0_CAB_DOOR_CLOSE
                      00244 
  00000049            00245 HNDL_SC0_USER_SOUND1
  0000004A            00246 HNDL_SC0_USER_SOUND2
                      00247 
  0000004B            00248 HNDL_SC0_WHEEL_FLANGE1
  0000004C            00249 HNDL_SC0_WHEEL_FLANGE2
                      00250 ;==================================================
                      00251 ; OPTIONAL AUX Sounds
  0000004D            00252 HNDL_SC0_AUX_START
  0000004E            00253 HNDL_SC0_AUX_RUN
  0000004F            00254 HNDL_SC0_AUX_END
                      00255 
  00000050            00256 HNDL_SC0_ABOUT
                      00257 
  00000051            00258 HNDL_SC0_DEBUG1
                      00259 
                      00260 ;==================================================
                      00261 ; END OF Shared Common Sound Files -- for multiple scheme projects
                      00262 ; Series 6 has more than 64 sound file handles
                      00263 ; Older decoders/projects must not use handles above here!
                      00264 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 15
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00265 
                      00266 ;==================================================     
                      00267 
                      00268         ENDC    
                      00269 ;-----------------------------------------
                      00270 ;   SYSTEM VARIABLES
                      00271 ;-----------------------------------------
                      00272 ;these NEXT 32 EEPROM locs define CV_121_0->CV_128_3, with CV119 as PAGE#
                      00273 ;first entry maps to SND_PAGED_CVS [CV_121_0]           
                      00274 ;--------------------------------------------------------------
                      00275 ; Previously defined SCVs - listed here for reference convenience
                      00276 ;--------------------------------------------------------------
                      00277 ;       ==================================  
                      00278 ;(B) Sound FX defined CV's:     [decoder CV8=8  reset value in brackets]
                      00279 ;CV3 Momentum acceleration rate, 0-63, 63=max, (uses after braking to start) [50]
                      00280 ;CV4 Momentum deceleration rate, 0-63, 63=max, (uses for braking to stop) [40]
                      00281 ;CV7 Version ID 51=Older decoders, 16=Newer SFX2 decoders
                      00282 ;SCV_RESET (CV8)  Reset Decoder values to factory =129=Digitrax
                      00283 ;SCV_19  Advanced Consist [0]
                      00284 ;SCV_21  Advanced Consist SF0-SF8 [248] 
                      00285 ;SCV_22  Advanced Consist SF3-SF7 [52] 
                      00286 ;SCV_54 (CV54)   Road or Switching Mode [64,0,1]
                      00287 ;SCV_57  BEMF Consist + Advanced Consist, 0-15 / 0-15, 15=max (14,14; 15,15) [238]
                      00288 ;SCV_MASTER_VOL (CV58) Master Volume Setting
                      00289 ;       DEFAULT_GLBL_GAIN               Predefined as 0xC0
                      00290 ;CV60  Scheme select CV, 0=Diesel 1=Steam       [0]
                      00291 ;CV64  Logic select CV, 0=Logic 64=Normal       [64]
                      00292 ;SCV_USER_SDF_SUB_ID            ;CV105  [xx] Sub ID is SUB id or project version
                      00293 ;SCV_USER_SDF_FIX_ID            ;CV106  [xx] FIX ID is change id or project release
                      00294 ;CV121 Sound Project SDF Version 0,4,8,16       Read Only Value
                      00295 ;CV122 Product TYpe, 12 = Digitrax SFX sound decoder    Read Only Value
                      00296 ;CV123 Hardware Version, 64= SDXH166 type decoder       Read Only Value. May vary based on SFX2 decoder 
                      00297 ;                               ;CV126= DL config byte
                      00298 ;SNDCV_CONFIGA  ;CV129= config byte
                      00299 ;SNDCV_CONFIGB  ;CV130= config byte
                      00300 ;SCV_DCONFIG    ;CV131= diesel config
                      00301 ;CV132 Engine Notch rate                64-127  [96]
                      00302 ;SCV_NOTCH              ;CV132= typ DIESEL NOTCH rate byte [64,127]
                      00303 ;SNDCV_STEAM    ;CV133= typ steam CAM config byte, x80=EXT or 1-127=DRIVER dia in inches
                      00304                                 ;CV133, SNDCV_STEAM /DRIVER size bit7=1 means EXTERNAL INPUT_0 generates
                      00305 ;SCV_STGEAR             ;CV134= steam gear ratio trim
                      00306 ;SCV_MUTE_VOL   ;CV135= vol level when MUTE action is triggered, e.g. SF8=On[0,35]
                      00307                                 ;SCV_135 EQU SCV_MUTE_VOL; Global volume when muted. Default 0
                      00308 ;CV135 vol level when MUTE action is triggered, e.g. SF8=ON     [30]
                      00309 ;SCV_MAIN_PITCH ;CV136
                      00310 ;SCV_137                ;CV137
                      00311 ;SCV_138                ;SCV138= 
                      00312 ;SCV_DISTANCE_RATE      ;SCV139= mask for controlling DISTANCE rate event/trigger [31]
                      00313                                         ;SCV_139 EQU SCV_DISTANCE_RATE ; Time value till Gauge Trigger. 
                      00314 ;SCV_FREEFORM           ;SCV_140+, here the SCV's are SDF defined
                      00315 ;------------------------------------------
                      00316 ;   LOCATION FOR CV ADDRESSES  
                      00317 ; Start assigning (after std Digitrax) for CV140, CV141, etc.
                      00318 ;------------------------------------------
                      00319    cblock   SCV_FREEFORM   ; Start assigning (after std Digitrax) for CV140, CV141, etc.
  0000008B            00320 SCV_PRIME_VOLUME        ;CV140 PRIME mover / Chuff vol  0-64    [40]
  0000008C            00321 SCV_BELL_VOLUME                 ;CV141 BELL vol                                 0-64    [30]
  0000008D            00322 SCV_HORNWHISTLE_VOLUME  ;CV142 Horn / Whistle Volume    0-64    [60] 
  0000008E            00323 SCV_AIRFEAT_VOLUME      ;CV143 AIR feature volume, brake release        [42] Air sounds Volume 0-64
  0000008F            00324 SCV_BRAKE_VOLUME                ;CV144 ENGINE BRAKES - brake volume 0-64 [48]
  00000090            00325 SCV_MISC_VOLUME                 ;CV145 Miscellaneous sounds volume      0-64 [51]
  00000091            00326 SCV_BELL_RING_RATE      ;CV146 BELL delay (24mS counts)         1-100   [1]
  00000092            00327 notDRYER_RATE                   ;notCV147 Time between DRYER cycles     1-100   [27]
  00000093            00328 notAIRPUMP_START_RATE  ;;notCV148 Compressor/Airpump Start rate         [30]
  00000094            00329 notAIR_PRESSURE_LIMIT  ;notCV149 Compressor/Airpump run time            [88]
  00000095            00330 SCV_HORNWHISTLE_SELECT  ;CV150 default [00]     WHEN CV150 BIT7=1, enable volume modulation for playable
                      00331         ;SELECTED CV150:
                      00332                         ;                       Decimal HEX                     Bit
                      00333                         ;                                                               7654 3210
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 16
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00334                         ;       1               0               0x00            0000 0000
                      00335                         ;       2               1               0x01            0000 0001
                      00336                         ;       3               2               0x02            0000 0010
                      00337                         ;       4               3               0x03            0000 0011
                      00338                         ;       5               4               0x04            0000 0100
                      00339                         ;       6               5               0x05            0000 0101
                      00340                         ;       7               6               0x06            0000 0110
                      00341                         ;       8               7               0x07            0000 0111
                      00342                         ;       9               8               0x08            0000 1000
                      00343                         ;       PLAYABLE:
                      00344                         ;       1               128             0x80            1000 0000
                      00345                         ;       2               129             0x81            1000 0001
                      00346                         ;       3               130             0x82            1000 0010
                      00347                         ;       4               131             0x83            1000 0011
                      00348                         ;       5               132             0x84            1000 1000
                      00349                         ;       6               133             0x85            1000 0101
                      00350                         ;       7               134             0x86            1000 0110
                      00351                         ;       8               135             0x87            1000 0111
                      00352                         ;       9               136             0x88            1000 1000
                      00353                         ;                       Decimal HEX                     Bit
  00000096            00354 SCV_COUPLER_THRESHOLD   ;CV151 speed limit FOR AUTOMATIC COUPLER/BRAKE on DIR chng. about 1/2MPH per uni
  00000097            00355 SCV_USER_SDF_ID                 ;CV152 User ID defines USER code for this SDF [xx]
  00000098            00356 SCV_PROJECT_ID                  ;CV153 Identifies Project within author ID where nnn nnn is serial 1-254
  00000099            00357 SCV_BRAKE_RATE                  ;CV154 Delay brake apply 1-100  [14] 
  0000009A            00358 SCV_SPEED_MODE                  ;CV155 Notching mode 0=AUTO, 1=SEMIAUTO, 2=MANUAL NOTCHES [01]
  0000009B            00359 SCV_HORNWHISTLE_DELAY   ;CV156 Delay for HORN/WHISTLE start in 27mS VALUES      [0] 
  0000009C            00360 SCV_157_SEL_BELL        ;CV157 bell selection   [00] 
                      00361         ;BELL SELECTED CV157:
                      00362                         ;                       Decimal HEX                     Bit
                      00363                         ;                                                               7654 3210
                      00364                         ;       1               0               0x00            0000 0000
                      00365                         ;       2               1               0x01            0000 0001
                      00366                         ;       3               2               0x02            0000 0010
                      00367                         ;       4               3               0x03            0000 0011
                      00368                         ;       5               4               0x04            0000 0100
  0000009D            00369 SCV_SPARE158                    ;CV158 is DIGITRAX RESERVED
  0000009E            00370 SCV_LOAD_MIN                    ;CV159 Min value to tune minimum volume 5-8 [7]
  0000009F            00371 SCV_USER_SDF_SUB_ID             ;CV160 Sub ID is SUB id or project version (MAYBE NOT USED) (USE CV106 I
                      00372 ;       Extended Custom CV values: These are not easily modified by the user as yet (Use SoundLoader to 
  000000A0            00373 SCV_INIT_IDLE_TRIM              ;CV161 Initial Idle Trim                        4-64    [48]
  000000A1            00374 SCV_INJECTOR_VOLUME             ;CV162 Water Injector Volume            0-64    [25]
  000000A2            00375 UNUSED163               ;CV163 Safety Run Time                          0-64    [32]
  000000A3            00376 UNUSED164       ;CV164 Level in the guage/ Water Pump Cycle Time                                0-64    
  000000A4            00377 UNUSED165       ;CV165 add fuel to firebox at 150lbs/ Stoker/oil pump run time                          
  000000A5            00378 UNUSED166               ;CV166 Cutoff Speed for wheel slip chuffs               4-9     [9]
  000000A6            00379 SCV_CUTOFF_SPD_AUTO_OPNCYL      ;CV167 Cutoff Speed for Auto Cyl. blow down                     0-64    
  000000A7            00380 SCV_STOKER_VOLUME                       ;CV168 Stoker Volume                                            
  000000A8            00381 SCV_CUTOFF_SPEED_HIGH           ;CV169 Cutoff Speed for high speed chuffs               40-99   [48]    
  000000A9            00382 SCV_CUTOFF_SPEED_LOW            ;CV170 Cutoff Speed LOW skip brake sounds               4-19    [13]
  000000AA            00383 SCV_AUXGEN_VOLUME                       ;CV171 AUX GEN VOLUME                                           
  000000AB            00384 SCV_FAN_VOLUME                          ;CV172 FAN MOTOR VOLUME                                         
  000000AC            00385 SCV_SAFTEY_VOLUME                       ;CV173 STEAM blowdown volume                                    
  000000AD            00386 SCV_DRYER_VOLUME                        ;CV174 AIR feature volume, DRYER Air sounds Vol 0-64    [49] 
  000000AE            00387 SCV_COMPRESSOR_PUMP_VOLUME      ;CV175 Air compressor volume                                    0-64    
  000000AF            00388 SCV_TRACTION_MOTOR_VOLUME       ;CV176 TRACTION MOTOR VOLUME                            0-64    [60]    
  000000B0            00389 SCV_COUPLER_VOLUME                      ;CV177 Coupler / Slack Volume                                   
  000000B1            00390 SCV_BOILER_VOLUME                       ;CV178 Steam Boiler Volume                                      
  000000B2            00391 SCV_BRAKE_DYN_VOLUME            ;CV179 Dynamic brake /Dynamo volume                             0-64    
  000000B3            00392 SCV_BLOWDOWN_VOLUME             ;CV180 Steam Blowdown/Safety vol                                0-64    
  000000B4            00393 SCV_POWER_REVERSER_VOLUME       ;CV181 Power Reverser volume                                    0-64    
  000000B5            00394 SCV_LETOFF_VOLUME                       ;CV182 brake release Air sounds Volume          0-64 [32] 
  000000B6            00395 SCV_WATER_COAL_FILL_VOLUME      ;CV183 Water fill/Coal fill Volume                              0-64    
  000000B7            00396 SCV_STEAM_COCK_THRESH           ;CV184 Steam cock blow down threshold                   1-64    [24]
  000000B8            00397 SCV_FEATURE_DISABLE             ;CV185 BIT values to disable features1:
                      00398 ;               bit0 disable HEP diesel =0 AUX GEN                      =1
                      00399 ;               bit1 disable hard automatic braking             =2
                      00400 ;               bit2 disable startup sounds                                     =4
                      00401 ;               bit3 disable Fans                                                       =8
                      00402 ;               bit4 disable toots on direction change          =16
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 17
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00403 ;               bit5 disable grade crossing random play         =32
                      00404 ;               bit6 disable bell                                                       =64
                      00405 ;               bit7 fuel prime once for Gen1 diesels OR multiple start warning bells Gen2      =128
                      00406 ;               bit7 steam disable SF11 Open Cyl Cocks          =128    
  000000B9            00407 SCV_FEATURE2_DISABLE    ;CV186  0-254 [2]  BIT values to disable additional features2 
                      00408 ;               bit0 disable Diesel Low Idle=1 Enabled=0        =1
                      00409 ;               bit1 disable Chain bells 1-4                            =2
                      00410 ;               bit2 disable STOKER change to SHOVEL            =4
                      00411 ;               bit3 disable AUTO VARY NOTCH                            =8
                      00412 ;               bit4 disable Shaft Driven Compressor            =16
                      00413 ;               bit5 disable ALCO Idle Stumble=32 Disable=0     =32
                      00414 ;               bit6 disable Auto REAR WHISTLE signals: 0=Off, On=64    
                      00415 ;               bit7 disable Dual Prime Movers                  0 = Off =128 = Dual On
  000000BA            00416 SCV_FEATURE3_DISABLE    ;CV187  0-254 [2]  BIT values to disable additional features3 
                      00417 ;               bit0 disable Short Opt Horn/whistle      Enabled=0      =1
                      00418 ;               bit1 disable DEMO ALL HornS/whistles Enabled=on=0 =2=disabled
                      00419 ;               bit2 disable Bell on Idle Exit                          =4;
                      00420 ;               bit3 disable Motor Lock on BRAKE                                =8
                      00421 ;               bit4 disable Startup Muted                                      =16
                      00422 ;               bit5 disable Dynamic BRAKES                                     =32
                      00423 ;               bit6 disable                                                            =64
                      00424 ;               bit7 disable Auto Wheel Slip                            =128
  000000BB            00425 SCV_FEATURE4_DISABLE    ;CV188  0-254 [0]  BIT values to disable additional features4
                      00426 ;               bit0 disable Traction Motor             = 1 Disabled
                      00427 ;               bit1 disable HILO HORN                                          =2
                      00428 ;               bit2 disable 3                                                          =4;
                      00429 ;               bit3 disable 4                                                          =8
                      00430 ;               bit4 disable 5                                                          =16
                      00431 ;               bit5 disable 6                                                          =32
                      00432 ;               bit6 disable 7                                                          =64
                      00433 ;               bit7 disable 8                                                          =128
  000000BC            00434 SCV_ALARM_VOLUME                                ;CV189 Water Alarm Volume                       0-64    
  000000BD            00435 notSTART_SLIP_SPEED                     ;CV190 Minimum Speed Slip                       0-32    [5]
  000000BE            00436 notSTOKER_OIL_PUMP_RUN_TIME     ;CV191 Stoker/oil pump run time                         0-254   [20]    
  000000BF            00437 notDRIFT_VOLUME                         ;CV191 Drift Volume                                     0-64    
  000000C0            00438 SCV_CUTOFF_HORN_SPEED                   ;CV192 Cutoff Speed for LONG HORN       4-9     [9]
                      00439 ; extended definitions for indexing:
  000000C1            00440 SCV_SOUND_PROJ_TYPE ;CV193      Sound Project TYPE      0-255   [0]
                      00441 ;Possible Values are :
                      00442 ;       : Index  Decimal        HEX                     Bit
                      00443 ;       :                                                               7654 3210
                      00444 ;       :       1               0               0x00            0000 0000               Steam Coal
                      00445 ;       :       2               1               0x01            0000 0001               Steam Oil
                      00446 ;       :       3               2               0x02            0000 0010               Steam Coal  Arti
                      00447 ;       :       4               3               0x03            0000 0011               Steam Oil Articu
                      00448 ;       :       5               4               0x04            0000 0100               Steam Geared    
                      00449 ;       :       9               8               0x08            0000 1000               Steam non-fired 
                      00450 ;       :       81              80              0x50            0101 0000               Gas Carbody / Do
                      00451 ;       :       127             128             0x80            1000 0000               Diesel
                      00452 ;       :       145             144             0x90            1001 0000               Diesel Carbody  
                      00453 ;       :       193             192             0xC0            1100 0000               Diesel Dual Moto
                      00454 ;       :       225             224             0xE0            1110 0000               Diesel Dual Moto
                      00455 ;       :       241             240             0xF0            1111 0000               Diesel Boxcab
                      00456 ;       :       137             136             0x88            1000 1000               Traction
  000000C2            00457 SCV_SOUND_PROJ_MEMREQ ;CV194 Sound Project Memory Required [1=512kb, 2=1024kb, 3=8mb, 4=4mb, 8=8mb, 16=1
  000000C3            00458 SCV_SOUND_PROJ_JMRIDEF ;CV195 Sound Project JMRI Definition (0-255)
  000000C4            00459 SCV_196 ;RESERVED 
  000000C5            00460 SCV_197 ;RESERVED 
  000000C6            00461 SCV_198 ;RESERVED 
  000000C7            00462 SCV_199 ;RESERVED 
  000000C8            00463 SCV_200 ;RESERVED 
  000000C9            00464 SCV_201 ;RESERVED (121)
  000000CA            00465 SCV_202 ;NON_SOUND_JMRIDEF ; JMRI Definition (0-255) 
  000000CB            00466 SCV_203 ;Decoder Memory Available (read only) [1=512kb, 2=1024kb, 3=8mb, 4=4mb, 8=8mb, 16=16mb].
  000000CC            00467 SCV_TEST ;CV204 TEST (99) 
                      00468 
                      00469         ENDC
                      00470  
                      00471 ;----------------------------------------
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 18
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00472 ;PREDEFINED lo CV's with .7=1
  00000000            00473 SCV_CV1         equ     (1-1)
  00000002            00474 SCV_CV3         equ     (3-1)
  00000003            00475 SCV_CV4         equ     (4-1)
  00000007            00476 SCV_CV8         equ     (8-1)
                      00477 
  00000012            00478 SCV_CV19        equ     (19-1)
  00000014            00479 SCV_CV21        equ     (21-1)
  00000015            00480 SCV_CV22        equ     (22-1)
  00000016            00481 SCV_CV23        equ     (23-1)
  00000017            00482 SCV_CV24        equ     (24-1)
  0000001C            00483 SCV_CV29        equ     (29-1)
  00000030            00484 SCV_CV49        equ     (49-1)
  00000035            00485 SCV_CV54        equ     (54-1)
  00000039            00486 SCV_CV58        equ     (58-1)
  0000003B            00487 SCV_CV60        equ     (60-1)
  0000003F            00488 SCV_CV64        equ     (64-1)
                      00489 ;test values
  00000068            00490 SCV_CV105       equ     (105-1)
  00000069            00491 SCV_CV106       equ     (106-1)
  00000078            00492 SCV_CV121       equ     (121-1)
  00000079            00493 SCV_CV122       equ     (122-1)
  0000007A            00494 SCV_CV123       equ     (123-1)
  00000098            00495 SCV_CV153       equ     (153-1)
  0000009F            00496 SCV_CV160       equ     (160-1)
                      00497 
                      00498 ;SCHEME intents
  00000000            00499 SCHEME_TYPE_DIESEL      EQU     0       ;       
                      00500 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 19
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00501         PAGE
                      00502         
                      00503 ;-----------------------------------------
                      00504 ;   SYSTEM VARIABLES
                      00505 ;-----------------------------------------
  00000019            00506 AuthorCode   EQU   0x19   ; AUTHOR code John McMasters (ID CV=25)
                      00507 ;------------------------------------------------------------------
                      00508 ;   LOCAL VARIABLES (Work Registers and Work_User Memory Registers)                                     
                      00509 ;------------------------------------------------------------------
                      00510 ;WORK_SPEED               EQU   0x00
                      00511 ;WORK_NOTCH               EQU   0x01
                      00512 ;WORK_SERVO               EQU   0x02
                      00513 ;WORK_MVOLTS      EQU   0x03
                      00514 ;WORK_USER_LINES  EQU   0x05
                      00515 ;WORK_TIMEBASE    EQU   0x06
                      00516 ;WORK_STATUS_BITS EQU   0x07
                      00517 ;WORK_GLBL_GAIN   EQU   0x08
                      00518 ;WORK_GAIN_TRIM   EQU   0x09
                      00519 ;WORK_PITCH_TRIM  EQU   0x0A
                      00520 ;WORK_SPEED_DELTA EQU   0x0B
                      00521 ;WORK_SCATTER4    EQU   0x10
                      00522 ;WORK_SCATTER5    EQU   0x11
                      00523 ;WORK_SCATTER6    EQU   0x12
                      00524 ;WORK_SCATTER7    EQU   0x13
                      00525 ;WORK_ACHNL_7F    EQU   0x14
                      00526 ;WORK_ACHNL_7E    EQU   0x15
                      00527 ;WORK_SKAT_FAST   EQU   0x16
                      00528 ;WORK_SKAT_SLOW   EQU   0x17
                      00529 ;WORK_DISTANCE    EQU   0x18
                      00530 ;WORK_PEAK_SPD    EQU   0x19
                      00531 ;----------------------------------------
                      00532 ;   LOCAL VARIABLES (Work_User Memory Registers)                                       
                      00533 ;----------------------------------------
  0000001A            00534 COUNT_LOOP              EQU WORK_USER_0 ; used to count n times
  0000001B            00535 PREV_NOTCH              EQU WORK_USER_1 ; used to remember previous Notch       0x00 - 0x70 [run notches
                      00536 
  0000001C            00537 VARY_LOAD               EQU WORK_USER_2 ; used to vary scale from outside motor sound loop      ;range 1
  0000001D            00538 AIR_PRESS               EQU WORK_USER_3 ; used to save current air or brake pressure
                      00539                                                                 ;from 90 PSI = Pounds per Square Inch to
                      00540 ;                                                               ; used to branch to gain set with consta
  0000001E            00541 USER_INTLK_BITS EQU WORK_USER_4 ; used for simple On/Off State Machines 
                      00542         ;================== TABLE OF COMP BITS INVOLVED ==============
                      00543         ;=== COMP_bit7 =VARY_DRIFT_MASK7=               EQU     0x80    ;MASK just do bit7      Vary aut
                      00544         ;=== COMP_bit6 =STATIC_MAINT_MASK6=     EQU     0x40    ;MASK just do bit6      STATIC MAINTENAN
                      00545         ;=== COMP_bit5 =COUPLER_MASK5=                  EQU     0x20    ;MASK just do bit5      AUTO COU
                      00546         ;=== COMP_bit4 =CYLCOCK_MASK4=                  EQU     0x10    ;MASK just do bit4      OPEN CYL
                      00547         ;=== COMP_bit3 =DYN_CTRL_MASK3=                 EQU     0x08    ;MASK just do bit3      NOT_USED
                      00548         ;=== COMP_bit2 =AUTO_BRAKE_MASK2=               EQU     0x04    ;MASK just do bit2      AUTOMATI
                      00549         ;=== COMP_bit1 =START_MASK1=                    EQU     0x02    ;MASK just do bit1      STARTUP 
                      00550         ;=== COMP_bit0 =COMP_MASK0=                             EQU     0x01    ;MASK just do bit0      
                      00551         ;example MASK_COMPARE   USER_INTLK_BITS,IMMED_DATA,CYLCOCK_MASK4,~CYLCOCK_MASK4,SKIP_SAME       
                      00552         ;example LOAD_MODIFIER  MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,CYLCOCK_MASK4,MERGE_ALL_MASK  
                      00553         ;example LOAD_MODIFIER  MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~CYLCOCK_MASK4,MERGE_ALL_MASK
                      00554         ;OR=SETtheBit 
                      00555         ;AND=FLIPtheBit
                      00556         ;example interlock is set on bit is =1) (i.e. DRIFTING IS OFF)
                      00557         ;example LOAD_MODIFIER  MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,VARY_DRIFT_MASK7,MERGE_ALL_MAS
                      00558         ;example unset drift interlock: (DRIFTING IS ON)
                      00559         ;example LOAD_MODIFIER  MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~VARY_DRIFT_MASK7,MERGE_ALL_M
                      00560         
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 20
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00561         PAGE
                      00562         
                      00563         
                      00564 ;================================================
                      00565 ;Start Scheme 0 DIESEL CV60
                      00566 ;================================================
000000                00567         ORG     0
                      00568 ;PRIORITIZED initiate LIST and SOUND tasks
                      00569 ;DIESEL RUN scheme 0
                      00570         SKEME_START     SCHEME_TYPE_DIESEL
  00000000                M SKEME_BASE      SET     $                               ;for offset calc
000000 00F1 C60B          M                 DB      CMD_SKEME_START,(SCHEME_TYPE_DIESEL &0x1F), high((SKEME_NEXT0-$)+2), low((SKEME_
                      00571         SDL_VERSION VERSION_2
000004 2082               M                 DB      CMD_MARK_VERSION,VERSION_2
                      00572 ;------------------------------------------------
                      00573 ;Start Channel 1        
                      00574 ;------------------------------------------------
000006                00575 CH1SC0_BEGIN
                      00576         CHANNEL_START   1               ;typically PRIME mover channel
000006 0181               M                 DB      CMD_START_CHNL,1
                          M ;CTEMP += 1
                      00577 ;UC1.0================
                      00578 ; ====================================================================
                      00579 ;       1) StartSound routines use default global gain set to 
                      00580 ;               zero and only reset on SF8, SF0, SF1, SF26, or SF29
                      00581 ;       UNLESS:
                      00582 ;CV187 bit values to disable additional features3       
                      00583 ;               bit4 disable Startup Muted                                      =16
                      00584 ; ====================================================================
                      00585         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      00586         ;     INITIALIZE SETTINGS       
                      00587         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      00588         ; ---------------------------------------------------------
                      00589 ;UC1.1================
                      00590 ;--------------------------------
                      00591 ;THIS SEQUENCE starts the diesel when POR and ADDRESSED (OR DC power ON)
                      00592 ;     INITIALIZE SETTINGS AND PLAY "STARTUP"                              
                      00593 ; ---------------------------------------------------------
                      00594 ;UC1.3================
                      00595         INITIATE_SOUND  TRIG_SND_ACTV11,NORMAL+NO_PREEMPT_TRIG  ;run ONCE no BRK before CV11 begins IDLE
000008 0F94               M                 DB      CMD_INITIATE_SND + ((NORMAL+NO_PREEMPT_TRIG) & 0x07), TRIG_SND_ACTV11 +((NORMAL+
  00000001                M ICNT += 1
                          M 
                      00596         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+PREV_NOTCH,0,0    ;Set value initial
00000A 1BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+PREV_NOTCH,0,0
                      00597         
00000E                00598 CH1SC0_RESELECT
                      00599         ;bit4 disable CV187 bit4 =0 startup, operator must toggle SF8 to begin...
                      00600         MASK_COMPARE    SCV_FEATURE3_DISABLE,IMMED_DATA,0x00,COMP_bit4,SKIP_SAME                ;SKIP_LE
00000E BAFC EF00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE3_DISABLE,0x00,COMP_bit4
                      00601                 GENERATE_TRIGGER  TRIG_SMUTE_ON                 ;be sure MUTE releases
000012 13B1               M                 DB      CMD_BLIP_TRIGGER, TRIG_SMUTE_ON 
                      00602         
                      00603         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING                                  ;test MUTE/Moving
000014 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      00604                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000016 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00605         
                      00606         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_LIGHTS_ON                       
000018 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00607                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND  
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 21
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00001A 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00608                 
                      00609         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_LESS ;when moving
00001C 00FE 0001          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      00610                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000020 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00611                 
000022                00612 CH1SC0_START_MUTE
                      00613         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK  ; full MUTE
000022 08E6 0001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK
                      00614         ;16) 1/31/17 Interlock: STATUS: 
                      00615         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+USER_INTLK_BITS,0,0         ;CLEAR ALL 8 BITS ;Disab
000026 1EE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+USER_INTLK_BITS,0,0
                      00616 
                      00617         ;=============== LOOP STARTS HERE::::::::
00002A                00618 CH1SC0_START1
                      00619         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,CYLCOCK_MASK4,MERGE_ALL_MASK  ;OR=SETt
00002A 5EE6 0010          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,CYLCOCK_MASK4,M
                      00620         ;buffer MUTE action
                      00621         PLAY     HNDL_SC0_MUTE,no_loop,loop_STD          
                          M         list ;2 byte PLAY  [HANDLE]
00002E 0040               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_MUTE & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      00622 
                      00623         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING                                  ;test MUTE/Moving
000030 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      00624                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000032 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00625 
                      00626         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_LIGHTS_ON                                               ;test MU
000034 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00627                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000036 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00628 
                      00629         ;MAY STILL BE MUTE HERE
                      00630         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_ELIGHTS_ON      ; But skip if SF5 is OFF
000038 1004               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_ELIGHTS_ON 
                      00631                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00003A 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00632                 
                      00633         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_SMUTE_ON                                                ;test MU
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 22
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00003C 1304               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_SMUTE_ON 
                      00634                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00003E 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00635                 
                      00636         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_ESTOP_ON        
000040 1604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_ESTOP_ON 
                      00637             BRANCH_TO   CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000042 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00638 
                      00639         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_LIGHTS_ON                                               ;test MU
000044 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00640                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000046 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00641         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_BELLS_ON                                                ;test MU
000048 0804               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_BELLS_ON 
                      00642                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00004A 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00643         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_HORNS_ON                                                ;test MU
00004C 0904               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_HORNS_ON 
                      00644                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00004E 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00645         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_COUPLE_ON                                               ;test MU
000050 0A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_COUPLE_ON 
                      00646                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000052 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00647         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_DYNBRK_ON                                               ;test MU
000054 0B04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_DYNBRK_ON 
                      00648                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000056 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 23
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M                 
                      00649         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_DITCHL_ON                                               ;test MU
000058 1104               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_DITCHL_ON 
                      00650                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00005A 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00651 
                      00652         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_LESS ;when moving
00005C 00FE 0001          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      00653                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000060 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00654 
                      00655         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING                                  ;test MUTE/Moving
000062 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      00656                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000064 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00657         
                      00658         ;=================LOOP HERE==================================
                      00659         ;else no sounds
                      00660         BRANCH_TO       CH1SC0_START1   ;KEEP LOOPING TILL A F-KEY IS PRESSED
                          M         
                          M         if      (CH1SC0_START1-SKEME_BASE) > 0xFFF                  ;check branch size in SCHEME
                          M                 error   CH1SC0_START1 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000066 2AC0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_START1-SKEME_BASE)) & 0x0F) , low (CH1SC0_START1-S
                          M         endif
                          M                 
                      00661         ;=================LOOP HERE==================================
                      00662         
000068                00663 CH1SC0_RESTART_UNMUTE                                                           ;SF8 OFF-UNMUTE!
                      00664         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK        ;load WO
000068 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      00665         ;COULD STILL BE MUTE HERE (SEE ABOVE)
                      00666         LOAD_MODIFIER   MTYPE_BLEND,BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0,0,0      ;blend immed
00006C 00E3 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0,0,
                      00667         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+WORK_PEAK_SPD,00,0  ;clear WORK_PEAK_SPD    
000070 19E6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_PEAK_SPD,00,0
                      00668                 
                      00669         MASK_COMPARE WORK_STATUS_BITS,IMMED_DATA,0x0,0xFE,SKIP_SAME     ;0      254
000074 07FC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,0x0,0xFE
                      00670         BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000078 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00671          
                      00672         MASK_COMPARE    WORK_SPEED,IMMED_DATA,1,COMP_ALL,SKIP_LESS ;when moving
00007A 00FE 0001          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_SPEED,1,COMP_ALL
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 24
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00673             BRANCH_TO   CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00007E 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00674                 
000080                00675 CH1SC0_STARTER2
                      00676         ;=========================
                      00677         ;test PRIMARY decoder STATUS:   
                      00678         ;================== TABLE OF COMP BITS INVOLVED ==============
                      00679         ;=== COMP_bit7 =MATH=           EQU     0x7F                    ;MASK just do bit7
                      00680         ;=== COMP_bit6 =IDLELOCK=       EQU     0xBF                    ;MASK just do bit6
                      00681         ;=== COMP_bit5 =INTERLOCK=      EQU     0xDF                    ;MASK just do bit5
                      00682         ;=== COMP_bit4 =SPDDELTA=       EQU     0xEF                    ;MASK just do bit4
                      00683         ;=== COMP_bit3 =ACEL=           EQU     0xF7                    ;MASK just do bit3
                      00684         ;=== COMP_bit2 =RUN=            EQU     0xFB                    ;MASK just do bit2
                      00685         ;=== COMP_bit1 =DIRNOW=         EQU     0xFD                    ;MASK just do bit1
                      00686         ;=== COMP_bit0 =ANALOG=         EQU     0xFE                    ;MASK just do bit0
                      00687 ;-
                      00688         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,0x00,~WKSB_ANALOG_MASK,SKIP_SAME ;see if ANALOG=0/DC
000080 07FC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,0x00,~WKSB_ANALOG_MASK
000084                00689 CH1SC0_DC_START
                      00690                 BRANCH_TO       CH1SC0_SERVO_ENABLE     ;ANALOG status bit=1, is DC -> NO START sequence
                          M         
                          M         if      (CH1SC0_SERVO_ENABLE-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH1SC0_SERVO_ENABLE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000084 10C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SERVO_ENABLE-SKEME_BASE)) & 0x0F) , low (CH1SC0_SE
                          M         endif
                          M                 
                      00691 ;--     otherwise
                      00692          SKIP_ON_TRIGGER        TRIG_FALSE,TRIG_LIGHTS_ON                                               
000086 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00693                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000088 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00694                 
00008A                00695 CH1SC0_DCC_START
                      00696 ;       skip start sounds when moving or headlight is already on -- to prevent issues when electrical co
                      00697         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B   ;use VOL control
00008A 80E1 0B8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
                      00698         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK  ;STD full volu
00008E 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      00699 
                      00700         ; Check STARTUP SOUNDS INTERLOCK if Disabled
                      00701         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,START_MASK1,~START_MASK1,SKIP_SAME   ;TEST BIT1 FOR T
000092 1EFC FD02          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,START_MASK1,~START_MASK1
                      00702                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000096 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00703                 
                      00704         MASK_COMPARE    0x7,IMMED_DATA,0x0,0xFE,SKIP_SAME               ;test bit 1 WKSB_ANALOG_BIT  of 
000098 07FC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,0x7,0x0,0xFE
                      00705                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 25
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00009C 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00706                         
                      00707         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_LIGHTS_ON       ; But skip if SF0 was previously on
00009E 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00708                 BRANCH_TO  CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000A0 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00709 
                      00710         ;       WKSB_RUN_BIT    EQU     2               ;0= stop motor PWM, non-primemover sounds RUN
                      00711 ;******************************************************** UNLESS SF0 IS ON THE MOTOR WILL NOT RUN UNTIL 
                      00712         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MASK,MERGE_ALL_MASK       
0000A2 27E6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MAS
                      00713         
                      00714         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING  
0000A6 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      00715                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND  
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000A8 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00716                 
                      00717         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR           ; Check if stopped
0000AA 00FF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      00718                 BRANCH_TO       CH1SC0_NOT_MOVING_YET
                          M         
                          M         if      (CH1SC0_NOT_MOVING_YET-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_NOT_MOVING_YET range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000AE B2C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NOT_MOVING_YET-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00719         BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000B0 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00720         
0000B2                00721 CH1SC0_NOT_MOVING_YET
                      00722 ;--
                      00723 ;======================================================
0000B2                00724 CH1SC0_STARTSOUND
                      00725         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B   ;use VOL control
0000B2 80E1 0B8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
                      00726 
                      00727         ;       WKSB_RUN_BIT    EQU     2               ;0= stop motor PWM, non-primemover sounds RUN
                      00728         ;       bit2 disable startup sounds
                      00729         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x01,COMP_bit2,SKIP_SAME         ;SKIP_LESSSKIP_G
0000B6 B8FC FB01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x01,COMP_bit2
                      00730                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND                  ;Skipped when ARG1 = ARG2       
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000BA 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 26
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M                 
                      00731         
                      00732         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_LIGHTS_ON       ; But skip if SF0 was previously on
0000BC 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00733                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000BE 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00734                 
                      00735         MASK_COMPARE WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR ;when moving
0000C0 00FF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      00736                 BRANCH_TO       CH1SC0_START_ALARM
                          M         
                          M         if      (CH1SC0_START_ALARM-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH1SC0_START_ALARM range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000C4 C8C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_START_ALARM-SKEME_BASE)) & 0x0F) , low (CH1SC0_STA
                          M         endif
                          M                 
                      00737         BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000C6 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00738         
                      00739         ;;;;;;;;;;;;;;;;; BEGIN STARTUP SOUNDS :::::::::::::::::::      
0000C8                00740 CH1SC0_START_ALARM      
                      00741         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
0000C8 80E1 0B8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
                      00742 
                      00743         ;cold start
                      00744         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~START_MASK1,MERGE_ALL_MASK  ;AND=FLI
0000CC 3EE6 00FD          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~START_MASK1,M
                      00745 
                      00746         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_DITCHL_ON                                               ;test MU
0000D0 1104               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_DITCHL_ON 
                      00747                 BRANCH_TO       CH1SC0_COLD_START
                          M         
                          M         if      (CH1SC0_COLD_START-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_COLD_START range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000D2 D8C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_COLD_START-SKEME_BASE)) & 0x0F) , low (CH1SC0_COLD
                          M         endif
                          M                 
                      00748 
                      00749         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
0000D4 80E1 0B8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
                      00750         ;see if INTERLOCK ON    
                      00751         ;       PLAY HNDL_SC0_ABOUT,no_loop,loop_STD    ;DEBUG2
                      00752         ; Check STARTUP SOUNDS INTERLOCK if Disabled
                      00753 
0000D8                00754 CH1SC0_COLD_START
                      00755         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   ; when moving there must have been a short out
0000D8 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      00756                 PLAY    HNDL_SC0_STARTUP,no_loop,loop_STD       
                          M         list ;2 byte PLAY  [HANDLE]
0000DA 0140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_STARTUP & 0x3F)+((no_loop<<6)&0xC0
                          M         list
                      00757 
0000DC                00758 CH1SC0_FINISH_START
                      00759 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 27
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00760         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B   
0000DC 80E1 0B8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
                      00761 
                      00762         ; Check STARTUP SOUNDS INTERLOCK if Disabled
                      00763         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,START_MASK1,~START_MASK1,SKIP_SAME   ;TEST BIT1 FOR T
0000E0 1EFC FD02          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,START_MASK1,~START_MASK1
                      00764                 BRANCH_TO       CH1SC0_FINISH3
                          M         
                          M         if      (CH1SC0_FINISH3-SKEME_BASE) > 0xFFF                 ;check branch size in SCHEME
                          M                 error   CH1SC0_FINISH3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000E4 E8C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_FINISH3-SKEME_BASE)) & 0x0F) , low (CH1SC0_FINISH3
                          M         endif
                          M                 
                      00765         BRANCH_TO       CH1SC0_SKIP_STARTSOUND           ;interlock is 00, SKIP 
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000E6 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00766         
0000E8                00767 CH1SC0_FINISH3
                      00768         ;Disable Start Sounds Play AGAIN
                      00769         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,START_MASK1,MERGE_ALL_MASK    ;OR=SETt
0000E8 5EE6 0002          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,START_MASK1,MER
                      00770         ;Allow Compressor Run
                      00771         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COMP_MASK0,MERGE_ALL_MASK     ;OR=SETt
0000EC 5EE6 0001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COMP_MASK0,MERG
                      00772         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_LIGHTS_ON       ; But skip if SF0 was previously on
0000F0 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00773                 BRANCH_TO       CH1SC0_SKIP_STARTSOUND
                          M         
                          M         if      (CH1SC0_SKIP_STARTSOUND-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_STARTSOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0000F2 08C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_STARTSOUND-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      00774         
                      00775         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_SMUTE_ON ; But skip if SF8 was previously MUTED
0000F4 1305               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_SMUTE_ON 
                      00776                 ;MAX GAIN:      
                      00777                 LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK  ;STD f
0000F6 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      00778 
                      00779         ;============== low idle is bit0 value 0
                      00780         ;                               regular idle is bit0 value 1
                      00781         ;==============
                      00782 
                      00783         PLAY    HNDL_SC0_RUN_IDLE,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0000FA 0540               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_RUN_IDLE & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      00784         ;Allow Compressor Run
                      00785         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COMP_MASK0,MERGE_ALL_MASK     ;OR=SETt
0000FC 5EE6 0001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COMP_MASK0,MERG
                      00786 
000100                00787 CH1SC0_PLAY_LOWIDLE
                      00788         ;PLAY HNDL_SC0_DEBUG1,no_loop,loop_STD  
                      00789 
                      00790         ;fix trans low to run1 1/25/18
                      00791         MASK_COMPARE    WORK_PEAK_SPD,IMMED_DATA,0x00,COMP_ALL,SKIP_SAME        ;if PK_SPD=0, no MOVEMEN
000100 19FC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_PEAK_SPD,0x00,COMP_ALL
                      00792                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+PREV_NOTCH,0,0    ;Set value initial
000104 1BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+PREV_NOTCH,0,0
                      00793 
                      00794 ;***************
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 28
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000108                00795 CH1SC0_SKIP_STARTSOUND
                      00796 ;***************
                      00797         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,STATIC_MAINT_MASK6,MERGE_ALL_MASK     
000108 5EE6 0040          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,STATIC_MAINT_MA
                      00798         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+PREV_NOTCH,0,0    ;Set value initial
00010C 1BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+PREV_NOTCH,0,0
                      00799 
                      00800 ;---
000110                00801 CH1SC0_SERVO_ENABLE
                      00802         ;Notch1=0 is initial default...
                      00803         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0     ;initial value is 0
000110 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0
                      00804         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+PREV_NOTCH,NOTCH1,0   ;initial value is 0
000114 1BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+PREV_NOTCH,NOTCH1,0
                      00805         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_PEAK_SPD,0x00,0  ;initial value is 0
000118 19E6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_PEAK_SPD,0x00,0
                      00806 
                      00807         ;this allows the MOTOR to run once PRIME mover is STARTED and audible, [unless defeated by user 
                      00808         ;Allow Compressor Run
                      00809         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COMP_MASK0,MERGE_ALL_MASK     ;OR=SETt
00011C 5EE6 0001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COMP_MASK0,MERG
                      00810         GENERATE_TRIGGER  TRIG_FANS_ON  
000120 1AB1               M                 DB      CMD_BLIP_TRIGGER, TRIG_FANS_ON 
                      00811 
                      00812         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,START_MASK1,MERGE_ALL_MASK    ;OR=SETt
000122 5EE6 0002          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,START_MASK1,MER
                      00813         ;set PRIMARY decoder STATUS:
                      00814         ;================== TABLE OF COMP BITS INVOLVED ==============
                      00815         ;=== COMP_bit7 =MATH=           EQU     0x7F                    ;MASK just do bit7
                      00816         ;=== COMP_bit6 =IDLELOCK=       EQU     0xBF                    ;MASK just do bit6
                      00817         ;=== COMP_bit5 =INTERLOCK=      EQU     0xDF                    ;MASK just do bit5
                      00818         ;=== COMP_bit4 =SPDDELTA=       EQU     0xEF                    ;MASK just do bit4
                      00819         ;=== COMP_bit3 =ACEL=           EQU     0xF7                    ;MASK just do bit3
                      00820         ;=== COMP_bit2 =RUN=            EQU     0xFB                    ;MASK just do bit2
                      00821         ;=== COMP_bit1 =DIRNOW=         EQU     0xFD                    ;MASK just do bit1
                      00822         ;=== COMP_bit0 =ANALOG=         EQU     0xFE                    ;MASK just do bit0      
                      00823         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+WORK_STATUS_BITS,WKSB_RUN_MASK,MERGE_ALL_MASK ;set the
000126 47E6 0004          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+WORK_STATUS_BITS,WKSB_RUN_MASK,
                      00824         
00012A                00825 CH1SC0_CH2_3_ENABLE     ;CH 2 and 3 ENABLE HERE:
                      00826         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,MERGE_ALL_MASK   
00012A 47E6 0020          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+WORK_STATUS_BITS,WKSB_INTERLOCK
                      00827 
00012E                00828 CH1SC0_NOTCH_MODE_CHECK
                      00829         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+WORK_STATUS_BITS,~WKSB_SPDDELTA_MASK,MERGE_ALL_MASK  
00012E 27E6 00EF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+WORK_STATUS_BITS,~WKSB_SPDDELT
                      00830 
                      00831         MASK_COMPARE    SCV_SPEED_MODE,IMMED_DATA,CV155_MANUAL,COMP_ALL,SKIP_SAME       ;CV155, 0=AUTO, 
000132 9AFC 0002          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_SPEED_MODE,CV155_MANUAL,COMP_ALL
                      00832                 BRANCH_TO       CH1SC0_BEGIN_IDLE                       ;NOT manual mode!       ;Skipped
                          M         
                          M         if      (CH1SC0_BEGIN_IDLE-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_BEGIN_IDLE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000136 3CC1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_BEGIN_IDLE-SKEME_BASE)) & 0x0F) , low (CH1SC0_BEGI
                          M         endif
                          M                 
                      00833                 
                      00834 ;CV155 is MANUAL mode
000138                00835 CH1SC0_MANUAL_NOTCHES
                      00836         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+WORK_STATUS_BITS,WKSB_SPDDELTA_MASK,MERGE_ALL_MASK    
000138 47E6 0010          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+WORK_STATUS_BITS,WKSB_SPDDELTA_
                      00837 
                      00838 ;---
00013C                00839 CH1SC0_BEGIN_IDLE       
                      00840         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,0,0        ;clr SPD DELTA HISTORY
00013C 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,0,0
                      00841         END_SOUND
000140 0000               M                 DB      CMD_END_SND,0
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 29
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00842  
                      00843 ;================================================================
                      00844 ;UC1.7================
                      00845 
                      00846         
                      00847 ; ============================ SF8 RELOCATED HERE ==================================
                      00848         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      00849         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      00850         ;       SF8 Off, set REG volume - TURN ALL SOUNDS ON 
                      00851         ; ---------------------------------------------------------
                      00852 ;UC1.1================
                      00853         INITIATE_SOUND  TRIG_SMUTE_ON,NOT_TRIG
000142 9390               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_SMUTE_ON +((NOT_TRIG) & 0x80)
  00000002                M ICNT += 1
                          M 
                      00854         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_BELLS_ON        
000144 0804               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_BELLS_ON 
                      00855                 BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000146 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00856         END_SOUND       
000148 0000               M                 DB      CMD_END_SND,0
                      00857                 
                      00858         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      00859         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      00860         ;       SF8 OFF, set mute/cv volume - MUTE ALL SOUNDS
                      00861         ;       ROUTINE WAS CHANNEL1 IN ver4.  
                      00862         ; --------------------------------------------------
                      00863 ;UC1.2================
                      00864         INITIATE_SOUND  TRIG_SMUTE_ON,NORMAL
00014A 1390               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_SMUTE_ON +((NORMAL) & 0x80)
  00000003                M ICNT += 1
                          M 
                      00865         ;USE SF8 TO PLAY STARTUP SOUNDS WHEN SERVO MOTOR IS DISABLED:
00014C                00866 CH1SC0_MUTE
                      00867         ;CHECK TO ESTOP AND WITH BRAKES
                      00868         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_IBRAKES_ON               
00014C 1905               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_IBRAKES_ON 
                      00869                 BRANCH_TO       CH1SC0_MUTE_ON0
                          M         
                          M         if      (CH1SC0_MUTE_ON0-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_MUTE_ON0 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00014E 52C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_MUTE_ON0-SKEME_BASE)) & 0x0F) , low (CH1SC0_MUTE_O
                          M         endif
                          M                 
                      00870         BRANCH_TO       CH1SC0_ESTOP
                          M         
                          M         if      (CH1SC0_ESTOP-SKEME_BASE) > 0xFFF                   ;check branch size in SCHEME
                          M                 error   CH1SC0_ESTOP range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000150 D0C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ESTOP-SKEME_BASE)) & 0x0F) , low (CH1SC0_ESTOP-SKE
                          M         endif
                          M                 
                      00871 ;-
000152                00872 CH1SC0_MUTE_ON0 ;1st time =192, 2nd time=91, 3rd time=32, 4th time=0
                      00873         ;Disable Compressor Run
                      00874         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,MERGE_ALL_MASK   ;AND=FLI
000152 3EE6 00FE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,ME
                      00875         
                      00876         MASK_COMPARE    WORK_GLBL_GAIN,IMMED_DATA,0x01,COMP_ALL,SKIP_SAME       ;When SF8 is toggled twi
000156 08FC 0001          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_GLBL_GAIN,0x01,COMP_ALL
                      00877                 BRANCH_TO       CH1SC0_MUTE_ON1 ;>0
                          M         
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 30
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         if      (CH1SC0_MUTE_ON1-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_MUTE_ON1 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00015A 5EC1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_MUTE_ON1-SKEME_BASE)) & 0x0F) , low (CH1SC0_MUTE_O
                          M         endif
                          M                 
                      00878         BRANCH_TO       CH1SC0_MUTE_ON5 ;=0
                          M         
                          M         if      (CH1SC0_MUTE_ON5-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_MUTE_ON5 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00015C 7CC1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_MUTE_ON5-SKEME_BASE)) & 0x0F) , low (CH1SC0_MUTE_O
                          M         endif
                          M                 
                      00879         
00015E                00880 CH1SC0_MUTE_ON1 ;>0
                      00881         MASK_COMPARE    WORK_GLBL_GAIN,TARGET_DATA,SCV_MUTE_VOL,COMP_ALL,SKIP_GRTR      ;
00015E 08FB 0086          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+TARGET_DATA,WORK_GLBL_GAIN,SCV_MUTE_VOL,COMP_ALL
                      00882                 BRANCH_TO       CH1SC0_MUTE_ON4 ;<32 >=1
                          M         
                          M         if      (CH1SC0_MUTE_ON4-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_MUTE_ON4 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000162 76C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_MUTE_ON4-SKEME_BASE)) & 0x0F) , low (CH1SC0_MUTE_O
                          M         endif
                          M                 
                      00883         MASK_COMPARE    WORK_GLBL_GAIN,IMMED_DATA,0x60,COMP_ALL,SKIP_LESS
000164 08FE 0060          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_GLBL_GAIN,0x60,COMP_ALL
                      00884                 BRANCH_TO       CH1SC0_MUTE_ON3 
                          M         
                          M         if      (CH1SC0_MUTE_ON3-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_MUTE_ON3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000168 70C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_MUTE_ON3-SKEME_BASE)) & 0x0F) , low (CH1SC0_MUTE_O
                          M         endif
                          M                 
                      00885          
00016A                00886 CH1SC0_MUTE_ON2 ;<SCV_MUTE_VOL
                      00887         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,0x60,MERGE_ALL_MASK  ;half MUTE
00016A 08E6 0060          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,0x60,MERGE_ALL_MASK
                      00888         END_SOUND
00016E 0000               M                 DB      CMD_END_SND,0
                      00889         
000170                00890 CH1SC0_MUTE_ON3 ;<SCV_MUTE_VOL
                      00891         LOAD_MODIFIER   MTYPE_WORK_INDIRECT,WORK_GLBL_GAIN,SCV_MUTE_VOL,MERGE_ALL_MASK   ;MUTE volume fr
000170 08E7 0086          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_INDIRECT&0x0F),WORK_GLBL_GAIN,SCV_MUTE_VOL,MERGE_ALL
                      00892         END_SOUND
000174 0000               M                 DB      CMD_END_SND,0
                      00893         
000176                00894 CH1SC0_MUTE_ON4 ;>= SCV_MUTE_VOL
                      00895         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK  ; full MUTE
000176 08E6 0001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK
                      00896         END_SOUND
00017A 0000               M                 DB      CMD_END_SND,0
                      00897         
00017C                00898 CH1SC0_MUTE_ON5 
                      00899         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK  ;STD full volu
00017C 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      00900         END_SOUND
000180 0000               M                 DB      CMD_END_SND,0
                      00901         
                      00902         
                      00903         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      00904         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      00905         ;       have OPSWR,be sure NOTCH mode is evaluated without RESTART
                      00906         ;----------------------------------------------------
                      00907 ;UC1.4================
                      00908         INITIATE_SOUND  TRIG_OPSPROGWR_CV,NORMAL
000182 5B90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_OPSPROGWR_CV +((NORMAL) & 0x80)
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 31
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004                M ICNT += 1
                          M 
                      00909         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK        ;load WO
000184 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      00910         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C
000188 80E1 0C90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C
                      00911         ;error got reset here:
                      00912         PLAY    HNDL_SC0_ABOUT,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
00018C 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_ABOUT & 0xC0)+1     ;ADD REV PLAY FLAG PLUS OTHER BI
00018E 1000               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ABOUT & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      00913         BRANCH_TO       CH1SC0_NOTCH_MODE_CHECK
                          M         
                          M         if      (CH1SC0_NOTCH_MODE_CHECK-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH1SC0_NOTCH_MODE_CHECK range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000190 2EC1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NOTCH_MODE_CHECK-SKEME_BASE)) & 0x0F) , low (CH1SC
                          M         endif
                          M                 
                      00914         END_SOUND       
000192 0000               M                 DB      CMD_END_SND,0
                      00915 
                      00916         
                      00917         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      00918         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      00919         ;       DIESEL shutdown when not addressed any more after CV11 timeout
                      00920         ;----------------------------------------------------
                      00921 ;UC1.5================
                      00922         INITIATE_SOUND  TRIG_SND_ACTV11,NOT_TRIG        
000194 8F90               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_SND_ACTV11 +((NOT_TRIG) & 0x80)
  00000005                M ICNT += 1
                          M 
000196                00923 CH1SC0_ENDR1
                      00924         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCV_LOAD_MIN,COMP_ALL,SKIP_GRTR            ;prevent underfl
000196 1CFF 009E          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,VARY_LOAD,SCV_LOAD_MIN,COMP_ALL
                      00925                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,SCALE_MAX        
00019A BCE6 0FFF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,
                      00926 
                      00927         PLAY    HNDL_SC0_RUN_1,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
00019E 0640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_RUN_1 & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      00928         ;Disable Compressor Run
                      00929         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,MERGE_ALL_MASK   ;AND=FLI
0001A0 3EE6 00FE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,ME
                      00930         
                      00931         PLAY    HNDL_SC0_SHUTDOWN_BEGIN,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0001A4 0C40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SHUTDOWN_BEGIN & 0x3F)+((no_loop<<
                          M         list
                      00932 
                      00933         PLAY    HNDL_SC0_SHUTDOWN_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0001A6 0D40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SHUTDOWN_END & 0x3F)+((no_loop<<6)
                          M         list
                      00934         
0001A8                00935 CH1SC0_SERVO_DISABLE
                      00936         ;Disable Compressor Run
                      00937         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,MERGE_ALL_MASK   ;AND=FLI
0001A8 3EE6 00FE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,ME
                      00938         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MASK,MERGE_ALL_MASK       
0001AC 27E6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MAS
                      00939 
                      00940 ;---
0001B0                00941 CH1SC0_MUTE_ACTV11
                      00942         BRANCH_TO       CH1SC0_MUTE_ON0                 ;zero VOLUME after TURNOFF
                          M         
                          M         if      (CH1SC0_MUTE_ON0-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 32
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 error   CH1SC0_MUTE_ON0 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0001B0 52C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_MUTE_ON0-SKEME_BASE)) & 0x0F) , low (CH1SC0_MUTE_O
                          M         endif
                          M                 
                      00943         END_SOUND       
0001B2 0000               M                 DB      CMD_END_SND,0
                      00944         
                      00945         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      00946         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      00947         ; EStop Shutdown        (disables motor movement until OFF) when SF15 is on:
                      00948         ;----------------------------------------------------
                      00949         INITIATE_SOUND  TRIG_ESTOP_ON,NOT_TRIG  ;i.e. TOGGLED OFF
0001B4 9690               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_ESTOP_ON +((NOT_TRIG) & 0x80)
  00000006                M ICNT += 1
                          M 
0001B6                00950 CH1SC0_RESTART
                      00951         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK  ;STD full volu
0001B6 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      00952         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
0001BA 80E1 0B8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
                      00953         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_LIGHTS_ON       ; But skip if SF0 was previously off
0001BE 0C04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_LIGHTS_ON 
                      00954                 BRANCH_TO       CH1SC0_SKIP_RESTART
                          M         
                          M         if      (CH1SC0_SKIP_RESTART-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH1SC0_SKIP_RESTART range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0001C0 C6C1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SKIP_RESTART-SKEME_BASE)) & 0x0F) , low (CH1SC0_SK
                          M         endif
                          M                 
                      00955 
                      00956         ;       WKSB_RUN_BIT    EQU     2               ;0= stop motor PWM, non-primemover sounds RUN
                      00957 ;****** UNLESS SOME F-KEY IS ON THE SERVO MOTOR WILL NOT RUN UNTIL AFTER ALL THE STARTUP SOUNDS ********
                      00958         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+WORK_STATUS_BITS,WKSB_RUN_MASK,MERGE_ALL_MASK        
0001C2 27E6 0004          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+WORK_STATUS_BITS,WKSB_RUN_MASK
                      00959         
                      00960         ; Check STARTUP SOUNDS INTERLOCK if Disabled
                      00961         ;MASK_COMPARE   USER_INTLK_BITS,IMMED_DATA,START_MASK1,~START_MASK1,SKIP_SAME   ;TEST BIT1 FOR T
                      00962         ;       BRANCH_TO       CH1SC0_RESTART3
                      00963         ;BRANCH_TO      CH1SC0_SKIP_RESTART
                      00964         
0001C6                00965 CH1SC0_SKIP_RESTART     
                      00966         ;v5.02 fix restart interlock 7/20/17
                      00967         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,START_MASK1,MERGE_ALL_MASK    ;OR=SETt
0001C6 5EE6 0002          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,START_MASK1,MER
                      00968         ;YES BIG JUMP HERE:
                      00969         BRANCH_TO       CH1SC0_RESTART_UNMUTE
                          M         
                          M         if      (CH1SC0_RESTART_UNMUTE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_RESTART_UNMUTE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0001CA 68C0               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RESTART_UNMUTE-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      00970         END_SOUND
0001CC 0000               M                 DB      CMD_END_SND,0
                      00971         
                      00972         
                      00973         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      00974         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      00975         ; EStop Shutdown        (disables motor movement until OFF) when SF15 is on:
                      00976         ;----------------------------------------------------
                      00977         INITIATE_SOUND  TRIG_ESTOP_ON,NORMAL
0001CE 1690               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_ESTOP_ON +((NORMAL) & 0x80)
  00000007                M ICNT += 1
                          M 
0001D0                00978 CH1SC0_ESTOP
                      00979 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 33
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00980         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,0x00,0       ; set Manual Notch value
0001D0 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,0x00,0
                      00981         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_MID,COMP_ALL,SKIP_GRTR       ;SKIP_was >30
0001D4 1CFF 000C          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,VARY_LOAD,SCALE_MID,COMP_ALL
                      00982                 BRANCH_TO       CH1SC0_ESTOP2
                          M         
                          M         if      (CH1SC0_ESTOP2-SKEME_BASE) > 0xFFF                  ;check branch size in SCHEME
                          M                 error   CH1SC0_ESTOP2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0001D8 DEC1               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ESTOP2-SKEME_BASE)) & 0x0F) , low (CH1SC0_ESTOP2-S
                          M         endif
                          M                 
                      00983         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,SCV_LOAD_MIN    ;decremen
0001DA BCE6 9EFF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,
0001DE                00984 CH1SC0_ESTOP2
                      00985         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCV_LOAD_MIN,COMP_ALL,SKIP_GRTR            ;prevent underfl
0001DE 1CFF 009E          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,VARY_LOAD,SCV_LOAD_MIN,COMP_ALL
                      00986                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,SCALE_MAX        
0001E2 BCE6 0FFF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,
                      00987 
                      00988         ;decrement SCALE        
                      00989         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_MID 
0001E6 80E1 0C8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_MID
                      00990         ;MASK_COMPARE   WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR           ; Check if stopped
                      00991         ;       BRANCH_TO       CH1SC0_ESTOP3
                      00992         ;BRANCH_TO      CH1SC0_ESTOPPED
0001EA                00993 CH1SC0_ESTOP3
0001EA                00994 CH1SC0_ESTOPPED
                      00995         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+WORK_STATUS_BITS,~WKSB_INTERLOCK_MASK,MERGE_ALL_MASK  
0001EA 47E6 00DF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+WORK_STATUS_BITS,~WKSB_INTERLOC
                      00996         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~START_MASK1,MERGE_ALL_MASK  ;AND=FLI
0001EE 3EE6 00FD          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~START_MASK1,M
                      00997         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,MERGE_ALL_MASK  ;OR=SETt
0001F2 5EE6 0020          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,M
                      00998 
                      00999 
                      01000         ;SERVO_DISABLE
                      01001         ;******************************************************** UNLESS SF0 IS ON THE MOTOR WILL NOT RU
                      01002         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MASK,MERGE_ALL_MASK       
0001F6 27E6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MAS
                      01003         ;Disable Compressor Run 
                      01004         GENERATE_TRIGGER  TRIG_COMPR_ON         ;       
0001FA 1FB1               M                 DB      CMD_BLIP_TRIGGER, TRIG_COMPR_ON 
                      01005         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,MERGE_ALL_MASK   ;AND=FLI
0001FC 3EE6 00FE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~COMP_MASK0,ME
                      01006         PLAY    HNDL_SC0_SHUTDOWN_BEGIN,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000200 0C40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SHUTDOWN_BEGIN & 0x3F)+((no_loop<<
                          M         list
                      01007         PLAY    HNDL_SC0_SHUTDOWN_END,no_loop,loop_STD  
                          M         list ;2 byte PLAY  [HANDLE]
000202 0D40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SHUTDOWN_END & 0x3F)+((no_loop<<6)
                          M         list
                      01008         
                      01009         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
000204 80E1 0B8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
                      01010         PLAY    HNDL_SC0_BRAKE_SET,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
000208 2140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_SET & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01011         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x13,0   ;decrease
00020A BDE6 00ED          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x13,0
                      01012 
                      01013         ;LONG LOOP HERE FILLS SOUNDS SO THAT UNIT APPEARS TO BE SHUTDOWN:
                      01014         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_ESTOP_ON                ; But skip if F14 was previously off
00020E 1604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_ESTOP_ON 
                      01015                 LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK  ; full MUTE
000210 08E6 0001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK
                      01016         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_ESTOP_ON                ; But skip if F14 was previously off
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 34
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000214 1604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_ESTOP_ON 
                      01017                 PLAY    HNDL_SC0_SILENCE,loop_till_ESTOP_OFF,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000216 B34D               M         DB      CMD_PLAY_SND+((loop_till_ESTOP_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_SILENCE & 0x3F)+((lo
                          M         list
                      01018         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK        ;load WO
000218 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      01019         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
00021C 80E1 0B8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
                      01020         
                      01021         ;PLAY   HNDL_SC0_BRAKE_RELEASE,no_loop,loop_STD
                      01022         ;play isolation/reverser:
                      01023         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SCALE_A
000220 80E1 0AB4          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SC
                      01024         PLAY    HNDL_SC0_ISOLATION_CENTER,no_loop,loop_STD              
                          M         list ;2 byte PLAY  [HANDLE]
000224 2040               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ISOLATION_CENTER & 0x3F)+((no_loop
                          M         list
                      01025 ;-
000226                01026 CH1SC0_ESTOPPED_QUIET   ;loops here until SF15 OFF OR BRAKE IS RELEASED
                      01027         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK  ; full MUTE
000226 08E6 0001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,0x01,MERGE_ALL_MASK
                      01028         PLAY    HNDL_SC0_SILENCE,loop_till_IBRAKES_OFF,loop_INVERT              
                          M         list ;2 byte PLAY  [HANDLE]
00022A 734E               M         DB      CMD_PLAY_SND+((loop_till_IBRAKES_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_SILENCE & 0x3F)+((
                          M         list
                      01029         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_ESTOP_ON                ; But skip if SF15 was previously off
00022C 1604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_ESTOP_ON 
                      01030                 BRANCH_TO       CH1SC0_ESTOPPED_QUIET   
                          M         
                          M         if      (CH1SC0_ESTOPPED_QUIET-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH1SC0_ESTOPPED_QUIET range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00022E 26C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ESTOPPED_QUIET-SKEME_BASE)) & 0x0F) , low (CH1SC0_
                          M         endif
                          M                 
                      01031         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK        ;load WO
000230 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      01032                 
                      01033         END_SOUND
000234 0000               M                 DB      CMD_END_SND,0
                      01034         
                      01035 
                      01036 ;================================================= major routine ===========================            
                      01037 ;----------------------------------------------------
                      01038 ; Increase to run
                      01039 ; ---------------------------------------------------------
                      01040         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      01041         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      01042         ;       this is MODIFIED by DISCRETE notch change logic to vary AMPL with NOTCH setting, RPMs al
                      01043         ;---------------------------------------------------- 
                      01044         ; ---------------------------------------------------------
                      01045         ;     Play increase from stopped idle -- no load    
                      01046         ; pick up notch at prev and increase to new current:                        
                      01047         ; ---------------------------------------------------------
                      01048         INITIATE_SOUND T_SPD_IDLEXIT,NORMAL+NO_PREEMPT_TRIG     ;RUN_WHILE_TRIG+ZAP     ;leaving IDLE st
000236 7694               M                 DB      CMD_INITIATE_SND + ((NORMAL+NO_PREEMPT_TRIG) & 0x07), T_SPD_IDLEXIT +((NORMAL+NO
  00000008                M ICNT += 1
                          M 
                      01049         ;finish play here due to interrupted idle event: 8/1/19
                      01050 
                      01051         ;CHECK HEP HERE:
                      01052         ;aux or hep is running:
                      01053         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_AXGEN_ON; But branch if SF30/25 was previously on
000238 2404               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_AXGEN_ON 
                      01054                 BRANCH_TO       CH1SC0_CONTINUOUS_NOTCH 
                          M         
                          M         if      (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH1SC0_CONTINUOUS_NOTCH range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 35
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
00023A 60C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE)) & 0x0F) , low (CH1SC
                          M         endif
                          M                 
                      01055         
                      01056         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_RUN8_ON; But branch if SF28 was previously on
00023C 2704               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_RUN8_ON 
                      01057                 BRANCH_TO       CH1SC0_CONTINUOUS_NOTCH         ;END_SOUND      
                          M         
                          M         if      (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH1SC0_CONTINUOUS_NOTCH range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00023E 60C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE)) & 0x0F) , low (CH1SC
                          M         endif
                          M                 
                      01058         
                      01059         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_MID
000240 80E1 0C8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_MID
                      01060         PLAY HNDL_SC0_INC_01,no_loop,loop_STD   ; 
                          M         list ;2 byte PLAY  [HANDLE]
000244 0240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_INC_01 & 0x3F)+((no_loop<<6)&0xC0)
                          M         list
                      01061 
                      01062         ;begin to play acceleration...
                      01063         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,MERGE_ALL_MASK  ;OR=SETt
000246 5EE6 0020          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,M
                      01064         ;NOTE: CANNOT PLAY NON PRIME MOVER SOUNDS IN THIS EVENT --
                      01065         ;               IT INTERRUPTS IDLE SOUNDS...
                      01066                 ;BRANCH_TO      CH1SC0_IDLE_EXIT_IDLERUN
                      01067         ;Notch1=0 is initial default...
                      01068         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,WORK_NOTCH    
00024A 0BE6 0100          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,WORK_
                      01069         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+PREV_NOTCH,NOTCH1,WORK_NOTCH  
00024E 1BE6 0100          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+PREV_NOTCH,NOTCH1,WORK_NOTCH
                      01070         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_PEAK_SPD,0x00,0  
000252 19E6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_PEAK_SPD,0x00,0
                      01071 
                      01072         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_2,SCALE_MAX   ;increment SC
000256 BCE6 0F02          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_2,
                      01073 
00025A                01074 CH1SC0_IDLE_EXIT_IDLERUN
                      01075 
                      01076 ;---
                      01077 ;Fall thru to complete transition
                      01078 
00025A                01079 CH1SC0_ACCEL_IDLERUN2
                      01080 ;======================================================================
                      01081 ;       Evaluate WORK_NOTCH  
                      01082 ;===================================================================================
                      01083 ;       WORK_NOTCH is computed by the decoder and is continuously changed.
                      01084 ;       The rate of change is managed by the SCV_NOTCH   (CV132) Controller Notch Rate where the 
                      01085 ;       default value CV132=127 is mid range. Lower values are a slower rate -- higher is faster.  
                      01086 ;       This project uses increments by NOTCH_UP_VAL of decimal 16 [0x10] for each notch.
                      01087 ;       WORK_NOTCH will vary by more than one increment depending on rate of speed change and notch rate
                      01088 ;       The variable input to the computation is WORK_SPEED which is an internal value from decimal 0-99
                      01089 ;       99 divided by 16 gives the 7 integers for notches 1-8.
                      01090 ;       However the WORK_NOTCH register is incremented by 16's and has the range:
                      01091 ;       NOTCH   Decimal HEX                     Bit                     Throttle 
                      01092 ;                                                               7654 3210       Speed (typical)
                      01093 ;       0               0               (low idle option is at rest, not moving... )
                      01094 ;       1               0               0x00            0000 0000               0
                      01095 ;       2               16              0x10            0001 0000               12
                      01096 ;       3               32              0x20            0010 0000               24
                      01097 ;       4               48              0x30            0011 0000               36
                      01098 ;       5               64              0x40            0100 0000               48
                      01099 ;       6               80              0x50            0101 0000               60
                      01100 ;       7               96              0x60            0110 0000               72
                      01101 ;       8               112             0x70            0111 0000               84
                      01102 ;       9               128             0x80            1000 0000               96
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 36
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01103 ;       10              144             0x90            1001 0000
                      01104 ;       11              160             0xA0            1010 0000
                      01105 ;       12              176             0xB0            1011 0000
                      01106 ;       13              192             0xC0            1100 0000
                      01107 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      01108 
00025A                01109 CH1SC0_STARTMOVE_END_ACCL
                      01110         ;======================== current notch is passed to continuous running
                      01111         ;                                                       via PREV_NOTCH. Any additional accelerat
                      01112         ;                                                       or deceleration is processed there.
                      01113         ;========================
                      01114         ;v6.1 DO fall thru to run continuous 
                      01115         BRANCH_TO       CH1SC0_CONTINUOUS_NOTCH 
                          M         
                          M         if      (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH1SC0_CONTINUOUS_NOTCH range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00025A 60C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE)) & 0x0F) , low (CH1SC
                          M         endif
                          M                 
                      01116         END_SOUND
00025C 0000               M                 DB      CMD_END_SND,0
                      01117 
                      01118         
                      01119         ; ------------------------------------------------
                      01120         ;  CONTINUOUS NOTCH SOUNDS WITH INTER-NOTCH SOUNDS
                      01121         ; ------------------------------------------------
                      01122 ;-------------------------------
                      01123 ;DIESEL RUN phase
                      01124         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      01125         ;       THIS ROUTINE IS CH1_ primary PERSISTENT (NOT INTERRUPTABLE)
                      01126         ;       this is MODIFIED by DISCRETE notch change logic to vary AMPL with NOTCH setting, RPMs al
                      01127         ;----------------------------------------------------
                      01128 ;UC1.6.2================
                      01129         INITIATE_SOUND  TRIG_MOVING,RUN_WHILE_TRIG      ;+ZAP   ;T_SPD_RUN
00025E 0E92               M                 DB      CMD_INITIATE_SND + ((RUN_WHILE_TRIG) & 0x07), TRIG_MOVING +((RUN_WHILE_TRIG) & 0
  00000009                M ICNT += 1
                          M 
                      01130         ;+++++++++++++++++++++++++++++++++++++++++++++++++
000260                01131 CH1SC0_CONTINUOUS_NOTCH
                      01132         ;SKIP_ON_TRIGGER        TRIG_FALSE,TRIG_FAND_ON         ; But skip if SF33 was previously on
                      01133         ;       BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS  
                      01134 ;---    
                      01135         ;Increase LOAD
                      01136         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_TBRAKE_ON               ; But skip if SF26 was previously oFF
000260 2B04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_TBRAKE_ON 
                      01137                 BRANCH_TO       CH1SC0_LOAD_RUN_IS_ACCEL
                          M         
                          M         if      (CH1SC0_LOAD_RUN_IS_ACCEL-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH1SC0_LOAD_RUN_IS_ACCEL range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000262 7AC2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_LOAD_RUN_IS_ACCEL-SKEME_BASE)) & 0x0F) , low (CH1S
                          M         endif
                          M                 
                      01138                 
                      01139         ;Decrease LOAD
                      01140         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_NOTCHDN_ON              ; But skip if SF27 was previously oFF
000264 2604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_NOTCHDN_ON 
                      01141                 BRANCH_TO       CH1SC0_LOAD_RUN_IS_DECEL
                          M         
                          M         if      (CH1SC0_LOAD_RUN_IS_DECEL-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH1SC0_LOAD_RUN_IS_DECEL range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000266 92C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_LOAD_RUN_IS_DECEL-SKEME_BASE)) & 0x0F) , low (CH1S
                          M         endif
                          M                 
                      01142                 
                      01143         LOAD_MODIFIER   MTYPE_BLEND,BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0,BLENDG_DSL_ACCEL1,BLENDF_
000268 00E3 0506          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0,BL
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 37
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01144         LOAD_MODIFIER MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0,IMAXP_DIESEL,DITHERP_DIESEL   ;for discrete no
00026C A0E2 005E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0,IMAXP_DIESEL,DITHERP_
                      01145         ;since prev = 10=NOTCH2 and work = 0 or 10 do next transition...
                      01146 
000270                01147 CH1SC0_TEST_LOAD_RUN
                      01148         SKIP_ON_TRIGGER TRIG_TRUE,T_SPD_DECEL1          ;check if DECEL
000270 7805               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), T_SPD_DECEL1 
                      01149                 BRANCH_TO       CH1SC0_LOAD_RUN_TEST_ACCEL
                          M         
                          M         if      (CH1SC0_LOAD_RUN_TEST_ACCEL-SKEME_BASE) > 0xFFF     ;check branch size in SCHEME
                          M                 error   CH1SC0_LOAD_RUN_TEST_ACCEL range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000272 76C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_LOAD_RUN_TEST_ACCEL-SKEME_BASE)) & 0x0F) , low (CH
                          M         endif
                          M                 
                      01150         BRANCH_TO       CH1SC0_LOAD_RUN_IS_DECEL
                          M         
                          M         if      (CH1SC0_LOAD_RUN_IS_DECEL-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH1SC0_LOAD_RUN_IS_DECEL range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000274 92C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_LOAD_RUN_IS_DECEL-SKEME_BASE)) & 0x0F) , low (CH1S
                          M         endif
                          M                 
                      01151 ;---
000276                01152 CH1SC0_LOAD_RUN_TEST_ACCEL
                      01153         ;should continue to run up to NOTCH3...
                      01154 
                      01155         SKIP_ON_TRIGGER TRIG_TRUE,T_SPD_ACCEL1          ;check if ACCEL
000276 7305               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), T_SPD_ACCEL1 
                      01156                 BRANCH_TO       CH1SC0_LOAD_RUN_CADENCE
                          M         
                          M         if      (CH1SC0_LOAD_RUN_CADENCE-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH1SC0_LOAD_RUN_CADENCE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000278 B2C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_LOAD_RUN_CADENCE-SKEME_BASE)) & 0x0F) , low (CH1SC
                          M         endif
                          M                 
                      01157                 
                      01158         ;ACCCEL1 STAYS ON UNTIL THROTTLE IS DECREASED...
00027A                01159 CH1SC0_LOAD_RUN_IS_ACCEL
                      01160         LOAD_MODIFIER  MTYPE_BLEND,BLEND_CURRENT_CHNL,BLENDG_DSL_ACCEL0,BLENDF_DSL_ACCEL0
00027A 00E3 0204          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL,BLENDG_DSL_ACCEL0,BLENDF_D
                      01161         LOAD_MODIFIER  MTYPE_PITCH,ANALOG_PITCH_MODIFY,MAXP_DIESEL,0x0  
00027E A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY,MAXP_DIESEL,0x0
                      01162         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_6,SCALE_MAX   ;Increment
000282 BCE6 0F06          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_6,
                      01163         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_NOTCHDN_ON              ; But skip if SF27 was previously oFF
000286 2604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_NOTCHDN_ON 
                      01164                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_4,SCALE_MAX   ;Incr
000288 BCE6 0F04          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_4,
                      01165                 
                      01166         ;set drift interlock:
                      01167         ;(drift is interlocked when not decelerating. when accelerating heavy sounds play.
                      01168         ;interlock is set on bit is =1)(i.e. DRIFTING IS OFF)
                      01169         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,VARY_DRIFT_MASK7,MERGE_ALL_MASK       
00028C 5EE6 0080          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,VARY_DRIFT_MASK
                      01170 
                      01171         BRANCH_TO       CH1SC0_LOAD_RUN_CADENCE
                          M         
                          M         if      (CH1SC0_LOAD_RUN_CADENCE-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH1SC0_LOAD_RUN_CADENCE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000290 B2C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_LOAD_RUN_CADENCE-SKEME_BASE)) & 0x0F) , low (CH1SC
                          M         endif
                          M                 
                      01172 
000292                01173 CH1SC0_LOAD_RUN_IS_DECEL
                      01174         LOAD_MODIFIER  MTYPE_BLEND,BLEND_CURRENT_CHNL,BLENDG_DSL_DECEL0,BLENDF_DSL_DECEL0
000292 00E3 0709          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL,BLENDG_DSL_DECEL0,BLENDF_D
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 38
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01175         LOAD_MODIFIER  MTYPE_PITCH,ANALOG_PITCH_MODIFY,MAXP_DIESEL,0x0
000296 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY,MAXP_DIESEL,0x0
                      01176         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCV_LOAD_MIN,COMP_ALL,SKIP_GRTR            ;Prevent underfl
00029A 1CFF 009E          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,VARY_LOAD,SCV_LOAD_MIN,COMP_ALL
                      01177                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_2,SCALE_MAX        
00029E BCE6 0FFE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_2,
                      01178         ;decrement delta after throttle change:.............
                      01179         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   ;decreme
0002A2 ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      01180         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;prevent
0002A6 0BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      01181                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   
0002AA ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      01182 
                      01183         ;unset drift interlock: (DRIFTING IS ON)
                      01184         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~VARY_DRIFT_MASK7,MERGE_ALL_MASK     
Warning[202]: Argument out of range.  Least significant bits used.
0002AE 3EE6 007F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~VARY_DRIFT_MA
                      01185 
                      01186 ;-----
0002B2                01187 CH1SC0_LOAD_RUN_CADENCE
                      01188         ;(drift is interlocked when not decelerating. when accelerating heavy sounds play.
                      01189         ;interlock is set on bit is =1)(i.e. DRIFTING IS OFF)
                      01190         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,VARY_DRIFT_MASK7,~VARY_DRIFT_MASK7,SKIP_SAME ;bit7   
Warning[202]: Argument out of range.  Least significant bits used.
0002B2 1EFC 7F80          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,VARY_DRIFT_MASK7,~VARY_DRI
                      01191                 BRANCH_TO       CH1SC0_SET_LIGHT_DRIFT
                          M         
                          M         if      (CH1SC0_SET_LIGHT_DRIFT-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_SET_LIGHT_DRIFT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002B6 EEC2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SET_LIGHT_DRIFT-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01192         
                      01193 ;;;;;;;;;;;VARY_LOAD            EQU WORK_USER_2 ; used to vary scale from outside motor sound loop      
                      01194                         ;                                                               ; used to branch
                      01195         ;tune VARY_LOAD with SCV_LOAD_MIN:
                      01196 ;;;;;;;;;;;;;;; coding extra GOTOs in branch table::::::::::::::::::
                      01197         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_F,COMP_ALL,SKIP_SAME
0002B8 1CFC 000F          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,VARY_LOAD,SCALE_F,COMP_ALL
                      01198                 BRANCH_TO       CH1SC0_EXAUST_15
                          M         
                          M         if      (CH1SC0_EXAUST_15-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH1SC0_EXAUST_15 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002BC C4C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_EXAUST_15-SKEME_BASE)) & 0x0F) , low (CH1SC0_EXAUS
                          M         endif
                          M                 
                      01199         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_F
0002BE 80E1 0F8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_F
                      01200         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002C2 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01201                 
0002C4                01202 CH1SC0_EXAUST_15        
                      01203         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_E,COMP_ALL,SKIP_SAME
0002C4 1CFC 000E          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,VARY_LOAD,SCALE_E,COMP_ALL
                      01204                 BRANCH_TO       CH1SC0_EXAUST_14
                          M         
                          M         if      (CH1SC0_EXAUST_14-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH1SC0_EXAUST_14 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002C8 D0C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_EXAUST_14-SKEME_BASE)) & 0x0F) , low (CH1SC0_EXAUS
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 39
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M                 
                      01205         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_E
0002CA 80E1 0E8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_E
                      01206         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002CE 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01207                 
0002D0                01208 CH1SC0_EXAUST_14
                      01209         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_D,COMP_ALL,SKIP_SAME
0002D0 1CFC 000D          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,VARY_LOAD,SCALE_D,COMP_ALL
                      01210                 BRANCH_TO       CH1SC0_EXAUST_13
                          M         
                          M         if      (CH1SC0_EXAUST_13-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH1SC0_EXAUST_13 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002D4 DCC2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_EXAUST_13-SKEME_BASE)) & 0x0F) , low (CH1SC0_EXAUS
                          M         endif
                          M                 
                      01211         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_D
0002D6 80E1 0D8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_D
                      01212         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002DA 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01213                 
0002DC                01214 CH1SC0_EXAUST_13
                      01215         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_C,COMP_ALL,SKIP_SAME
0002DC 1CFC 000C          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,VARY_LOAD,SCALE_C,COMP_ALL
                      01216                 BRANCH_TO       CH1SC0_EXAUST_12
                          M         
                          M         if      (CH1SC0_EXAUST_12-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH1SC0_EXAUST_12 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002E0 E8C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_EXAUST_12-SKEME_BASE)) & 0x0F) , low (CH1SC0_EXAUS
                          M         endif
                          M                 
                      01217         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_C
0002E2 80E1 0C8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_C
                      01218         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002E6 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01219                 
0002E8                01220 CH1SC0_EXAUST_12
                      01221         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
0002E8 80E1 0B8B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_B
                      01222         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002EC 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01223                 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 40
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002EE                01224 CH1SC0_SET_LIGHT_DRIFT  
                      01225         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_F,COMP_ALL,SKIP_SAME
0002EE 1CFC 000F          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,VARY_LOAD,SCALE_F,COMP_ALL
                      01226                 BRANCH_TO       CH1SC0_DRIFT_15
                          M         
                          M         if      (CH1SC0_DRIFT_15-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_DRIFT_15 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002F2 FAC2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DRIFT_15-SKEME_BASE)) & 0x0F) , low (CH1SC0_DRIFT_
                          M         endif
                          M                 
                      01227         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_F
0002F4 80E1 0F37          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_F
                      01228         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002F8 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01229         
0002FA                01230 CH1SC0_DRIFT_15
                      01231         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_E,COMP_ALL,SKIP_SAME
0002FA 1CFC 000E          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,VARY_LOAD,SCALE_E,COMP_ALL
                      01232                 BRANCH_TO       CH1SC0_DRIFT_14
                          M         
                          M         if      (CH1SC0_DRIFT_14-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_DRIFT_14 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0002FE 06C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DRIFT_14-SKEME_BASE)) & 0x0F) , low (CH1SC0_DRIFT_
                          M         endif
                          M                 
                      01233         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_E
000300 80E1 0E37          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_E
                      01234         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000304 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01235                 
000306                01236 CH1SC0_DRIFT_14
                      01237         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_D,COMP_ALL,SKIP_SAME
000306 1CFC 000D          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,VARY_LOAD,SCALE_D,COMP_ALL
                      01238                 BRANCH_TO       CH1SC0_DRIFT_13
                          M         
                          M         if      (CH1SC0_DRIFT_13-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_DRIFT_13 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00030A 12C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DRIFT_13-SKEME_BASE)) & 0x0F) , low (CH1SC0_DRIFT_
                          M         endif
                          M                 
                      01239         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_D
00030C 80E1 0D37          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_D
                      01240         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000310 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01241                 
000312                01242 CH1SC0_DRIFT_13
                      01243         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_C
000312 80E1 0C37          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,DRIFT_VOLUME,SCALE_C
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 41
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01244         BRANCH_TO       CH1SC0_RUN_MAIN
                          M         
                          M         if      (CH1SC0_RUN_MAIN-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_MAIN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000316 18C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_MAIN-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_MA
                          M         endif
                          M                 
                      01245                 
                      01246         
                      01247 ;--
000318                01248 CH1SC0_RUN_MAIN
                      01249 
                      01250 ;;;;;;;;;;;;;;;;;;;;;;;;; EVALUATE MOTOR ::::::::::::::::::
                      01251 
000318                01252 CH1SC0_EVAL_LOAD_RUN
                      01253 ;==============================================================
                      01254 ; all normal changes to notch come thru here:           
                      01255         ;CONTINUE CHECKING NOTCH CHANGES:
                      01256 ;======================================================================
                      01257 ;       Evaluate WORK_NOTCH  
                      01258 ;======================================================================
                      01259         ;TEST VARIOUS WAYS TO DETERMINE NOTCH CHANGE DIRECTION:
000318                01260 CH1SC0_CURRNOTCH_TEST
                      01261         ;accelerate?
                      01262         MASK_COMPARE    PREV_NOTCH,TARGET_DATA,WORK_NOTCH,COMP_7LSB,SKIP_LESS   ;Skip if   previousNotch
000318 1BFA 8001          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+TARGET_DATA,PREV_NOTCH,WORK_NOTCH,COMP_7LSB
                      01263                 BRANCH_TO       CH1SC0_CURRNOTCH_TEST2          ;work is less
                          M         
                          M         if      (CH1SC0_CURRNOTCH_TEST2-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_CURRNOTCH_TEST2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00031C 20C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_CURRNOTCH_TEST2-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01264         BRANCH_TO       CH1SC0_SETACC
                          M         
                          M         if      (CH1SC0_SETACC-SKEME_BASE) > 0xFFF                  ;check branch size in SCHEME
                          M                 error   CH1SC0_SETACC range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00031E 32C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SETACC-SKEME_BASE)) & 0x0F) , low (CH1SC0_SETACC-S
                          M         endif
                          M                 
                      01265         
000320                01266 CH1SC0_CURRNOTCH_TEST2  ;is decelerate?
                      01267         MASK_COMPARE    WORK_NOTCH,TARGET_DATA,PREV_NOTCH,COMP_7LSB,SKIP_LESS   ;Skip unless  previousNo
000320 01FA 801B          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+TARGET_DATA,WORK_NOTCH,PREV_NOTCH,COMP_7LSB
                      01268                 BRANCH_TO       CH1SC0_CURRNOTCH_TEST3  ;prev is equal
                          M         
                          M         if      (CH1SC0_CURRNOTCH_TEST3-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_CURRNOTCH_TEST3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000324 28C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_CURRNOTCH_TEST3-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01269         BRANCH_TO       CH1SC0_SETDEC                           ;decelerate
                          M         
                          M         if      (CH1SC0_SETDEC-SKEME_BASE) > 0xFFF                  ;check branch size in SCHEME
                          M                 error   CH1SC0_SETDEC range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000326 70C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SETDEC-SKEME_BASE)) & 0x0F) , low (CH1SC0_SETDEC-S
                          M         endif
                          M                 
                      01270 
000328                01271 CH1SC0_CURRNOTCH_TEST3  
                      01272         ;no change?  PREViousNotch = current
                      01273         ;work notch may change mid routine to a lesser value...
                      01274         MASK_COMPARE    PREV_NOTCH,TARGET_DATA,WORK_NOTCH,COMP_7LSB,SKIP_SAME   ;Skip if   previousNotch
000328 1BF8 8001          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+TARGET_DATA,PREV_NOTCH,WORK_NOTCH,COMP_7LSB
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 42
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01275                 BRANCH_TO       CH1SC0_ERROR    ;skipped when =
                          M         
                          M         if      (CH1SC0_ERROR-SKEME_BASE) > 0xFFF                   ;check branch size in SCHEME
                          M                 error   CH1SC0_ERROR range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00032C 30C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ERROR-SKEME_BASE)) & 0x0F) , low (CH1SC0_ERROR-SKE
                          M         endif
                          M                 
                      01276         ;run:
                      01277         BRANCH_TO       CH1SC0_SETRUN
                          M         
                          M         if      (CH1SC0_SETRUN-SKEME_BASE) > 0xFFF                  ;check branch size in SCHEME
                          M                 error   CH1SC0_SETRUN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00032E 9EC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SETRUN-SKEME_BASE)) & 0x0F) , low (CH1SC0_SETRUN-S
                          M         endif
                          M                 
                      01278         
000330                01279 CH1SC0_ERROR
                      01280         ;DEBUG: THROTTLE ERROR....
                      01281         ;PLAY HNDL_SC0_DEBUG1,no_loop,loop_STD  
                      01282         BRANCH_TO       CH1SC0_SETRUN
                          M         
                          M         if      (CH1SC0_SETRUN-SKEME_BASE) > 0xFFF                  ;check branch size in SCHEME
                          M                 error   CH1SC0_SETRUN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000330 9EC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_SETRUN-SKEME_BASE)) & 0x0F) , low (CH1SC0_SETRUN-S
                          M         endif
                          M                 
                      01283 
                      01284         
                      01285         
                      01286 ;=====================BEGIN ACCELERATION TO NEW NOTCH===================================================
000332                01287 CH1SC0_SETACC           
                      01288         LOAD_MODIFIER MTYPE_BLEND,BLEND_CURRENT_CHNL,BLENDG_DSL_ACCEL0,BLENDF_DSL_ACCEL0        ; motor 
000332 00E3 0204          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL,BLENDG_DSL_ACCEL0,BLENDF_D
                      01289 ;===================================
000336                01290 CH1SC0_SETACC_START
                      01291 ;============================================================================================   
                      01292 ;       PREV_NOTCH is an integer work register value between 0 and 7 representing the nominal 
                      01293 ;       prior running notch. It is set by the continuous running routine.
                      01294 ;==================================================================
000336                01295 CH1SC0_ACC_TESTN        
                      01296         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH1,COMP_ALL,SKIP_SAME    ;Skip if Equal
000336 1BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,PREV_NOTCH,NOTCH1,COMP_ALL
                      01297                 BRANCH_TO       CH1SC0_ACC_TESTN2
                          M         
                          M         if      (CH1SC0_ACC_TESTN2-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_ACC_TESTN2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00033A 3EC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ACC_TESTN2-SKEME_BASE)) & 0x0F) , low (CH1SC0_ACC_
                          M         endif
                          M                 
                      01298         BRANCH_TO       CH1SC0_ACC1
                          M         
                          M         if      (CH1SC0_ACC1-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_ACC1 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00033C 58C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ACC1-SKEME_BASE)) & 0x0F) , low (CH1SC0_ACC1-SKEME
                          M         endif
                          M                 
                      01299  
00033E                01300 CH1SC0_ACC_TESTN2       
                      01301         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH2,COMP_ALL,SKIP_SAME    ;Skip if Equal
00033E 1BFC 0010          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,PREV_NOTCH,NOTCH2,COMP_ALL
                      01302                 BRANCH_TO       CH1SC0_ACC_TESTN3
                          M         
                          M         if      (CH1SC0_ACC_TESTN3-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_ACC_TESTN3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 43
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
000342 46C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ACC_TESTN3-SKEME_BASE)) & 0x0F) , low (CH1SC0_ACC_
                          M         endif
                          M                 
                      01303         BRANCH_TO       CH1SC0_ACC2
                          M         
                          M         if      (CH1SC0_ACC2-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_ACC2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000344 5CC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ACC2-SKEME_BASE)) & 0x0F) , low (CH1SC0_ACC2-SKEME
                          M         endif
                          M                 
                      01304         
000346                01305 CH1SC0_ACC_TESTN3       
                      01306         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH3,COMP_ALL,SKIP_SAME    ;Skip if Equal
000346 1BFC 0020          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,PREV_NOTCH,NOTCH3,COMP_ALL
                      01307                 BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS  
                          M         
                          M         if      (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_NEXT_RUN_SOUNDS range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00034A BCC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01308         BRANCH_TO       CH1SC0_ACC3
                          M         
                          M         if      (CH1SC0_ACC3-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_ACC3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00034C 6CC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_ACC3-SKEME_BASE)) & 0x0F) , low (CH1SC0_ACC3-SKEME
                          M         endif
                          M                 
                      01309         
                      01310 ;=========================================
00034E                01311 CH1SC0_INCR_PREV_NOTCH_ACC      
                      01312 ;--------------
                      01313         MASK_COMPARE    PREV_NOTCH,TARGET_DATA,WORK_NOTCH,COMP_7LSB,SKIP_GRTR   ;Skip if  previousNotch 
00034E 1BFB 8001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+TARGET_DATA,PREV_NOTCH,WORK_NOTCH,COMP_7LSB
                      01314                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+PREV_NOTCH,+0x10,MAX_NOTCH_VAL   ; Increm
000352 BBE6 2010          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+PREV_NOTCH,+0x10,MAX_NOT
                      01315         BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS
                          M         
                          M         if      (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_NEXT_RUN_SOUNDS range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000356 BCC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01316         
                      01317 
                      01318 ;========================================================================
000358                01319 CH1SC0_ACC1             
                      01320 ;========================================================================
                      01321         ; will rev to next notch; running will lower to correct notch;
                      01322         ; run1 sounds will only play when CV132 computes notch1;
                      01323         ; Skipped when prev >= 1  (current must be > 1 to enter ACC (see compare above in normal))
                      01324         ; Only plays when manually selected notch 2:
                      01325 
                      01326         PLAY HNDL_SC0_INC_12,no_loop,loop_STD   
                          M         list ;2 byte PLAY  [HANDLE]
000358 0340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_INC_12 & 0x3F)+((no_loop<<6)&0xC0)
                          M         list
                      01327         BRANCH_TO       CH1SC0_INCR_PREV_NOTCH_ACC
                          M         
                          M         if      (CH1SC0_INCR_PREV_NOTCH_ACC-SKEME_BASE) > 0xFFF     ;check branch size in SCHEME
                          M                 error   CH1SC0_INCR_PREV_NOTCH_ACC range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00035A 4EC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_INCR_PREV_NOTCH_ACC-SKEME_BASE)) & 0x0F) , low (CH
                          M         endif
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 44
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 
                      01328         
00035C                01329 CH1SC0_ACC2
                      01330         PLAY HNDL_SC0_INC_23,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00035C 0440               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_INC_23 & 0x3F)+((no_loop<<6)&0xC0)
                          M         list
                      01331         
                      01332         ;decrement delta after throttle change:.............
                      01333         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   ;decreme
00035E ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      01334         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;prevent
000362 0BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      01335                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   
000366 ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      01336 
                      01337         BRANCH_TO       CH1SC0_INCR_PREV_NOTCH_ACC
                          M         
                          M         if      (CH1SC0_INCR_PREV_NOTCH_ACC-SKEME_BASE) > 0xFFF     ;check branch size in SCHEME
                          M                 error   CH1SC0_INCR_PREV_NOTCH_ACC range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00036A 4EC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_INCR_PREV_NOTCH_ACC-SKEME_BASE)) & 0x0F) , low (CH
                          M         endif
                          M                 
                      01338         
00036C                01339 CH1SC0_ACC3
                      01340         PLAY HNDL_SC0_RUN_3,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00036C 0840               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_RUN_3 & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      01341         BRANCH_TO       CH1SC0_INCR_PREV_NOTCH_ACC
                          M         
                          M         if      (CH1SC0_INCR_PREV_NOTCH_ACC-SKEME_BASE) > 0xFFF     ;check branch size in SCHEME
                          M                 error   CH1SC0_INCR_PREV_NOTCH_ACC range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00036E 4EC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_INCR_PREV_NOTCH_ACC-SKEME_BASE)) & 0x0F) , low (CH
                          M         endif
                          M                 
                      01342         
                      01343 ;================================================
                      01344 ; Decelerate CHANGE IN NOTCH DOWN:
000370                01345 CH1SC0_SETDEC
                      01346         ; Yes Decelerate:
                      01347         LOAD_MODIFIER MTYPE_BLEND,BLEND_CURRENT_CHNL,BLENDG_DSL_DECEL0,BLENDF_DSL_DECEL0        ; motor 
000370 00E3 0709          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL,BLENDG_DSL_DECEL0,BLENDF_D
                      01348 
                      01349         
000374                01350 CH1SC0_DEC_TESTN
                      01351 ;============================================================================================   
                      01352 ;       PREV_NOTCH is an integer work register value between 0 and 7 representing the nominal 
                      01353 ;       prior running notch. It is set by the continuous running routine.
                      01354 ;==================================================================
000374                01355 CH1SC0_DEC_TESTN1               
                      01356         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH1,COMP_ALL,SKIP_SAME    ;Skip if Equal
000374 1BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,PREV_NOTCH,NOTCH1,COMP_ALL
                      01357                 BRANCH_TO       CH1SC0_DEC_TESTN2       
                          M         
                          M         if      (CH1SC0_DEC_TESTN2-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_DEC_TESTN2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000378 7CC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DEC_TESTN2-SKEME_BASE)) & 0x0F) , low (CH1SC0_DEC_
                          M         endif
                          M                 
                      01358         BRANCH_TO       CH1SC0_DEC1
                          M         
                          M         if      (CH1SC0_DEC1-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_DEC1 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00037A 98C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DEC1-SKEME_BASE)) & 0x0F) , low (CH1SC0_DEC1-SKEME
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 45
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M                 
                      01359         
00037C                01360 CH1SC0_DEC_TESTN2       
                      01361         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH2,COMP_ALL,SKIP_SAME    ;Skip if Equal
00037C 1BFC 0010          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,PREV_NOTCH,NOTCH2,COMP_ALL
                      01362                 BRANCH_TO       CH1SC0_DEC_TESTN3
                          M         
                          M         if      (CH1SC0_DEC_TESTN3-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_DEC_TESTN3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000380 84C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DEC_TESTN3-SKEME_BASE)) & 0x0F) , low (CH1SC0_DEC_
                          M         endif
                          M                 
                      01363         BRANCH_TO       CH1SC0_DEC2
                          M         
                          M         if      (CH1SC0_DEC2-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_DEC2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000382 94C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DEC2-SKEME_BASE)) & 0x0F) , low (CH1SC0_DEC2-SKEME
                          M         endif
                          M                 
                      01364         
000384                01365 CH1SC0_DEC_TESTN3       
                      01366         BRANCH_TO       CH1SC0_DEC3
                          M         
                          M         if      (CH1SC0_DEC3-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_DEC3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000384 90C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DEC3-SKEME_BASE)) & 0x0F) , low (CH1SC0_DEC3-SKEME
                          M         endif
                          M                 
                      01367         
                      01368 
000386                01369 CH1SC0_DECR_PREV_NOTCH  
                      01370 ;---------------        
000386                01371 CH1SC0_DECR_PREV_NOTCH_DEC1
                      01372         MASK_COMPARE    PREV_NOTCH,TARGET_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_SAME   ;Skip if  previousNotc
000386 1BF8 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+TARGET_DATA,PREV_NOTCH,MIN_NOTCH_VAL,COMP_ALL
                      01373                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+PREV_NOTCH,-0x10,MAX_NOTCH_VAL   ;Decreme
00038A BBE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+PREV_NOTCH,-0x10,MAX_NOT
                      01374         BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS
                          M         
                          M         if      (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_NEXT_RUN_SOUNDS range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00038E BCC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01375 
000390                01376 CH1SC0_DEC3
                      01377         PLAY HNDL_SC0_DEC_32,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000390 0940               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_DEC_32 & 0x3F)+((no_loop<<6)&0xC0)
                          M         list
                      01378         BRANCH_TO       CH1SC0_DECR_PREV_NOTCH
                          M         
                          M         if      (CH1SC0_DECR_PREV_NOTCH-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_DECR_PREV_NOTCH range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000392 86C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DECR_PREV_NOTCH-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01379         
000394                01380 CH1SC0_DEC2 
                      01381 
                      01382         PLAY HNDL_SC0_DEC_21,no_loop,loop_STD   
                          M         list ;2 byte PLAY  [HANDLE]
000394 0A40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_DEC_21 & 0x3F)+((no_loop<<6)&0xC0)
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 46
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         list
                      01383         BRANCH_TO       CH1SC0_DECR_PREV_NOTCH  
                          M         
                          M         if      (CH1SC0_DECR_PREV_NOTCH-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_DECR_PREV_NOTCH range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000396 86C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DECR_PREV_NOTCH-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01384         
000398                01385 CH1SC0_DEC1 
                      01386         PLAY HNDL_SC0_DEC_10,no_loop,loop_STD   
                          M         list ;2 byte PLAY  [HANDLE]
000398 0B40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_DEC_10 & 0x3F)+((no_loop<<6)&0xC0)
                          M         list
                      01387         BRANCH_TO       CH1SC0_DECR_PREV_NOTCH  
                          M         
                          M         if      (CH1SC0_DECR_PREV_NOTCH-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_DECR_PREV_NOTCH range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00039A 86C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_DECR_PREV_NOTCH-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01388 
                      01389         
00039C                01390 CH1SC0_DEC_EXIT
                      01391         BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS
                          M         
                          M         if      (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_NEXT_RUN_SOUNDS range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00039C BCC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01392 
                      01393 ;============================================================================================   
                      01394 ; ALL AFTER NOTCH CHANGE COMES THRU HERE:
                      01395 ;=====================================
00039E                01396 CH1SC0_SETRUN   
                      01397 ;
                      01398 ;UC1.7================  BEGIN_RUNNING_SOUNDS
                      01399         ;----------------------------------------------
                      01400         ; no change in notch or speed:
                      01401         ;----------------------------------------------
00039E                01402 CH1SC0_SETRUN_START
                      01403 ; Will catch any missed change and play proper notch sound:
                      01404 ;======================================================================
00039E                01405 CH1SC0_RUN_TESTN
                      01406         MASK_COMPARE    PREV_NOTCH,IMMED_DATA,NOTCH1,COMP_ALL,SKIP_SAME    ;Skip if Equal
00039E 1BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,PREV_NOTCH,NOTCH1,COMP_ALL
                      01407                 BRANCH_TO       CH1SC0_RUN_TESTN2
                          M         
                          M         if      (CH1SC0_RUN_TESTN2-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_TESTN2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003A2 A6C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_TESTN2-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_
                          M         endif
                          M                 
                      01408         BRANCH_TO       CH1SC0_RUN1        
                          M         
                          M         if      (CH1SC0_RUN1-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN1 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003A4 B0C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN1-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN1-SKEME
                          M         endif
                          M                 
                      01409         
0003A6                01410 CH1SC0_RUN_TESTN2       
                      01411         MASK_COMPARE    PREV_NOTCH,IMMED_DATA,NOTCH2,COMP_ALL,SKIP_SAME    ;Skip if Equal
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 47
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003A6 1BFC 0010          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,PREV_NOTCH,NOTCH2,COMP_ALL
                      01412                 BRANCH_TO       CH1SC0_RUN_TESTN3
                          M         
                          M         if      (CH1SC0_RUN_TESTN3-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN_TESTN3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003AA AEC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN_TESTN3-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN_
                          M         endif
                          M                 
                      01413         BRANCH_TO       CH1SC0_RUN2
                          M         
                          M         if      (CH1SC0_RUN2-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003AC B4C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN2-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN2-SKEME
                          M         endif
                          M                 
                      01414         
0003AE                01415 CH1SC0_RUN_TESTN3       
                      01416         BRANCH_TO       CH1SC0_RUN3
                          M         
                          M         if      (CH1SC0_RUN3-SKEME_BASE) > 0xFFF                    ;check branch size in SCHEME
                          M                 error   CH1SC0_RUN3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003AE B8C3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_RUN3-SKEME_BASE)) & 0x0F) , low (CH1SC0_RUN3-SKEME
                          M         endif
                          M                 
                      01417         
                      01418 
0003B0                01419 CH1SC0_RUN1
                      01420         PLAY  HNDL_SC0_RUN_1,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0003B0 0640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_RUN_1 & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      01421         BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS
                          M         
                          M         if      (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_NEXT_RUN_SOUNDS range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003B2 BCC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01422         
0003B4                01423 CH1SC0_RUN2
                      01424         PLAY  HNDL_SC0_RUN_2,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0003B4 0740               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_RUN_2 & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      01425         BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS
                          M         
                          M         if      (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_NEXT_RUN_SOUNDS range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003B6 BCC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
                          M                 
                      01426         
0003B8                01427 CH1SC0_RUN3
                      01428         PLAY HNDL_SC0_RUN_3,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0003B8 0840               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_RUN_3 & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      01429         BRANCH_TO       CH1SC0_NEXT_RUN_SOUNDS
                          M         
                          M         if      (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH1SC0_NEXT_RUN_SOUNDS range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003BA BCC3               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_NEXT_RUN_SOUNDS-SKEME_BASE)) & 0x0F) , low (CH1SC0
                          M         endif
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 48
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 
                      01430                 
                      01431         
                      01432 ;=======================================        
0003BC                01433 CH1SC0_NEXT_RUN_SOUNDS  
                      01434         ; all must exit here
                      01435         END_SOUND       
0003BC 0000               M                 DB      CMD_END_SND,0
                      01436         
                      01437         ; ---------------------------------------------------------
                      01438         ;     END CONTINUOUS SOUNDS
                      01439         ; ---------------------------------------------------------     
                      01440 
                      01441         
                      01442         
                      01443 ;----------------------------------------------------
                      01444 ;  Decrease to idle             removed 10/2013 used only in NV projects not in DN projects
                      01445 ;----------------------------------------------------
                      01446 ;----------------------------------------------------
                      01447 ;IDLE/not moving Phase
                      01448         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      01449         ;       THIS ROUTINE IS CH12_ primary PERSISTENT (NOT INTERRUPTABLE)
                      01450         ;       this is MODIFIED by DISCRETE notch change logic to vary AMPL with NOTCH setting, RPMs al
                      01451         ;----------------------------------------------------
                      01452         INITIATE_SOUND  TRIG_SND_ACTV11,RUN_WHILE_TRIG  ;               T_SPD_IDLE,RUN_WHILE_TRIG
0003BE 0F92               M                 DB      CMD_INITIATE_SND + ((RUN_WHILE_TRIG) & 0x07), TRIG_SND_ACTV11 +((RUN_WHILE_TRIG)
  0000000A                M ICNT += 1
                          M 
                      01453         ; Blend Parms for drifting?
                      01454         LOAD_MODIFIER  MTYPE_BLEND, BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0, BLENDG_DSL_DECEL0, BLEND
0003C0 00E3 0709          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0,BL
                      01455         ;original base code sets both blend and pitch here
                      01456         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+WORK_NOTCH,IMAXP_DIESEL,DITHERP_DIESEL
0003C4 A1E2 005E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+WORK_NOTCH,IMAXP_DIESEL,D
                      01457         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCALE_MID,COMP_ALL,SKIP_GRTR               ;prevent underfl
0003C8 1CFF 000C          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,VARY_LOAD,SCALE_MID,COMP_ALL
                      01458                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,SCALE_MID    ;dec
0003CC BCE6 0CFF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_1,
                      01459 
                      01460         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_MIN 
0003D0 80E1 088B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_MIN
                      01461         
0003D4                01462 CH12SC0_RUN_IDLE        
                      01463         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x01,0   ;decrease
0003D4 BDE6 00FF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x01,0
                      01464 
                      01465         ;;;;;;;;;;;;;;;;;;;;;; DRIVE HOLD WHEN DELTA >0..........5/30/19
                      01466         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;test fo
0003D8 0BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      01467                 BRANCH_TO       CH1SC0_CONTINUOUS_NOTCH         ;play run notch >0
                          M         
                          M         if      (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH1SC0_CONTINUOUS_NOTCH range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003DC 60C2               M                 DB      CMD_GOTO_SND + ((high (CH1SC0_CONTINUOUS_NOTCH-SKEME_BASE)) & 0x0F) , low (CH1SC
                          M         endif
                          M                 
                      01468 
                      01469         MASK_COMPARE    SCV_FEATURE2_DISABLE,IMMED_DATA,0x01,COMP_bit0,SKIP_SAME                ;SKIP_LE
0003DE B9FC FE01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE2_DISABLE,0x01,COMP_bit0
                      01470                 BRANCH_TO       CH12SC0_RUN3_LOWIDLE
                          M         
                          M         if      (CH12SC0_RUN3_LOWIDLE-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH12SC0_RUN3_LOWIDLE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003E2 E8C3               M                 DB      CMD_GOTO_SND + ((high (CH12SC0_RUN3_LOWIDLE-SKEME_BASE)) & 0x0F) , low (CH12SC0_
                          M         endif
                          M                 
                      01471 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 49
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0003E4                01472 CH12SC0_RUN2_IDLE
                      01473         ;============== low idle is bit0 value 0
                      01474         ;                               regular idle is bit0 value 1
                      01475         ;                               unless ALCO stumble which is bit5
                      01476         ;==============
                      01477         PLAY    HNDL_SC0_RUN_IDLE,loop_till_init_TRIG,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
0003E4 C549               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_RUN_IDLE & 0x3F)+((l
                          M         list
                      01478 
                      01479         BRANCH_TO       CH12SC0_SKIP_STOPR2
                          M         
                          M         if      (CH12SC0_SKIP_STOPR2-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH12SC0_SKIP_STOPR2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003E6 F4C3               M                 DB      CMD_GOTO_SND + ((high (CH12SC0_SKIP_STOPR2-SKEME_BASE)) & 0x0F) , low (CH12SC0_S
                          M         endif
                          M                 
                      01480 ;---
0003E8                01481 CH12SC0_RUN3_LOWIDLE    ;low idle here:
                      01482 
                      01483         ;;;;;LONG LOOP HERE TO IDLE:
                      01484 
                      01485         ;WHEN LOW IDLE DISABLED PLAY RUN 1: AT CH12SC0_RUN2_IDLE
                      01486 
                      01487         ;ELSE PLAY RUN 0
                      01488         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x01,0   ;decrease
0003E8 BDE6 00FF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x01,0
                      01489  
                      01490         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_MIN
0003EC 80E1 088B          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_PRIME_VOLUME,SCALE_MIN
                      01491         PLAY    HNDL_SC0_RUN_IDLE,loop_till_init_TRIG,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
0003F0 C549               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_RUN_IDLE & 0x3F)+((l
                          M         list
                      01492         ;cannot play here due to interrupted event: 8/1/19
                      01493 
                      01494         ;THIS CODE IS INTERRUPTED (see above)
                      01495         BRANCH_TO       CH12SC0_SKIP_STOPR2
                          M         
                          M         if      (CH12SC0_SKIP_STOPR2-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH12SC0_SKIP_STOPR2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003F2 F4C3               M                 DB      CMD_GOTO_SND + ((high (CH12SC0_SKIP_STOPR2-SKEME_BASE)) & 0x0F) , low (CH12SC0_S
                          M         endif
                          M                 
                      01496         
0003F4                01497 CH12SC0_SKIP_STOPR2
                      01498         END_SOUND
0003F4 0000               M                 DB      CMD_END_SND,0
                      01499         
                      01500         ;END CH1_ ===============================================================
                      01501 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 50
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01502         PAGE
                      01503         
                      01504         ;//////////////////// TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
                      01505 
                      01506 ;------------------------------------------------
                      01507 ;Start Channel 2                whistle/horn
                      01508 ;------------------------------------------------
0003F6                01509 CH12SC0_BEGIN
                      01510         CHANNEL_START   2       ;typically TRANSIENT channel for QUEUED non-persistent sounds
0003F6 0281               M                 DB      CMD_START_CHNL,2
                          M ;CTEMP += 1
                      01511 ;----------------------------------------------------
                      01512 ;---------RUN ONCE!  always LOAD SCATTER tasks when locomotive becomes ACTIVE! (hi priority-no sound)
                      01513 ;       NOTE: SCATTER EVENTS MUST BE INTERLOCKED IN HANDLERS TO PREVENT PLAY AFTER DISABLE.
                      01514 ;----------------------------------------------------
                      01515         INITIATE_SOUND  TRIG_SND_ACTV11,NORMAL          ;run ONCE only
0003F8 0F90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_SND_ACTV11 +((NORMAL) & 0x80)
  0000000B                M ICNT += 1
                          M 
                      01516 ;------------------------------------------------
                      01517  ;added 8/13/06 to holdoff until START is complete
                      01518 ;----------------------------------------------------
0003FA                01519 CH12SC0_INTERLOCK_HOLD
                      01520         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
0003FA 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      01521                 BRANCH_TO       CH12SC0_INTERLOCK_HOLD  ;interlock is 00, freeze                
                          M         
                          M         if      (CH12SC0_INTERLOCK_HOLD-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH12SC0_INTERLOCK_HOLD range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0003FE FAC3               M                 DB      CMD_GOTO_SND + ((high (CH12SC0_INTERLOCK_HOLD-SKEME_BASE)) & 0x0F) , low (CH12SC
                          M         endif
                          M                 
                      01522 
                      01523         ;---------------------------------------------
                      01524         ;  Setup random sounds -- scatter               
                      01525         ;---------------------------------------------                  ;keep scatter channels straight:
                      01526         ;TRIG_SCAT0     
                      01527         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL0,DRYER_RATE,SINTEN_LOW+WORK_SPEED       
000400 20E4 402F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL0,DRYER_RATE,SINTE
                      01528         ;TRIG_SCAT2     FAN1
                      01529         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL2,0x61,SINTEN_MID+WORK_SPEED             
000404 22E4 6061          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL2,0x61,SINTEN_MID+
                      01530         ;TRIG_SCAT3     FAN1
                      01531         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL3,0x51,SINTEN_HIGH+WORK_SPEED    ;FAN1  $
000408 23E4 C051          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL3,0x51,SINTEN_HIGH
                      01532 
                      01533         ;TRIG_SCAT1     COMPRESSOR
                      01534         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL1,AIRPUMP_START_RATE,SINTEN_LOW+WORK_SPEE
00040C 21E4 401E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL1,AIRPUMP_START_RA
                      01535         ;TRIG_SCAT4     DRYER
                      01536         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_SAWTOOTH+SCAT_CHNL4,0x02,SINTEN_OFF      ;diesel Scatter 
000410 34E4 0002          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_SAWTOOTH+SCAT_CHNL4,0x02,SINTEN_OF
                      01537 
                      01538         ;  load other timers here:
                      01539         ;TRIG_SCAT5     TRIM NOTCH AND IDLE
                      01540         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL5,0x72,SINTEN_MID+WORK_SPEED     ;BY CV19
000414 25E4 6072          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL5,0x72,SINTEN_MID+
                      01541         
                      01542         END_SOUND       
000418 0000               M                 DB      CMD_END_SND,0
                      01543         
                      01544         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      01545         ;       THIS ROUTINE IS CH2_ high priority/whistle/horn PERSISTENT (NOT INTERRUPTABLE)
                      01546         ; SF2  horn/ PLAYABLE HORN selection
                      01547         ;----------------------------------------------------
                      01548 ;UC2.1================
00041A                01549 CH2SC0_F2_HORN_STARTER
                      01550         INITIATE_SOUND  TRIG_HORNS_ON,NORMAL    ;+NO_PREEMPT_TRIG               ;BE sure not INTERRUPTED
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 51
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00041A 0990               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_HORNS_ON +((NORMAL) & 0x80)
  0000000C                M ICNT += 1
                          M 
                      01551         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x16,0   ;decrease
00041C BDE6 00EA          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x16,0
                      01552 ;-----NEW 8/15/07
                      01553 ;we delay here by SCV156=20 to allow a SHORT blow with SF2 actuation,
                      01554 ; without sustain BURST COMMON to ALL horn types
                      01555 ;if KEY press graeter than CV156 delay then will be
                      01556 ; normal user controllable LONG blow
                      01557 ;if KEY press graeter than CV156 delay then will be normal user controllable LONG blow
                      01558 
000420                01559 CH2SC0_F2_HORN_DELAY    
                      01560         DELAY_SOUND             DELAY_CV,SCV_HORNWHISTLE_DELAY,DELAY_GLOBAL
000420 9BB5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), (SCV_HORNWHISTLE_DELAY & 0x7F)+DELAY_CV 
                      01561            
                      01562 ;       ===========DO NOT SET GAIN PRIOR TO DELAY ==== LOSS OF GAIN ISSUE 3/30/17
                      01563 ;============================
                      01564 ;-----COMMON horn select and play section
                      01565         ;HORN SELECTED CV150:
                      01566                         ;                       Decimal HEX                     Bit
                      01567                         ;                                                               7654 3210
                      01568                         ;       1               0               0x00            0000 0000
                      01569                         ;       2               1               0x01            0000 0001
                      01570                         ;       3               2               0x02            0000 0010
                      01571                         ;       4               3               0x03            0000 0011
                      01572                         ;       5               4               0x04            0000 0100
                      01573                         ;       6               5               0x05            0000 0101
                      01574                         ;       7               6               0x06            0000 0110
                      01575                         ;       8               7               0x07            0000 0111
                      01576                         ;       9               8               0x08            0000 1000
                      01577                         ;       10              9               0x09            0000 1001
                      01578                         ;       11              10              0x10            0000 1010
                      01579                         ;       12              11              0x11            0000 1011
                      01580                         ;       PLAYABLE:
                      01581                         ;       1               128             0x80            1000 0000
                      01582                         ;       2               129             0x81            1000 0001
                      01583                         ;       3               130             0x82            1000 0010
                      01584                         ;       4               131             0x83            1000 0011
                      01585                         ;       5               132             0x84            1000 0100
                      01586                         ;       6               133             0x85            1000 0101
                      01587                         ;       7               134             0x86            1000 0110
                      01588                         ;       8               135             0x87            1000 0111
                      01589                         ;       9               136             0x88            1000 1000
                      01590                         ;       10              137             0x89            1000 1001
                      01591                         ;                       Decimal HEX             Bit 7654 3210
                      01592 ;============================
                      01593 ;-----COMMON horn select and play section
                      01594 ;----------------------------------------------------
000422                01595 CH2SC0_F2_HORN_SELECT   
                      01596 ;HORN choices 0-1
                      01597 ;-----
                      01598 ;CV150= xxxx-x00X
000422                01599 CH2SC0_F2_HORN_00X
                      01600         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit0,SKIP_SAME              ;SKIP_LE
000422 95FC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit0
                      01601                 BRANCH_TO               CH2SC0_F2_HORN_001
                          M         
                          M         if      (CH2SC0_F2_HORN_001-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000426 5EC4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_001-SKEME_BASE)) & 0x0F) , low (CH2SC0_F2_
                          M         endif
                          M                 
                      01602 ;----
                      01603 ;CV150=00 DEFAULT HORN0 -- 0x00
000428                01604 CH2SC0_F2_HORN_000
                      01605         ;==========================SEE if PLAYABLE horn scv  (scv150) BIT7=1
                      01606         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE_F
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 52
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000428 80E1 0F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE
                      01607         ;option non-playable when SF11 on:
                      01608         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FANS_ON         ;SUSTAIN HORN ON
00042C 1A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_FANS_ON 
                      01609                 BRANCH_TO       CH2SC0_F2_HORN_000_START
                          M         
                          M         if      (CH2SC0_F2_HORN_000_START-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_000_START range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00042E 38C4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_000_START-SKEME_BASE)) & 0x0F) , low (CH2S
                          M         endif
                          M                 
                      01610         
                      01611         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit7,SKIP_SAME      
000430 95FC 7F00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit7
                      01612         ; If CV150 BIT7=1, enable volume modulation for playable horn 1
                      01613                 LOAD_MODIFIER   MTYPE_GAIN,ANALOG_GAIN_MODIFY+WORK_ACHNL_7F,SCV_HORNWHISTLE_VOLUME,SUMG+
000434 B4E1 4F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),ANALOG_GAIN_MODIFY+WORK_ACHNL_7F,SCV_HORNWHIST
                      01614 
000438                01615 CH2SC0_F2_HORN_000_START
                      01616         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_COUPLE_ON       ;see if SHORT HORN ON 
000438 0A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_COUPLE_ON 
                      01617                 BRANCH_TO       CH2SC0_F2_HORN_000_SHORT
                          M         
                          M         if      (CH2SC0_F2_HORN_000_SHORT-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_000_SHORT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00043A 48C4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_000_SHORT-SKEME_BASE)) & 0x0F) , low (CH2S
                          M         endif
                          M                 
                      01618         PLAY            HNDL_SC0_HORN0_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00043C 0E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01619         
00043E                01620 CH2SC0_F2_HORN_000_LONG
                      01621         ;longer when moving:
                      01622         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
00043E 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      01623                 PLAY    HNDL_SC0_HORN0_LOOP,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000440 0F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_LOOP & 0x3F)+((no_loop<<6)&0
                          M         list
                      01624 
000442                01625 CH2SC0_F2_HORN_000_LONGER
                      01626         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_HORNS_ON                ;see if HORN OFF, just ATTACK/SUSTAIN (S
000442 0904               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_HORNS_ON 
                      01627                 BRANCH_TO       CH2SC0_F2_HORN_000_HOLD
                          M         
                          M         if      (CH2SC0_F2_HORN_000_HOLD-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_000_HOLD range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000444 4CC4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_000_HOLD-SKEME_BASE)) & 0x0F) , low (CH2SC
                          M         endif
                          M                 
                      01628         BRANCH_TO       CH2SC0_F2_HORN_000_DECAY
                          M         
                          M         if      (CH2SC0_F2_HORN_000_DECAY-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_000_DECAY range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000446 50C4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_000_DECAY-SKEME_BASE)) & 0x0F) , low (CH2S
                          M         endif
                          M                 
                      01629                 
000448                01630 CH2SC0_F2_HORN_000_SHORT
                      01631         PLAY    HNDL_SC0_HORN0_SHORT,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000448 1240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 53
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01632         BRANCH_TO       CH2SC0_F2_HORN_000_EXIT
                          M         
                          M         if      (CH2SC0_F2_HORN_000_EXIT-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_000_EXIT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00044A 5CC4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_000_EXIT-SKEME_BASE)) & 0x0F) , low (CH2SC
                          M         endif
                          M                 
                      01633         
00044C                01634 CH2SC0_F2_HORN_000_HOLD
                      01635         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_HORNS_ON                ;see if HORN OFF, just ATTACK/SUSTAIN (S
00044C 0904               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_HORNS_ON 
                      01636                 PLAY    HNDL_SC0_HORN0_LOOP,loop_till_HORNS_OFF,loop_INVERT                     
                          M         list ;2 byte PLAY  [HANDLE]
00044E 4F4A               M         DB      CMD_PLAY_SND+((loop_till_HORNS_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN0_LOOP & 0x3F)+(
                          M         list
                      01637                 
000450                01638 CH2SC0_F2_HORN_000_DECAY
                      01639         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FANS_ON ;see if SUSTAIN HORN ON 
000450 1A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_FANS_ON 
                      01640                 PLAY    HNDL_SC0_HORN0_SUSTAIN,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
000452 1040               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_SUSTAIN & 0x3F)+((no_loop<<6
                          M         list
                      01641                 
                      01642         PLAY            HNDL_SC0_HORN0_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000454 1140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01643                 
                      01644         MASK_COMPARE    SCV_FEATURE4_DISABLE,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME                ;SKIP_LE
000456 BBFC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE4_DISABLE,0x00,COMP_bit1
                      01645                 BRANCH_TO       CH2SC0_F2_HORN_001
                          M         
                          M         if      (CH2SC0_F2_HORN_001-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00045A 5EC4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_001-SKEME_BASE)) & 0x0F) , low (CH2SC0_F2_
                          M         endif
                          M                 
                      01646                 
00045C                01647 CH2SC0_F2_HORN_000_EXIT
                      01648         END_SOUND       ;Play HILO Horn when bit1 is on; bypass disabled HiLo sounds
00045C 0000               M                 DB      CMD_END_SND,0
                      01649 
                      01650 ;CV150=01 SECOND HORN2 -- 0x01
00045E                01651 CH2SC0_F2_HORN_001
                      01652         ;==========================SEE if PLAYABLE horn scv  (scv150) BIT7=1
                      01653         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE_F
00045E 80E1 0F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE
                      01654         ;option non-playable when SF11 on:
                      01655         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FANS_ON         ;SUSTAIN HORN ON
000462 1A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_FANS_ON 
                      01656                 BRANCH_TO       CH2SC0_F2_HORN_001_START
                          M         
                          M         if      (CH2SC0_F2_HORN_001_START-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_001_START range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000464 6EC4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_001_START-SKEME_BASE)) & 0x0F) , low (CH2S
                          M         endif
                          M                 
                      01657 
                      01658         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit7,SKIP_SAME      
000466 95FC 7F00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit7
                      01659         ; If CV150 BIT7=1, enable volume modulation for playable horn 1
                      01660                 LOAD_MODIFIER   MTYPE_GAIN,ANALOG_GAIN_MODIFY+WORK_ACHNL_7F,SCV_HORNWHISTLE_VOLUME,SUMG+
00046A B4E1 4F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),ANALOG_GAIN_MODIFY+WORK_ACHNL_7F,SCV_HORNWHIST
                      01661         
00046E                01662 CH2SC0_F2_HORN_001_START
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 54
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01663         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_COUPLE_ON       ;see if SHORT HORN ON 
00046E 0A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_COUPLE_ON 
                      01664                 BRANCH_TO       CH2SC0_F2_HORN_001_SHORT
                          M         
                          M         if      (CH2SC0_F2_HORN_001_SHORT-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_001_SHORT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000470 7EC4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_001_SHORT-SKEME_BASE)) & 0x0F) , low (CH2S
                          M         endif
                          M                 
                      01665         PLAY            HNDL_SC0_HORN1_START,no_loop,loop_STD   
                          M         list ;2 byte PLAY  [HANDLE]
000472 1340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01666         
000474                01667 CH2SC0_F2_HORN_001_LONG 
                      01668         ;longer when moving:
                      01669         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
000474 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      01670                 PLAY    HNDL_SC0_HORN1_LOOP,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000476 1440               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_LOOP & 0x3F)+((no_loop<<6)&0
                          M         list
                      01671 
000478                01672 CH2SC0_F2_HORN_001_LONGER       
                      01673         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_HORNS_ON                ;see if HORN OFF, just ATTACK/SUSTAIN (S
000478 0904               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_HORNS_ON 
                      01674                 BRANCH_TO       CH2SC0_F2_HORN_001_HOLD
                          M         
                          M         if      (CH2SC0_F2_HORN_001_HOLD-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_001_HOLD range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00047A 82C4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_001_HOLD-SKEME_BASE)) & 0x0F) , low (CH2SC
                          M         endif
                          M                 
                      01675         BRANCH_TO       CH2SC0_F2_HORN_001_DECAY
                          M         
                          M         if      (CH2SC0_F2_HORN_001_DECAY-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_001_DECAY range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00047C 86C4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_001_DECAY-SKEME_BASE)) & 0x0F) , low (CH2S
                          M         endif
                          M                 
                      01676         
00047E                01677 CH2SC0_F2_HORN_001_SHORT
                      01678         PLAY    HNDL_SC0_HORN1_SHORT,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00047E 1740               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
                      01679         BRANCH_TO       CH2SC0_F2_HORN_001_EXIT
                          M         
                          M         if      (CH2SC0_F2_HORN_001_EXIT-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH2SC0_F2_HORN_001_EXIT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000480 8CC4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_F2_HORN_001_EXIT-SKEME_BASE)) & 0x0F) , low (CH2SC
                          M         endif
                          M                 
                      01680         
000482                01681 CH2SC0_F2_HORN_001_HOLD
                      01682         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_HORNS_ON                ;see if HORN OFF, just ATTACK/SUSTAIN (S
000482 0904               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_HORNS_ON 
                      01683                 PLAY    HNDL_SC0_HORN1_LOOP,loop_till_HORNS_OFF,loop_INVERT                     
                          M         list ;2 byte PLAY  [HANDLE]
000484 544A               M         DB      CMD_PLAY_SND+((loop_till_HORNS_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN1_LOOP & 0x3F)+(
                          M         list
                      01684         
000486                01685 CH2SC0_F2_HORN_001_DECAY
                      01686         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FANS_ON ;see if SUSTAIN HORN ON 
000486 1A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_FANS_ON 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 55
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01687                 PLAY    HNDL_SC0_HORN1_SUSTAIN,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
000488 1540               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_SUSTAIN & 0x3F)+((no_loop<<6
                          M         list
                      01688 
                      01689         ;SKIP_ON_TRIGGER        TRIG_TRUE,TRIG_HORNS_ON         ;see if HORN OFF, just ATTACK/SUSTAIN (S
                      01690         PLAY            HNDL_SC0_HORN1_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00048A 1640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01691 
00048C                01692 CH2SC0_F2_HORN_001_EXIT
                      01693         END_SOUND 
00048C 0000               M                 DB      CMD_END_SND,0
                      01694 
                      01695 
                      01696         
                      01697          ;;;;;;;;;;;;;;end SF2 horns ;;;;;;;;;;;;;;;;;;;;
                      01698 
                      01699          
                      01700 ;UC2.3================
                      01701         
                      01702         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      01703         ;       THIS ROUTINE IS CH2_ high priority (PERSISTENT (NOT INTERRUPTABLE)
                      01704         ;---------DISTANCE indicator -change to MILEPOST message...?
                      01705         ;       ROUTINE WAS CHANNEL2 IN ver4. 
                      01706         ;----------------------------------------------------
                      01707         INITIATE_SOUND  TRIG_DISTANCE,NORMAL
00048E 0390               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_DISTANCE +((NORMAL) & 0x80)
  0000000D                M ICNT += 1
                          M 
                      01708         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING
000490 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      01709                 END_SOUND       
000492 0000               M                 DB      CMD_END_SND,0
                      01710                 
                      01711         MASK_COMPARE    WORK_SPEED,IMMED_DATA,+10,COMP_ALL,SKIP_LESS ;compare current speed 
000494 00FE 000A          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_SPEED,+10,COMP_ALL
                      01712                 BRANCH_TO       CH2SC0_AUTO_MOVING
                          M         
                          M         if      (CH2SC0_AUTO_MOVING-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH2SC0_AUTO_MOVING range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000498 A4C4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_AUTO_MOVING-SKEME_BASE)) & 0x0F) , low (CH2SC0_AUT
                          M         endif
                          M                 
                      01713         END_SOUND
00049A 0000               M                 DB      CMD_END_SND,0
                      01714         
                      01715         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR           ; Check if stopped
00049C 00FF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      01716                 BRANCH_TO       CH2SC0_AUTO_MOVING
                          M         
                          M         if      (CH2SC0_AUTO_MOVING-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH2SC0_AUTO_MOVING range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0004A0 A4C4               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_AUTO_MOVING-SKEME_BASE)) & 0x0F) , low (CH2SC0_AUT
                          M         endif
                          M                 
                      01717         ;BRANCH_TO      CH2SC0_AUTO_MOVING1
                      01718         
0004A2                01719 CH2SC0_AUTO_MOVING1
                      01720         END_SOUND
0004A2 0000               M                 DB      CMD_END_SND,0
                      01721         
0004A4                01722 CH2SC0_AUTO_MOVING
                      01723         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_UNCOUPLE_ON                              ;qualify with SF3 on
0004A4 1805               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_UNCOUPLE_ON 
                      01724                 PLAY    HNDL_SC0_COUPLER_SLACK,no_loop,loop_STD 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 56
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         list ;2 byte PLAY  [HANDLE]
0004A6 3F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_COUPLER_SLACK & 0x3F)+((no_loop<<6
                          M         list
                      01725                                         
0004A8                01726 CH13SC0_AUTO_GRADE_CROSSING     
                      01727         ;-------------------------------------------------
                      01728         ;  DISTANCE EVENT ! Play Horn Distraction
                      01729         ;-------------------------------------------------
                      01730         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x00,COMP_bit5,SKIP_SAME         ;SKIP_LESSSKIP_G
0004A8 B8FC DF00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x00,COMP_bit5
                      01731         ;Disable horn on distance event                 ;Skipped when ARG1 = ARG2
                      01732                 END_SOUND
0004AC 0000               M                 DB      CMD_END_SND,0
                      01733          
                      01734         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_LIGHTS_ON        ;when headlamp dark do not play crossing sound:
0004AE 0C05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_LIGHTS_ON 
                      01735                 END_SOUND
0004B0 0000               M                 DB      CMD_END_SND,0
                      01736                 
                      01737         ;TEST SPEED HERE:
                      01738         MASK_COMPARE    WORK_SPEED,IMMED_DATA,SCV_CUTOFF_SPEED_LOW,COMP_ALL,SKIP_GRTR           ; Check 
0004B2 00FF 00A9          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,SCV_CUTOFF_SPEED_LOW,COMP_ALL
                      01739                 END_SOUND
0004B6 0000               M                 DB      CMD_END_SND,0
                      01740                 
0004B8                01741 CH13SC0_AUTO_GRADE_CROSSING2
                      01742         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_UNCOUPLE_ON              ;When coupler link is raised do not play
0004B8 1805               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_UNCOUPLE_ON 
                      01743                 BRANCH_TO       CH13SC0_GRADE_CROSS_HORN
                          M         
                          M         if      (CH13SC0_GRADE_CROSS_HORN-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH13SC0_GRADE_CROSS_HORN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0004BA BEC4               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_GRADE_CROSS_HORN-SKEME_BASE)) & 0x0F) , low (CH13
                          M         endif
                          M                 
                      01744         END_SOUND
0004BC 0000               M                 DB      CMD_END_SND,0
                      01745         
                      01746 ;---------------
                      01747 ;UC2.4================
                      01748 ; CROSSING HORN WHEN AUTOMATIC notching selected in SCV155=0
0004BE                01749 CH13SC0_GRADE_CROSS_HORN        
                      01750         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_IBRAKES_ON              ;braking on, check stopped:
0004BE 1904               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_IBRAKES_ON 
                      01751                 END_SOUND
0004C0 0000               M                 DB      CMD_END_SND,0
                      01752                 
0004C2                01753 CH13SC0_XING_HORN_SELECT        
                      01754 
                      01755 ;HORN choices 0-1
0004C2                01756 CH13SC0_XING_HORN_0XX
                      01757         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME              ;SKIP_LE
0004C2 95FC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit1
                      01758                 BRANCH_TO               CH13SC0_XING_HORN_01X
                          M         
                          M         if      (CH13SC0_XING_HORN_01X-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH13SC0_XING_HORN_01X range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0004C6 36C5               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_XING_HORN_01X-SKEME_BASE)) & 0x0F) , low (CH13SC0
                          M         endif
                          M                 
                      01759 
                      01760 ;DEMO           bit1 disable DEMO ALL HornS/whistles Enabled=on=0 =2=disabled
                      01761         MASK_COMPARE    SCV_FEATURE3_DISABLE,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME                ;SKIP_LE
0004C8 BAFC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE3_DISABLE,0x00,COMP_bit1
                      01762                 BRANCH_TO       CH13SC0_XING_HORN_000                   ;Disabled       
                          M         
                          M         if      (CH13SC0_XING_HORN_000-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 57
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 error   CH13SC0_XING_HORN_000 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0004CC D4C4               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_XING_HORN_000-SKEME_BASE)) & 0x0F) , low (CH13SC0
                          M         endif
                          M                 
                      01763 ;-----
                      01764 ;CV150= xxxx-x00X
0004CE                01765 CH13SC0_XING_HORN_00X
                      01766         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit0,SKIP_SAME              ;SKIP_LE
0004CE 95FC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit0
                      01767                 BRANCH_TO               CH13SC0_XING_HORN_001
                          M         
                          M         if      (CH13SC0_XING_HORN_001-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH13SC0_XING_HORN_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0004D2 08C5               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_XING_HORN_001-SKEME_BASE)) & 0x0F) , low (CH13SC0
                          M         endif
                          M                 
                      01768 
                      01769 ;----
                      01770 ;*************************** CV150= 00 DEFAULT HORN
0004D4                01771 CH13SC0_XING_HORN_000
                      01772         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE_F     ;default VOLUME 
0004D4 80E1 0F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE
                      01773         PLAY            HNDL_SC0_HORN0_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0004D8 0E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01774         PLAY            HNDL_SC0_HORN0_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
0004DA 0F48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN0_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01775         PLAY            HNDL_SC0_HORN0_END,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
0004DC 1140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01776         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING
0004DE 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      01777                 BRANCH_TO       CH13SC0_XING_HORN_000_EXIT
                          M         
                          M         if      (CH13SC0_XING_HORN_000_EXIT-SKEME_BASE) > 0xFFF     ;check branch size in SCHEME
                          M                 error   CH13SC0_XING_HORN_000_EXIT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0004E0 00C5               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_XING_HORN_000_EXIT-SKEME_BASE)) & 0x0F) , low (CH
                          M         endif
                          M                 
                      01778         MASK_COMPARE    SCV_FEATURE4_DISABLE,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME                ;SKIP_LE
0004E2 BBFC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE4_DISABLE,0x00,COMP_bit1
                      01779                 BRANCH_TO       CH13SC0_XING_HORN_001           ;bypass disabled HiLo sounds:
                          M         
                          M         if      (CH13SC0_XING_HORN_001-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH13SC0_XING_HORN_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0004E6 08C5               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_XING_HORN_001-SKEME_BASE)) & 0x0F) , low (CH13SC0
                          M         endif
                          M                 
                      01780 
                      01781         DELAY_SOUND     DELAY_THIS,(150/24),DELAY_GLOBAL        
0004E8 06B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), ((150/24) & 0x7F)+DELAY_THIS 
                      01782         PLAY            HNDL_SC0_HORN0_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0004EA 0E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01783         PLAY            HNDL_SC0_HORN0_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
0004EC 0F48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN0_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01784         PLAY            HNDL_SC0_HORN0_END,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 58
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0004EE 1140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01785         DELAY_SOUND     DELAY_THIS,(150/24),DELAY_GLOBAL        
0004F0 06B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), ((150/24) & 0x7F)+DELAY_THIS 
                      01786         PLAY            HNDL_SC0_HORN0_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0004F2 0E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01787         PLAY            HNDL_SC0_HORN0_END,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
0004F4 1140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01788         DELAY_SOUND     DELAY_THIS,(150/24),DELAY_GLOBAL        
0004F6 06B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), ((150/24) & 0x7F)+DELAY_THIS 
                      01789         PLAY            HNDL_SC0_HORN0_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0004F8 0E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01790         PLAY            HNDL_SC0_HORN0_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
0004FA 0F48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN0_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01791         PLAY            HNDL_SC0_HORN0_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
0004FC 0F48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN0_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01792         PLAY            HNDL_SC0_HORN0_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0004FE 1140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01793         
000500                01794 CH13SC0_XING_HORN_000_EXIT
                      01795         MASK_COMPARE    SCV_FEATURE3_DISABLE,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME                ;SKIP_LE
000500 BAFC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE3_DISABLE,0x00,COMP_bit1
                      01796                 BRANCH_TO       CH13SC0_XING_HORN_001                   ;Disabled       
                          M         
                          M         if      (CH13SC0_XING_HORN_001-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH13SC0_XING_HORN_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000504 08C5               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_XING_HORN_001-SKEME_BASE)) & 0x0F) , low (CH13SC0
                          M         endif
                          M                 
                      01797         END_SOUND
000506 0000               M                 DB      CMD_END_SND,0
                      01798         
                      01799 ;*************************** CV150= 01 SECOND HORN
000508                01800 CH13SC0_XING_HORN_001
                      01801         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE_F     ;default VOLUME
000508 80E1 0F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE
                      01802         PLAY            HNDL_SC0_HORN1_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00050C 1340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01803         PLAY            HNDL_SC0_HORN1_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
00050E 1448               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN1_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01804         PLAY            HNDL_SC0_HORN1_END,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
000510 1640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01805         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING
000512 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      01806                 BRANCH_TO       CH13SC0_XING_HORN_001_EXIT
                          M         
                          M         if      (CH13SC0_XING_HORN_001_EXIT-SKEME_BASE) > 0xFFF     ;check branch size in SCHEME
                          M                 error   CH13SC0_XING_HORN_001_EXIT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000514 34C5               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_XING_HORN_001_EXIT-SKEME_BASE)) & 0x0F) , low (CH
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 59
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M                 
                      01807         MASK_COMPARE    SCV_FEATURE4_DISABLE,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME                ;SKIP_LE
000516 BBFC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE4_DISABLE,0x00,COMP_bit1
                      01808                 END_SOUND
00051A 0000               M                 DB      CMD_END_SND,0
                      01809 
                      01810         DELAY_SOUND     DELAY_THIS,(150/24),DELAY_GLOBAL        
00051C 06B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), ((150/24) & 0x7F)+DELAY_THIS 
                      01811         PLAY            HNDL_SC0_HORN1_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00051E 1340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01812         PLAY            HNDL_SC0_HORN1_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000520 1448               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN1_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01813         PLAY            HNDL_SC0_HORN1_END,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
000522 1640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01814         DELAY_SOUND     DELAY_THIS,(150/24),DELAY_GLOBAL        
000524 06B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), ((150/24) & 0x7F)+DELAY_THIS 
                      01815         PLAY            HNDL_SC0_HORN1_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000526 1340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01816         PLAY            HNDL_SC0_HORN1_END,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
000528 1640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01817         DELAY_SOUND     DELAY_THIS,(150/24),DELAY_GLOBAL        
00052A 06B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), ((150/24) & 0x7F)+DELAY_THIS 
                      01818         PLAY            HNDL_SC0_HORN1_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00052C 1340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_START & 0x3F)+((no_loop<<6)&
                          M         list
                      01819         PLAY            HNDL_SC0_HORN1_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
00052E 1448               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN1_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01820         PLAY            HNDL_SC0_HORN1_LOOP,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000530 1448               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_HORN1_LOOP & 0x3F)+((no_loop<<6)
                          M         list
                      01821         PLAY            HNDL_SC0_HORN1_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000532 1640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_END & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01822         
000534                01823 CH13SC0_XING_HORN_001_EXIT
                      01824         END_SOUND
000534 0000               M                 DB      CMD_END_SND,0
                      01825 
000536                01826 CH13SC0_XING_HORN_01X
                      01827         
                      01828 ;----------------- 
                      01829 ;UC2.5================
                      01830   INITIATE_SOUND        TRIG_ALTGCS_ON,NORMAL   ;RUN_WHILE_TRIG         ;continuous NON repeat version
000536 2290               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_ALTGCS_ON +((NORMAL) & 0x80)
  0000000E                M ICNT += 1
                          M 
                      01831          BRANCH_TO      CH13SC0_GRADE_CROSS_HORN
                          M         
                          M         if      (CH13SC0_GRADE_CROSS_HORN-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH13SC0_GRADE_CROSS_HORN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000538 BEC4               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_GRADE_CROSS_HORN-SKEME_BASE)) & 0x0F) , low (CH13
                          M         endif
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 60
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 
                      01832          
                      01833         END_SOUND               ;dummy inst to PAD file FOR NEW len     
00053A 0000               M                 DB      CMD_END_SND,0
                      01834         
                      01835         
                      01836                 
                      01837         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      01838         ;       THIS ROUTINE IS CH2_ high priority/whistle/horn (INTERRUPTABLE)
                      01839         ;       Direction changed
                      01840         ;       DO coupler clank and BRAKE if SF3 is ON,  is dir chng and last PK spd below e.g. CV151
                      01841         ;----------------------------------------------------
                      01842         INITIATE_SOUND  TRIG_DIRNOW_CHNG,NORMAL
00053C 0D90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_DIRNOW_CHNG +((NORMAL) & 0x80)
  0000000F                M ICNT += 1
                          M 
                      01843         ;play isolation/reverser:
                      01844         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B
00053E 80E1 0B90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B
                      01845         PLAY    HNDL_SC0_ISOLATION_REVERSE_FWD,no_loop,loop_STD         
                          M         list ;2 byte PLAY  [HANDLE]
000542 1E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ISOLATION_REVERSE_FWD & 0x3F)+((no
                          M         list
                      01846         
                      01847         ;Load Control works with continuous sounds in voice 1   
                      01848         ;triggers on reversal   
                      01849         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,SCALE_INCR_1,SCALE_MAX ;revised 5/29/17
000544 BCE6 0F01          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,SCALE_INCR_1,S
                      01850 ;---REDUCE DELTA HERE
                      01851         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,NOTCH4,COMP_ALL,SKIP_LESS           ;prevent underfl
000548 0BFE 0030          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_SPEED_DELTA,NOTCH4,COMP_ALL
                      01852                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH3,0     ; set Manual Not
00054C 0BE6 0020          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,NOTCH3,0
                      01853         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;prevent
000550 0BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      01854                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   
000554 ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      01855 ;---
                      01856         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,MERGE_ALL_MASK  ;OR=SETt
000558 5EE6 0020          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,M
                      01857         ;---------------------------------------------
                      01858         ;  Direction change and SF3 on DO coupler clank and BRAKE if SF3 is ON,  is dir chng and last PK
                      01859         ;---------------------------------------------
00055C                01860 CH2SC0_DIRECTION_CHANGED
                      01861         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MASK2,MERGE_ALL_MASK     
00055C 3EE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MA
                      01862         MASK_COMPARE    WORK_PEAK_SPD,IMMED_DATA,0,COMP_ALL,SKIP_SAME   ;if PK_SPD=0, no MOVEMENT,no BRA
000560 19FC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_PEAK_SPD,0,COMP_ALL
                      01863                 SKIP_ON_TRIGGER TRIG_TRUE,TRIG_IBRAKES_ON       ;qualify with BRAKE ON          ;Skipped
000564 1905               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_IBRAKES_ON 
                      01864 ;-                      THEN:
000566                01865 CH2SC0_COUPLER_INACTIVE ;NOTE DOUBLE NESTING IFFS
                      01866                         BRANCH_TO       CH2SC0_DIR_CLR_PEAK_SPD         ;SF3=COUPLER OFF or PK_SPD=0, ju
                          M         
                          M         if      (CH2SC0_DIR_CLR_PEAK_SPD-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH2SC0_DIR_CLR_PEAK_SPD range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000566 82C5               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_DIR_CLR_PEAK_SPD-SKEME_BASE)) & 0x0F) , low (CH2SC
                          M         endif
                          M                 
                      01867                                 ; just reset PKD_SPD at DIR change
                      01868 
                      01869 ;----------------------------------------------------
                      01870 ;at this direction change: SF3 is ON and WORK_PEAK_SPD is not ZERO
                      01871 ;----------------------------------------------------
000568                01872 CH2SC0_COUPLER_TEST
                      01873         MASK_COMPARE    WORK_PEAK_SPD,TARGET_DATA,SCV_COUPLER_THRESHOLD,COMP_ALL,SKIP_LESS ;SKIP_SAME ;S
000568 19FA 0096          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+TARGET_DATA,WORK_PEAK_SPD,SCV_COUPLER_THRESHOLD,COMP_
                      01874                 BRANCH_TO       CH2SC0_DIR_CLR_PEAK_SPD                 ;Skipped when ARG1 < ARG2       
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 61
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         
                          M         if      (CH2SC0_DIR_CLR_PEAK_SPD-SKEME_BASE) > 0xFFF        ;check branch size in SCHEME
                          M                 error   CH2SC0_DIR_CLR_PEAK_SPD range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00056C 82C5               M                 DB      CMD_GOTO_SND + ((high (CH2SC0_DIR_CLR_PEAK_SPD-SKEME_BASE)) & 0x0F) , low (CH2SC
                          M         endif
                          M                 
                      01875 ;----------------------------------------------------
                      01876 ;here WORK_PEAK_SPD is less than the SCV chosen, so BRAKE an COUPLE can fire
                      01877 ;----------------------------------------------------
00056E                01878 CH2SC0_AUTO_COUPLER
                      01879         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
00056E 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      01880                 LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
000570 80E1 0B8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
                      01881         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
000574 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      01882                 PLAY    HNDL_SC0_BRAKE_SET,no_loop,loop_STD                             ;do PLAY_ENGINE_
                          M         list ;2 byte PLAY  [HANDLE]
000576 2140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_SET & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01883         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x18,0   ;decrease
000578 BDE6 00E8          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x18,0
                      01884         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_B ;CV166 A6       Coupler 
00057C 80E1 0BB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_B
                      01885         PLAY    HNDL_SC0_COUPLER_CLASH,no_loop,loop_STD                 ;followed by COUPLER crash at DI
                          M         list ;2 byte PLAY  [HANDLE]
000580 3E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_COUPLER_CLASH & 0x3F)+((no_loop<<6
                          M         list
                      01886         
000582                01887 CH2SC0_DIR_CLR_PEAK_SPD
                      01888         ;;play reverser:
                      01889         ;LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SCALE_B
                      01890         ;PLAY   HNDL_SC0_ISOLATION_REVERSE_REV,no_loop,loop_STD         
                      01891         PLAY    HNDL_SC0_ISOLATION_CENTER,no_loop,loop_STD              
                          M         list ;2 byte PLAY  [HANDLE]
000582 2040               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ISOLATION_CENTER & 0x3F)+((no_loop
                          M         list
                      01892 
                      01893         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+WORK_PEAK_SPD,00,0  ;clear WORK_PEAK_SPD
000584 19E6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_PEAK_SPD,00,0
                      01894         END_SOUND
000588 0000               M                 DB      CMD_END_SND,0
                      01895 
                      01896         
                      01897 ;------------------------------
                      01898 ;       TIMED CYCLE OF DRYER (TIMER SCAT0)
                      01899 ;SCATTER chnL 0 is automatic air DRYER
                      01900 ;----------------------------------------------------
                      01901 
                      01902 ;UC2.6================
                      01903         INITIATE_SOUND  TRIG_SCAT0,NORMAL
00058A 6090               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_SCAT0 +((NORMAL) & 0x80)
  00000010                M ICNT += 1
                          M 
00058C                01904 CH15SC0_PLAY_DRYER      
                      01905         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,COMP_MASK0,~COMP_MASK0,SKIP_SAME     ;bit0   COMPRESS
00058C 1EFC FE01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,COMP_MASK0,~COMP_MASK0
                      01906                 END_SOUND
000590 0000               M                 DB      CMD_END_SND,0
                      01907         ;interlock scatter events here in handler to prevent play after disable:
                      01908         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
000592 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      01909                 END_SOUND                       
000596 0000               M                 DB      CMD_END_SND,0
                      01910 
                      01911         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FANS_ON ;qualify with SF11 OFF
000598 1A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_FANS_ON 
                      01912                 END_SOUND
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 62
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00059A 0000               M                 DB      CMD_END_SND,0
                      01913                 
                      01914         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_DRYER_VOLUME,SCALE_F
00059C 80E1 0FAD          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_DRYER_VOLUME,SCALE_F
                      01915         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING
0005A0 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      01916                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_DRYER_VOLUME,SCALE_E
0005A2 80E1 0EAD          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_DRYER_VOLUME,SCALE_E
                      01917         MASK_COMPARE COUNT_LOOP,IMMED_DATA,0,COMP_ALL,SKIP_GRTR    ;PLAY if Equal
0005A6 1AFF 0000          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,COUNT_LOOP,0,COMP_ALL
                      01918                 BRANCH_TO       CH15SC0_PLAY_DRYER1
                          M         
                          M         if      (CH15SC0_PLAY_DRYER1-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER1 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0005AA B8C5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER1-SKEME_BASE)) & 0x0F) , low (CH15SC0_P
                          M         endif
                          M                 
                      01919         MASK_COMPARE COUNT_LOOP,IMMED_DATA,1,COMP_ALL,SKIP_GRTR    ;PLAY if Equal
0005AC 1AFF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,COUNT_LOOP,1,COMP_ALL
                      01920                 BRANCH_TO       CH15SC0_PLAY_DRYER2
                          M         
                          M         if      (CH15SC0_PLAY_DRYER2-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0005B0 BAC5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER2-SKEME_BASE)) & 0x0F) , low (CH15SC0_P
                          M         endif
                          M                 
                      01921         MASK_COMPARE COUNT_LOOP,IMMED_DATA,2,COMP_ALL,SKIP_GRTR    ;PLAY if Equal
0005B2 1AFF 0002          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,COUNT_LOOP,2,COMP_ALL
                      01922                 BRANCH_TO       CH15SC0_PLAY_DRYER3
                          M         
                          M         if      (CH15SC0_PLAY_DRYER3-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER3 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0005B6 BCC5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER3-SKEME_BASE)) & 0x0F) , low (CH15SC0_P
                          M         endif
                          M                 
                      01923                 
0005B8                01924 CH15SC0_PLAY_DRYER1
                      01925         PLAY    HNDL_SC0_AIR_DRYER1,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0005B8 3740               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIR_DRYER1 & 0x3F)+((no_loop<<6)&0
                          M         list
                      01926         
0005BA                01927 CH15SC0_PLAY_DRYER2
                      01928         PLAY    HNDL_SC0_AIR_DRYER2,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0005BA 3840               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIR_DRYER2 & 0x3F)+((no_loop<<6)&0
                          M         list
                      01929         
0005BC                01930 CH15SC0_PLAY_DRYER3
                      01931         PLAY    HNDL_SC0_AIR_DRYER3,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0005BC 3940               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIR_DRYER3 & 0x3F)+((no_loop<<6)&0
                          M         list
                      01932                         
                      01933         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+COUNT_LOOP,+0x1,4        ; Increment 
0005BE BAE6 0401          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+COUNT_LOOP,+0x1,4
                      01934 
                      01935         END_SOUND
0005C2 0000               M                 DB      CMD_END_SND,0
                      01936 
                      01937         
                      01938 ;----------------------------------------------------
                      01939 ;       TIMED CYCLE AIR SOUNDS (TIMER SCAT4) 
                      01940 ;----SCATTER chnL 1 is automatic AIR  DRYER at END of COMPRESSOR cycle on CHNL3
                      01941 ;----------------------------------------------------
                      01942         INITIATE_SOUND  TRIG_SCAT4,NOT_TRIG     ;B phase of SCATTER4    ;NORMAL         ;RUN_WHILE_TRIG 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 63
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005C4 E490               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_SCAT4 +((NOT_TRIG) & 0x80)
  00000011                M ICNT += 1
                          M 
                      01943         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x12,0   ;decrease
0005C6 BDE6 00EE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x12,0
                      01944         MASK_COMPARE    VARY_LOAD,IMMED_DATA,8,COMP_ALL,SKIP_GRTR               ;SKIP
0005CA 1CFF 0008          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,VARY_LOAD,8,COMP_ALL
                      01945                 BRANCH_TO       CH15SC0_PLAY_DRYER                      
                          M         
                          M         if      (CH15SC0_PLAY_DRYER-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0005CE 8CC5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER-SKEME_BASE)) & 0x0F) , low (CH15SC0_PL
                          M         endif
                          M                 
                      01946         END_SOUND
0005D0 0000               M                 DB      CMD_END_SND,0
                      01947 
                      01948 ;;;;;;;;;;;;;;;;;;BRAKING HERE ;;;;;;;;;;;;;;;;;;;;;;;;;
                      01949 ;-------------------------------------------------
                      01950 ;  FUNCTION KEY SF10 - BRAKE SOUNDS !(INTERRUPTABLE)
                      01951 ;       continuous when moving repeat version
                      01952 ;       moved back to CH3 7/26/17 to make brake to stop work consistently
                      01953 ;-------------------------------------------------
                      01954         INITIATE_SOUND TRIG_IBRAKES_ON,NORMAL   ;;BRAKE +NO_PREEMPT_TRIG        ; Play brake sound when 
0005D2 1990               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_IBRAKES_ON +((NORMAL) & 0x80)
  00000012                M ICNT += 1
                          M 
                      01955         ;Set AUTOMATIC BRAKING INTERLOCK On =1
                      01956         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MASK2,MERGE_ALL_MASK     
0005D4 3EE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MA
                      01957 
                      01958         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
0005D8 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      01959                 END_SOUND        ;interlock is 00, freeze               ;Skipped when ARG1 = ARG2
0005DC 0000               M                 DB      CMD_END_SND,0
                      01960 
                      01961         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_B
0005DE 80E1 0BB5          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_B
                      01962         PLAY    HNDL_SC0_BRAKE_BAIL_OFFON,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0005E2 2440               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_BAIL_OFFON & 0x3F)+((no_loop
                          M         list
                      01963 
                      01964         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING           ;skip when moving...
0005E4 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      01965                 BRANCH_TO       CH3SC0_NO_MOVING_BRAKE
                          M         
                          M         if      (CH3SC0_NO_MOVING_BRAKE-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH3SC0_NO_MOVING_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0005E6 46C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_NO_MOVING_BRAKE-SKEME_BASE)) & 0x0F) , low (CH3SC0
                          M         endif
                          M                 
                      01966         ;BRANCH_TO      CH3SC0_MOVING_BRAKE
                      01967         
                      01968         ;=====================  Sometimes WORK_SPEED does NOT reset to zero when the servo is not
                      01969         ;                                               moving. Neither will TRIG_MOVING be any differen
                      01970         ;                                               So, care must be taken to not have brake sounds 
                      01971         ;                                               standstill...
                      01972         ;=====================
0005E8                01973 CH3SC0_MOVING_BRAKE
                      01974                 
                      01975         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
0005E8 80E1 0B8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_B
                      01976         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
0005EC 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      01977                 PLAY    HNDL_SC0_BRAKE_SET,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 64
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0005EE 2140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_SET & 0x3F)+((no_loop<<6)&0x
                          M         list
                      01978                                                                           
                      01979         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x011,0   ;decrease
0005F0 BDE6 00EF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x011,0
                      01980         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_F
0005F4 80E1 0F8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_F
                      01981         PLAY    HNDL_SC0_ENGINE_BRAKE_BEGIN,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0005F8 1A40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_BEGIN & 0x3F)+((no_lo
                          M         list
                      01982         PLAY    HNDL_SC0_ENGINE_BRAKE_LOOP1,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0005FA 1B40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_LOOP1 & 0x3F)+((no_lo
                          M         list
                      01983         
0005FC                01984 CH3SC0_SERVO_LOCK       
                      01985         ;bit3 disable DO NOT USE ENGINE BRAKE FEATURE -- Operator must slow engine...
                      01986         MASK_COMPARE    SCV_FEATURE3_DISABLE,IMMED_DATA,0x01,COMP_bit3,SKIP_SAME                ;SKIP_LE
0005FC BAFC F701          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE3_DISABLE,0x01,COMP_bit3
                      01987                 BRANCH_TO       CH3SC0_BRAKE_TO_STOP                    ;Disabled       
                          M         
                          M         if      (CH3SC0_BRAKE_TO_STOP-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_TO_STOP range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000600 26C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_TO_STOP-SKEME_BASE)) & 0x0F) , low (CH3SC0_B
                          M         endif
                          M                 
                      01988 
                      01989         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING           ;skip when moving...
000602 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      01990                 BRANCH_TO       CH3SC0_BRAKE_LOCK
                          M         
                          M         if      (CH3SC0_BRAKE_LOCK-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_LOCK range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000604 06C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_LOCK-SKEME_BASE)) & 0x0F) , low (CH3SC0_BRAK
                          M         endif
                          M                 
                      01991         
000606                01992 CH3SC0_BRAKE_LOCK
                      01993         ;APPLY ENGINE BRAKE HERE:
                      01994         PLAY    HNDL_SC0_ENGINE_BRAKE_LOOP1,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000606 1B40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_LOOP1 & 0x3F)+((no_lo
                          M         list
                      01995         PLAY    HNDL_SC0_ENGINE_BRAKE_LOOP2,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000608 1C40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_LOOP2 & 0x3F)+((no_lo
                          M         list
                      01996 
                      01997         ;SERVO_DISABLE
                      01998         ;********************* THE MOTOR WILL NOT RUN UNTIL AFTER BRAKE IS RELEASED ********************
                      01999         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MASK,MERGE_ALL_MASK       
00060A 27E6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+WORK_STATUS_BITS,~WKSB_RUN_MAS
                      02000         ;;;;;;;;;;;;;;;WKSB_RUN_BIT     EQU     2               ;0= stop motor PWM, non-primemover sound
                      02001 ;---
00060E                02002 CH3SC0_BRAKE_STOPPING   
                      02003         PLAY    HNDL_SC0_ENGINE_BRAKE_LOOP1,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00060E 1B40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_LOOP1 & 0x3F)+((no_lo
                          M         list
                      02004         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING           ;skip when moving...
000610 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02005                 BRANCH_TO       CH3SC0_BRAKE_STOPPED 
                          M         
                          M         if      (CH3SC0_BRAKE_STOPPED-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_STOPPED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 65
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000612 3EC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_STOPPED-SKEME_BASE)) & 0x0F) , low (CH3SC0_B
                          M         endif
                          M                 
                      02006         ;improve by motor lock and real brake slow down to stop (todo 3/8/17)   johnm
                      02007         MASK_COMPARE    WORK_SPEED,TARGET_DATA,0x15,COMP_ALL,SKIP_LESS          ; Check if slowed >9
000614 00FA 0015          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+TARGET_DATA,WORK_SPEED,0x15,COMP_ALL
                      02008                 BRANCH_TO       CH3SC0_BRAKE_STOPPING2
                          M         
                          M         if      (CH3SC0_BRAKE_STOPPING2-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_STOPPING2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000618 1CC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_STOPPING2-SKEME_BASE)) & 0x0F) , low (CH3SC0
                          M         endif
                          M                 
                      02009         BRANCH_TO       CH3SC0_BRAKE_STOPPED 
                          M         
                          M         if      (CH3SC0_BRAKE_STOPPED-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_STOPPED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00061A 3EC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_STOPPED-SKEME_BASE)) & 0x0F) , low (CH3SC0_B
                          M         endif
                          M                 
                      02010         
00061C                02011 CH3SC0_BRAKE_STOPPING2
                      02012         MASK_COMPARE    WORK_SPEED,TARGET_DATA,0x14,COMP_ALL,SKIP_GRTR          ; Check if slowed >9
00061C 00FB 0014          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+TARGET_DATA,WORK_SPEED,0x14,COMP_ALL
                      02013                 BRANCH_TO       CH3SC0_BRAKE_STOPPED
                          M         
                          M         if      (CH3SC0_BRAKE_STOPPED-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_STOPPED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000620 3EC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_STOPPED-SKEME_BASE)) & 0x0F) , low (CH3SC0_B
                          M         endif
                          M                 
                      02014         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING           ;skip when moving...
000622 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02015                 BRANCH_TO       CH3SC0_BRAKE_STOPPED 
                          M         
                          M         if      (CH3SC0_BRAKE_STOPPED-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_STOPPED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000624 3EC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_STOPPED-SKEME_BASE)) & 0x0F) , low (CH3SC0_B
                          M         endif
                          M                 
                      02016                 
000626                02017 CH3SC0_BRAKE_TO_STOP
                      02018         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x12,0   ;decrease
000626 BDE6 00EE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x12,0
                      02019 
                      02020         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL           
00062A A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+WORK_SPEED,MAXP_DIESEL,DI
                      02021         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   
00062E 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02022                 BRANCH_TO       CH3SC0_BRAKE_STOPPED 
                          M         
                          M         if      (CH3SC0_BRAKE_STOPPED-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_STOPPED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000630 3EC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_STOPPED-SKEME_BASE)) & 0x0F) , low (CH3SC0_B
                          M         endif
                          M                 
                      02023                 
                      02024         PLAY    HNDL_SC0_ENGINE_BRAKE_LOOP2,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000632 1C48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_ENGINE_BRAKE_LOOP2 & 0x3F)+((no_
                          M         list
                      02025         PLAY    HNDL_SC0_ENGINE_BRAKE_LOOP1,no_loop,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000634 1B48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_ENGINE_BRAKE_LOOP1 & 0x3F)+((no_
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 66
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         list
                      02026                 
                      02027         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_IBRAKES_ON
000636 1904               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_IBRAKES_ON 
                      02028                 BRANCH_TO       CH3SC0_NO_MOVING_BRAKE 
                          M         
                          M         if      (CH3SC0_NO_MOVING_BRAKE-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH3SC0_NO_MOVING_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000638 46C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_NO_MOVING_BRAKE-SKEME_BASE)) & 0x0F) , low (CH3SC0
                          M         endif
                          M                 
                      02029  
                      02030         ;loop here for long stops
                      02031         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING  
00063A 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02032                 BRANCH_TO       CH3SC0_BRAKE_TO_STOP    ;LOOP UNTIL SLOWED TO NEAR STOP..........
                          M         
                          M         if      (CH3SC0_BRAKE_TO_STOP-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKE_TO_STOP range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00063C 26C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKE_TO_STOP-SKEME_BASE)) & 0x0F) , low (CH3SC0_B
                          M         endif
                          M                 
                      02033                 
00063E                02034 CH3SC0_BRAKE_STOPPED
                      02035         PLAY    HNDL_SC0_ENGINE_BRAKE_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00063E 1D40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_END & 0x3F)+((no_loop
                          M         list
                      02036         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x15,0   ;decrease
000640 BDE6 00EB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x15,0
                      02037 
                      02038         PLAY    HNDL_SC0_BRAKE_SET,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000644 2140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_SET & 0x3F)+((no_loop<<6)&0x
                          M         list
                      02039 
000646                02040 CH3SC0_NO_MOVING_BRAKE                            
000646                02041 CH3SC0_NO_SERVO_LOCK
                      02042         ;Set AUTOMATIC BRAKING INTERLOCK On =1
                      02043         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MASK2,MERGE_ALL_MASK     
000646 3EE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MA
                      02044 
                      02045         ;let underflow:
                      02046         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_4,SCALE_MAX        ;revised
00064A BCE6 0FFC          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,-SCALE_INCR_4,
                      02047         MASK_COMPARE    VARY_LOAD,IMMED_DATA,SCV_LOAD_MIN,COMP_ALL,SKIP_GRTR            ;SKIP
00064E 1CFF 009E          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,VARY_LOAD,SCV_LOAD_MIN,COMP_ALL
                      02048                 BRANCH_TO       CH3SC0_NO_UNDERFLOW_LOCK
                          M         
                          M         if      (CH3SC0_NO_UNDERFLOW_LOCK-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH3SC0_NO_UNDERFLOW_LOCK range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000652 58C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_NO_UNDERFLOW_LOCK-SKEME_BASE)) & 0x0F) , low (CH3S
                          M         endif
                          M                 
000654                02049 CH3SC0_FIX_UNDERFLOW_LOCK
                      02050         LOAD_MODIFIER   MTYPE_WORK_IMMED,VARY_LOAD,SCV_LOAD_MIN,MERGE_ALL_MASK  ;reset to min load
000654 1CE6 009E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),VARY_LOAD,SCV_LOAD_MIN,MERGE_ALL_MASK
                      02051         
000658                02052 CH3SC0_NO_UNDERFLOW_LOCK
                      02053         END_SOUND
000658 0000               M                 DB      CMD_END_SND,0
                      02054          
                      02055          
                      02056           ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02057         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02058         ;       THIS ROUTINE IS CH3_ braking (NOT INTERRUPTABLE)
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 67
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02059         ;  FUNCTION KEY SF10 - BRAKE SOUNDS !
                      02060         ;continuous when moving repeat version
                      02061         ;-------------------------------------------------
                      02062         INITIATE_SOUND TRIG_IBRAKES_ON,NOT_TRIG+NO_PREEMPT_TRIG         ; Play brake RELEASE when BRAKE 
00065A 9994               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG+NO_PREEMPT_TRIG) & 0x07), TRIG_IBRAKES_ON +((NOT_T
  00000013                M ICNT += 1
                          M 
                      02063         ;---------------------------------------------
                      02064         ; toots sound triggered by BRAKE OFF
                      02065         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_B
00065C 80E1 0BB5          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_B
                      02066         PLAY    HNDL_SC0_BRAKE_BAIL_OFFOFF,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000660 2340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_BAIL_OFFOFF & 0x3F)+((no_loo
                          M         list
                      02067         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x17,0   ;decrease
000662 BDE6 00E9          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x17,0
                      02068 
                      02069         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x00,COMP_bit4,SKIP_SAME         ;SKIP_LESSSKIP_G
000666 B8FC EF00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x00,COMP_bit4
                      02070                 BRANCH_TO       CH3SC0_EXIT_TOOT        
                          M         
                          M         if      (CH3SC0_EXIT_TOOT-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH3SC0_EXIT_TOOT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00066A C4C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_EXIT_TOOT-SKEME_BASE)) & 0x0F) , low (CH3SC0_EXIT_
                          M         endif
                          M                 
                      02071         
                      02072         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_UNCOUPLE_ON             ; Skip if SF3 is not currently ON -- TOO
00066C 1804               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_UNCOUPLE_ON 
                      02073                 BRANCH_TO       CH3SC0_EXIT_TOOT        
                          M         
                          M         if      (CH3SC0_EXIT_TOOT-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH3SC0_EXIT_TOOT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00066E C4C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_EXIT_TOOT-SKEME_BASE)) & 0x0F) , low (CH3SC0_EXIT_
                          M         endif
                          M                 
                      02074                 
                      02075         MASK_COMPARE WORK_STATUS_BITS,IMMED_DATA,0x02,~WKSB_DIRNOW_MASK,SKIP_SAME               ; Skip t
000670 07FC FD02          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,0x02,~WKSB_DIRNOW_MASK
                      02076                 BRANCH_TO       CH3SC0_BACKUP
                          M         
                          M         if      (CH3SC0_BACKUP-SKEME_BASE) > 0xFFF                  ;check branch size in SCHEME
                          M                 error   CH3SC0_BACKUP range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000674 9EC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BACKUP-SKEME_BASE)) & 0x0F) , low (CH3SC0_BACKUP-S
                          M         endif
                          M                 
                      02077                 
                      02078         ;play isolation/reverser:
                      02079         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SCALE_B
000676 80E1 0BB4          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SC
                      02080         PLAY    HNDL_SC0_ISOLATION_REVERSE_REV,no_loop,loop_STD         
                          M         list ;2 byte PLAY  [HANDLE]
00067A 1F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ISOLATION_REVERSE_REV & 0x3F)+((no
                          M         list
                      02081         ;               TWO_TOOTS
                      02082         ;---------------------------------------------
                      02083         ;  Forward is two toots                
                      02084         ;---------------------------------------------
                      02085         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE_F             ;Set con
00067C 80E1 0F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE
                      02086                 ;HORN SELECTED CV150:
                      02087         ;                       Decimal HEX                     Bit
                      02088         ;                                                               7654 3210
                      02089         ;       1               0               0x00            0000 0000
                      02090         ;       2               1               0x01            0000 0001
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 68
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02091         ;       3               2               0x02            0000 0010
                      02092         ;       4               3               0x03            0000 0011
                      02093         ;       5               4               0x04            0000 0100
                      02094         ;               TOOT_SELECT
                      02095                                                 
000680                02096 CH13SC0_TOOT_SELECT     
                      02097 ;HORN choices 5-8
                      02098         ;MASK_COMPARE   SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit3,SKIP_SAME              ;SKIP_LE
                      02099         ;       BRANCH_TO               CH13SC0_TOOT_1XXX
                      02100         ;MASK_COMPARE   SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit2,SKIP_SAME              ;SKIP_LE
                      02101         ;       BRANCH_TO               CH13SC0_TOOT_1XX
                      02102                 
                      02103 ;HORN choices 0-4
000680                02104 CH13SC0_TOOT_0XX
                      02105         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME              ;SKIP_LE
000680 95FC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit1
                      02106                 BRANCH_TO               CH13SC0_TOOT_01X
                          M         
                          M         if      (CH13SC0_TOOT_01X-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH13SC0_TOOT_01X range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000684 9EC6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_TOOT_01X-SKEME_BASE)) & 0x0F) , low (CH13SC0_TOOT
                          M         endif
                          M                 
                      02107 
                      02108 ;DEMO           bit1 disable DEMO ALL HornS/whistles Enabled=on=0 =2=disabled
                      02109         MASK_COMPARE    SCV_FEATURE3_DISABLE,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME                ;SKIP_LE
000686 BAFC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE3_DISABLE,0x00,COMP_bit1
                      02110                 BRANCH_TO       CH13SC0_TOOT_000                        ;Disabled       
                          M         
                          M         if      (CH13SC0_TOOT_000-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH13SC0_TOOT_000 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00068A 92C6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_TOOT_000-SKEME_BASE)) & 0x0F) , low (CH13SC0_TOOT
                          M         endif
                          M                 
                      02111 
00068C                02112 CH13SC0_TOOT_00X
                      02113         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit0,SKIP_SAME              ;SKIP_LE
00068C 95FC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit0
                      02114                 BRANCH_TO               CH13SC0_TOOT_001
                          M         
                          M         if      (CH13SC0_TOOT_001-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH13SC0_TOOT_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000690 98C6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_TOOT_001-SKEME_BASE)) & 0x0F) , low (CH13SC0_TOOT
                          M         endif
                          M                 
                      02115                 
                      02116 ;DEFAULT HORN:  
000692                02117 CH13SC0_TOOT_000
                      02118         PLAY    HNDL_SC0_HORN0_SHORT,no_loop,loop_STD                           
                          M         list ;2 byte PLAY  [HANDLE]
000692 1240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
                      02119         PLAY    HNDL_SC0_HORN0_SHORT,no_loop,loop_STD                           
                          M         list ;2 byte PLAY  [HANDLE]
000694 1240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
                      02120         BRANCH_TO       CH3SC0_EXIT_TOOT
                          M         
                          M         if      (CH3SC0_EXIT_TOOT-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH3SC0_EXIT_TOOT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000696 C4C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_EXIT_TOOT-SKEME_BASE)) & 0x0F) , low (CH3SC0_EXIT_
                          M         endif
                          M                 
                      02121         
000698                02122 CH13SC0_TOOT_001
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 69
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02123         PLAY    HNDL_SC0_HORN1_SHORT,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000698 1740               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
                      02124         PLAY    HNDL_SC0_HORN1_SHORT,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00069A 1740               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
                      02125         BRANCH_TO       CH3SC0_EXIT_TOOT
                          M         
                          M         if      (CH3SC0_EXIT_TOOT-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH3SC0_EXIT_TOOT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00069C C4C6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_EXIT_TOOT-SKEME_BASE)) & 0x0F) , low (CH3SC0_EXIT_
                          M         endif
                          M                 
                      02126  
00069E                02127 CH13SC0_TOOT_01X
                      02128 
00069E                02129 CH3SC0_BACKUP
                      02130         ;play isolation/reverser:
                      02131         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SCALE_B
00069E 80E1 0BB4          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SC
                      02132         PLAY    HNDL_SC0_ISOLATION_REVERSE_REV,no_loop,loop_STD         
                          M         list ;2 byte PLAY  [HANDLE]
0006A2 1F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ISOLATION_REVERSE_REV & 0x3F)+((no
                          M         list
                      02133 
                      02134         ;---------------------------------------------
                      02135         ;  Reverse is three toots     SO, PLAY ONE AND BRANCH TO TWO           
                      02136         ;---------------------------------------------
                      02137         GENERATE_TRIGGER  TRIG_SAND_ON          ;sander under wheels for startup        
0006A4 1DB1               M                 DB      CMD_BLIP_TRIGGER, TRIG_SAND_ON 
                      02138         ;               ONE_TOOT
                      02139         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE_F             ;Set con
0006A6 80E1 0F8D          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_HORNWHISTLE_VOLUME,SCALE
                      02140         
                      02141         ;HORN choices 5-8
                      02142         ;MASK_COMPARE   SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit3,SKIP_SAME              ;SKIP_LE
                      02143         ;       BRANCH_TO               CH13SC0_RTOOT_1XXX
                      02144         ;MASK_COMPARE   SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit2,SKIP_SAME              ;SKIP_LE
                      02145         ;       BRANCH_TO               CH13SC0_RTOOT_1XX
                      02146                 
                      02147 ;HORN choices 0-4
0006AA                02148 CH13SC0_RTOOT_0XX
                      02149         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME              ;SKIP_LE
0006AA 95FC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit1
                      02150                 BRANCH_TO               CH13SC0_RTOOT_01X
                          M         
                          M         if      (CH13SC0_RTOOT_01X-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH13SC0_RTOOT_01X range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006AE C4C6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_RTOOT_01X-SKEME_BASE)) & 0x0F) , low (CH13SC0_RTO
                          M         endif
                          M                 
                      02151 
                      02152 ;DEMO           bit1 disable DEMO ALL HornS/whistles Enabled=on=0 =2=disabled
                      02153         MASK_COMPARE    SCV_FEATURE3_DISABLE,IMMED_DATA,0x00,COMP_bit1,SKIP_SAME                ;SKIP_LE
0006B0 BAFC FD00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE3_DISABLE,0x00,COMP_bit1
                      02154                 BRANCH_TO       CH13SC0_RTOOT_000                       ;Disabled       
                          M         
                          M         if      (CH13SC0_RTOOT_000-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH13SC0_RTOOT_000 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006B4 BCC6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_RTOOT_000-SKEME_BASE)) & 0x0F) , low (CH13SC0_RTO
                          M         endif
                          M                 
                      02155 
0006B6                02156 CH13SC0_RTOOT_00X
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 70
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02157         MASK_COMPARE    SCV_HORNWHISTLE_SELECT,IMMED_DATA,0x00,COMP_bit0,SKIP_SAME              ;SKIP_LE
0006B6 95FC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_HORNWHISTLE_SELECT,0x00,COMP_bit0
                      02158                 BRANCH_TO               CH13SC0_RTOOT_001
                          M         
                          M         if      (CH13SC0_RTOOT_001-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH13SC0_RTOOT_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006BA C0C6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_RTOOT_001-SKEME_BASE)) & 0x0F) , low (CH13SC0_RTO
                          M         endif
                          M                 
                      02159                 
                      02160 ;DEFAULT HORN:  
0006BC                02161 CH13SC0_RTOOT_000
                      02162         PLAY    HNDL_SC0_HORN0_SHORT,no_loop,loop_STD                           
                          M         list ;2 byte PLAY  [HANDLE]
0006BC 1240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN0_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
                      02163         BRANCH_TO       CH13SC0_TOOT_000
                          M         
                          M         if      (CH13SC0_TOOT_000-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH13SC0_TOOT_000 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006BE 92C6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_TOOT_000-SKEME_BASE)) & 0x0F) , low (CH13SC0_TOOT
                          M         endif
                          M                 
                      02164         
0006C0                02165 CH13SC0_RTOOT_001
                      02166         PLAY    HNDL_SC0_HORN1_SHORT,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0006C0 1740               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HORN1_SHORT & 0x3F)+((no_loop<<6)&
                          M         list
                      02167         BRANCH_TO       CH13SC0_TOOT_001
                          M         
                          M         if      (CH13SC0_TOOT_001-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH13SC0_TOOT_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006C2 98C6               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_TOOT_001-SKEME_BASE)) & 0x0F) , low (CH13SC0_TOOT
                          M         endif
                          M                 
                      02168  
0006C4                02169 CH13SC0_RTOOT_01X
                      02170 
0006C4                02171 CH3SC0_EXIT_TOOT
                      02172         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_A
0006C4 80E1 0AB5          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_A
                      02173         PLAY    HNDL_SC0_BRAKE_BAIL_OFFOFF,no_loop,loop_STD     
                          M         list ;2 byte PLAY  [HANDLE]
0006C8 2340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_BAIL_OFFOFF & 0x3F)+((no_loo
                          M         list
                      02174         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x18,0   ;decrease
0006CA BDE6 00E8          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x18,0
                      02175         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_A
0006CE 80E1 0AB5          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_A
                      02176         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
0006D2 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      02177                 END_SOUND        ;interlock is 00, freeze               ;Skipped when ARG1 = ARG2
0006D6 0000               M                 DB      CMD_END_SND,0
                      02178 
                      02179         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,AUTO_BRAKE_MASK2,~AUTO_BRAKE_MASK2,SKIP_SAME         
0006D8 1EFC FB04          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,AUTO_BRAKE_MASK2,~AUTO_BRA
                      02180                 PLAY    HNDL_SC0_BRAKE_RELEASE,no_loop,loop_STD         
                          M         list ;2 byte PLAY  [HANDLE]
0006DC 2240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_RELEASE & 0x3F)+((no_loop<<6
                          M         list
                      02181         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x16,0   ;decrease
0006DE BDE6 00EA          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x16,0
                      02182 
                      02183         ;Set AUTOMATIC BRAKING INTERLOCK On =1
                      02184         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,~AUTO_BRAKE_MASK2,MERGE_ALL_MASK      
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 71
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0006E2 5EE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,~AUTO_BRAKE_MAS
                      02185         
                      02186         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_DYNBRK_ON               ; lOOP if SF15 is not currently ON
0006E6 0B04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_DYNBRK_ON 
                      02187                 BRANCH_TO       CH3SC0_RELEASE_HBRAKE
                          M         
                          M         if      (CH3SC0_RELEASE_HBRAKE-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH3SC0_RELEASE_HBRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006E8 ECC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_RELEASE_HBRAKE-SKEME_BASE)) & 0x0F) , low (CH3SC0_
                          M         endif
                          M                 
                      02188         BRANCH_TO       CH3SC0_BRAKES_RELEASED
                          M         
                          M         if      (CH3SC0_BRAKES_RELEASED-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH3SC0_BRAKES_RELEASED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006EA EEC6               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_BRAKES_RELEASED-SKEME_BASE)) & 0x0F) , low (CH3SC0
                          M         endif
                          M                 
                      02189         
0006EC                02190 CH3SC0_RELEASE_HBRAKE
                      02191                 PLAY    HNDL_SC0_HBRAKE_LOOP,loop_till_DYNBRK_OFF,loop_INVERT   
                          M         list ;2 byte PLAY  [HANDLE]
0006EC E64A               M         DB      CMD_PLAY_SND+((loop_till_DYNBRK_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_HBRAKE_LOOP & 0x3F)
                          M         list
                      02192                 
0006EE                02193 CH3SC0_BRAKES_RELEASED
                      02194         ;WKSB_RUN_BIT   EQU     2               ;0= stop motor PWM, non-primemover sounds RUN
                      02195 
                      02196         ;SERVO RELEASE
                      02197         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+WORK_STATUS_BITS,WKSB_RUN_MASK,MERGE_ALL_MASK ;set the
0006EE 47E6 0004          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+WORK_STATUS_BITS,WKSB_RUN_MASK,
                      02198         END_SOUND                                                 
0006F2 0000               M                 DB      CMD_END_SND,0
                      02199         
                      02200         
                      02201 ;----------------------------------------------------
                      02202 ;---- SF20 is ON =disable AIR sound/FEATURES, trig BLOWOFF/DRYER then compressor ONE time
                      02203 ;----------------------------------------------------
                      02204         INITIATE_SOUND  TRIG_FANS_ON,NOT_TRIG           ;drive AIR cycle when SF11 goes OFF!
0006F4 9A90               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_FANS_ON +((NOT_TRIG) & 0x80)
  00000014                M ICNT += 1
                          M 
                      02205                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x11,0   ;decrease
0006F6 BDE6 00EF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x11,0
                      02206                 BRANCH_TO       CH8SC0_AIR_PLAY
                          M         
                          M         if      (CH8SC0_AIR_PLAY-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH8SC0_AIR_PLAY range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0006FA 3CC9               M                 DB      CMD_GOTO_SND + ((high (CH8SC0_AIR_PLAY-SKEME_BASE)) & 0x0F) , low (CH8SC0_AIR_PL
                          M         endif
                          M                 
                      02207         END_SOUND
0006FC 0000               M                 DB      CMD_END_SND,0
                      02208         
                      02209 ;----------------------------------------------------
                      02210 ;---- SF16 is ON = DRYER
                      02211 ;----------------------------------------------------
                      02212         INITIATE_SOUND  TRIG_DRYER_ON,NORMAL            ;Set Brakes
0006FE 1790               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_DRYER_ON +((NORMAL) & 0x80)
  00000015                M ICNT += 1
                          M 
                      02213 
                      02214         BRANCH_TO CH15SC0_PLAY_DRYER
                          M         
                          M         if      (CH15SC0_PLAY_DRYER-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 72
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
000700 8CC5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER-SKEME_BASE)) & 0x0F) , low (CH15SC0_PL
                          M         endif
                          M                 
                      02215         END_SOUND
000702 0000               M                 DB      CMD_END_SND,0
                      02216 
                      02217         
                      02218 ;----------------------------------------------------
                      02219 ;---- SF17 is ON = Set Brakes
                      02220 ;----------------------------------------------------
                      02221         INITIATE_SOUND  TRIG_BRAKEA_ON,NORMAL           ;Set Brakes
000704 1C90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_BRAKEA_ON +((NORMAL) & 0x80)
  00000016                M ICNT += 1
                          M 
                      02222 
000706                02223 CH9SC0_BRAKE_SET
                      02224         BRANCH_TO CH7SC0_BRAKE
                          M         
                          M         if      (CH7SC0_BRAKE-SKEME_BASE) > 0xFFF                   ;check branch size in SCHEME
                          M                 error   CH7SC0_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000706 4CC8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_BRAKE-SKE
                          M         endif
                          M                 
                      02225         END_SOUND
000708 0000               M                 DB      CMD_END_SND,0
                      02226         
                      02227 ;-------------------------------
                      02228 ;SF18 is SANDER
                      02229 ;-------------------------------
                      02230         INITIATE_SOUND  TRIG_SAND_ON,NORMAL     ;RUN_WHILE_TRIG         ;continuous NON repeat version
00070A 1D90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_SAND_ON +((NORMAL) & 0x80)
  00000017                M ICNT += 1
                          M 
                      02231                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A
00070C 80E1 0A90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A
                      02232                 PLAY    HNDL_SC0_SANDER_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000710 3A40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SANDER_START & 0x3F)+((no_loop<<6)
                          M         list
                      02233                 ;PLAY   HNDL_SC0_SANDER_RUN,no_loop,loop_STD
                      02234                 PLAY    HNDL_SC0_SANDER_RUN,loop_till_init_TRIG,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000712 FB49               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_SANDER_RUN & 0x3F)+(
                          M         list
                      02235                 ;PLAY   HNDL_SC0_SANDER_RUN,no_loop,loop_STD
                      02236                 PLAY    HNDL_SC0_SANDER_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000714 3C40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SANDER_END & 0x3F)+((no_loop<<6)&0
                          M         list
                      02237                 MASK_COMPARE    WORK_NOTCH,IMMED_DATA,NOTCH7,COMP_ALL,SKIP_GRTR    ;Skip if Equal
000716 01FF 0060          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_NOTCH,NOTCH7,COMP_ALL
                      02238                         BRANCH_TO       CH13SC0_SANDER2
                          M         
                          M         if      (CH13SC0_SANDER2-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH13SC0_SANDER2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00071A 20C7               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_SANDER2-SKEME_BASE)) & 0x0F) , low (CH13SC0_SANDE
                          M         endif
                          M                 
                      02239                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0     ; set Manual Not
00071C 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0
000720                02240 CH13SC0_SANDER2
                      02241         END_SOUND 
000720 0000               M                 DB      CMD_END_SND,0
                      02242         
                      02243 
                      02244 ;-------------------------------
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 73
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02245 ;SF11 High Fan
                      02246 ;-------------------------------
                      02247         INITIATE_SOUND  TRIG_FANS_ON,NORMAL             
000722 1A90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_FANS_ON +((NORMAL) & 0x80)
  00000018                M ICNT += 1
                          M 
                      02248                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_D                     
000724 80E1 0DAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_D
                      02249                 PLAY    HNDL_SC0_FAN1_START,no_loop,loop_STD            
                          M         list ;2 byte PLAY  [HANDLE]
000728 3440               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_FAN1_START & 0x3F)+((no_loop<<6)&0
                          M         list
                      02250                 PLAY    HNDL_SC0_FAN1_LOOP,loop_till_init_TRIG,loop_INVERT      
                          M         list ;2 byte PLAY  [HANDLE]
00072A F549               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((
                          M         list
                      02251                 PLAY    HNDL_SC0_FAN1_LOOP,no_loop,loop_INVERT  
                          M         list ;2 byte PLAY  [HANDLE]
00072C 3548               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((no_loop<<6)&
                          M         list
                      02252                 PLAY    HNDL_SC0_FAN1_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00072E 3640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_FAN1_END & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      02253         END_SOUND 
000730 0000               M                 DB      CMD_END_SND,0
                      02254         
                      02255 ;-------------------------------
                      02256 ;SF24 Reverser
                      02257 ;-------------------------------
                      02258         INITIATE_SOUND  TRIG_REVS_ON,NORMAL             
000732 2390               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_REVS_ON +((NORMAL) & 0x80)
  00000019                M ICNT += 1
                          M 
                      02259         
                      02260                 ;play isolation/reverser:
                      02261                 LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SCALE_B
000734 80E1 0BB4          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SC
                      02262                 PLAY    HNDL_SC0_ISOLATION_REVERSE_FWD,no_loop,loop_STD         
                          M         list ;2 byte PLAY  [HANDLE]
000738 1E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ISOLATION_REVERSE_FWD & 0x3F)+((no
                          M         list
                      02263         END_SOUND 
00073A 0000               M                 DB      CMD_END_SND,0
                      02264 
                      02265 ;-------------------------------
                      02266 ;SF19 
                      02267 ;-------------------------------
                      02268         INITIATE_SOUND  TRIG_LETOFF_ON,NORMAL           
00073C 1E90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_LETOFF_ON +((NORMAL) & 0x80)
  0000001A                M ICNT += 1
                          M 
                      02269                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_F
00073E 80E1 0FB5          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_F
                      02270                 PLAY    HNDL_SC0_AIR_LETOFF,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000742 3240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIR_LETOFF & 0x3F)+((no_loop<<6)&0
                          M         list
                      02271         
                      02272         END_SOUND 
000744 0000               M                 DB      CMD_END_SND,0
                      02273 
                      02274 ; -------------------------------------------------------------
                      02275 ;   FUNCTION KEY SF22 - CAB CHATTER !
                      02276 ; -------------------------------------------------------------
                      02277         INITIATE_SOUND TRIG_USERSND_ON,NORMAL                   ; Play sound when SF22 is pressed
000746 2190               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_USERSND_ON +((NORMAL) & 0x80)
  0000001B                M ICNT += 1
                          M 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 74
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02278         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C      ; Volume set by Misc Vol
000748 80E1 0C90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C
                      02279         PLAY HNDL_SC0_USER_SOUND1,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
00074C 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_USER_SOUND1 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHER 
00074E 0900               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_USER_SOUND1 & 0x3F)+((no_loop<<6)&0xC0)
                          M         list
                      02280         ;MASK_COMPARE   WORK_SPEED,IMMED_DATA,0x04,COMP_ALL,SKIP_GRTR           ; Check if stopped
                      02281         ;       BRANCH_TO       CH13SC0_NO_CAB_SOUND
                      02282         ;BRANCH_TO      CH13SC0_CAB_SOUND
                      02283 
000750                02284 CH13SC0_CAB_SOUND
                      02285         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A      ; Volume set by Misc Vol
000750 80E1 0A90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A
                      02286         PLAY HNDL_SC0_SHUTTERS,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
000754 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_SHUTTERS & 0xC0)+1  ;ADD REV PLAY FLAG PLUS OTHER BI
000756 0600               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SHUTTERS & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      02287         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B      ; Volume set by Misc Vol
000758 80E1 0B90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B
                      02288         PLAY HNDL_SC0_SHUTTERS,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
00075C 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_SHUTTERS & 0xC0)+1  ;ADD REV PLAY FLAG PLUS OTHER BI
00075E 0600               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_SHUTTERS & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      02289         PLAY HNDL_SC0_USER_SOUND2,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
000760 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_USER_SOUND2 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHER 
000762 0A00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_USER_SOUND2 & 0x3F)+((no_loop<<6)&0xC0)
                          M         list
                      02290 
000764                02291 CH13SC0_NO_CAB_SOUND
                      02292         BRANCH_TO       CH15SC0_PLAY_DRYER
                          M         
                          M         if      (CH15SC0_PLAY_DRYER-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000764 8CC5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER-SKEME_BASE)) & 0x0F) , low (CH15SC0_PL
                          M         endif
                          M                 
                      02293         END_SOUND
000766 0000               M                 DB      CMD_END_SND,0
                      02294  
                      02295 
                      02296 ; -------------------------------------------------------------
                      02297 ;   FUNCTION KEY TRIG_USERSND2_ON - USER SOUNDS !
                      02298 ; -------------------------------------------------------------
                      02299         INITIATE_SOUND TRIG_USERSND2_ON,NORMAL                  ; Play sound when TRIG_USERSND2_ON is pr
000768 2D90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_USERSND2_ON +((NORMAL) & 0x80)
  0000001C                M ICNT += 1
                          M 
                      02300         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C      ; Volume set by Misc Vol
00076A 80E1 0C90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C
                      02301         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR           ; Check if stopped
00076E 00FF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      02302                 BRANCH_TO       CH13SC0_NO_USER_SOUND
                          M         
                          M         if      (CH13SC0_NO_USER_SOUND-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH13SC0_NO_USER_SOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000772 8AC7               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_NO_USER_SOUND-SKEME_BASE)) & 0x0F) , low (CH13SC0
                          M         endif
                          M                 
                      02303         BRANCH_TO       CH13SC0_USER_SOUND
                          M         
                          M         if      (CH13SC0_USER_SOUND-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH13SC0_USER_SOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 75
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000774 76C7               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_USER_SOUND-SKEME_BASE)) & 0x0F) , low (CH13SC0_US
                          M         endif
                          M                 
000776                02304 CH13SC0_USER_SOUND
                      02305         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_USERSND_ON              ; Skip if SF22 is not currently oFF
000776 2104               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_USERSND_ON 
                      02306                 END_SOUND
000778 0000               M                 DB      CMD_END_SND,0
                      02307         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A      ; Volume set by Misc Vol
00077A 80E1 0A90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A
                      02308         PLAY HNDL_SC0_ENGINE_DOOR_CLOSE,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
00077E 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_ENGINE_DOOR_CLOSE & 0xC0)+1 ;ADD REV PLAY FLAG PLUS 
000780 0500               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_DOOR_CLOSE & 0x3F)+((no_loop<<6)
                          M         list
                      02309         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B      ; Volume set by Misc Vol
000782 80E1 0B90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B
                      02310         PLAY HNDL_SC0_ENGINE_DOOR_OPEN,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
000786 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_ENGINE_DOOR_OPEN & 0xC0)+1 ;ADD REV PLAY FLAG PLUS O
000788 0400               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_DOOR_OPEN & 0x3F)+((no_loop<<6)&
                          M         list
00078A                02311 CH13SC0_NO_USER_SOUND
                      02312         BRANCH_TO       CH15SC0_PLAY_DRYER
                          M         
                          M         if      (CH15SC0_PLAY_DRYER-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00078A 8CC5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER-SKEME_BASE)) & 0x0F) , low (CH15SC0_PL
                          M         endif
                          M                 
                      02313         END_SOUND
00078C 0000               M                 DB      CMD_END_SND,0
                      02314         
                      02315         
                      02316         ; ---------------------------------------------------------
                      02317         ;     REMOVE COUPLER SLACK
                      02318         ; ---------------------------------------------------------
                      02319         INITIATE_SOUND T_SPD_IDLEXIT,NORMAL
00078E 7690               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), T_SPD_IDLEXIT +((NORMAL) & 0x80)
  0000001D                M ICNT += 1
                          M 
                      02320         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SCALE_B
000790 80E1 0BB4          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_POWER_REVERSER_VOLUME,SC
                      02321         ;;play isolation/reverser:
                      02322         ;PLAY   HNDL_SC0_ISOLATION_REVERSE_FWD,no_loop,loop_STD         
                      02323         PLAY    HNDL_SC0_BRAKE_BAIL_OFFOFF,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000794 2340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_BAIL_OFFOFF & 0x3F)+((no_loo
                          M         list
                      02324         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x05,0   ;decrease
000796 BDE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x05,0
                      02325         
                      02326         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_D    ;CV166 A6       Coupler 
00079A 80E1 0D90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_D
                      02327           
                      02328         MASK_COMPARE    WORK_NOTCH,TARGET_DATA,SCV_CUTOFF_SPEED_LOW,COMP_7LSB,SKIP_GRTR   ;Skip if <    
00079E 01FB 80A9          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+TARGET_DATA,WORK_NOTCH,SCV_CUTOFF_SPEED_LOW,COMP_7LSB
                      02329                 BRANCH_TO       CH9SC0_REMOVE_COUPLER_SLACK2
                          M         
                          M         if      (CH9SC0_REMOVE_COUPLER_SLACK2-SKEME_BASE) > 0xFFF   ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVE_COUPLER_SLACK2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4
                          M         else
0007A2 A6C7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVE_COUPLER_SLACK2-SKEME_BASE)) & 0x0F) , low (
                          M         endif
                          M                 
                      02330         BRANCH_TO       CH9SC0_REMOVED_COUPLER_SLACK            ;SKIP UNLESS HAS ACTUALLY MOVED/MOVING; 
                          M         
                          M         if      (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE) > 0xFFF   ;check branch size in SCHEME
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 76
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 error   CH9SC0_REMOVED_COUPLER_SLACK range over 4096 bytes -- MUST USE BRANCH_EXT for >4
                          M         else
0007A4 EAC7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE)) & 0x0F) , low (
                          M         endif
                          M                 
0007A6                02331 CH9SC0_REMOVE_COUPLER_SLACK2
                      02332         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   ;No sound unless moving.
0007A6 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02333                 BRANCH_TO       CH9SC0_REMOVED_COUPLER_SLACK    
                          M         
                          M         if      (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE) > 0xFFF   ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVED_COUPLER_SLACK range over 4096 bytes -- MUST USE BRANCH_EXT for >4
                          M         else
0007A8 EAC7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE)) & 0x0F) , low (
                          M         endif
                          M                 
                      02334                 
                      02335         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x03,COMP_ALL,SKIP_GRTR           ; Check if stopped
0007AA 00FF 0003          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x03,COMP_ALL
                      02336                 BRANCH_TO       CH9SC0_REMOVE_COUPLER_SLACK
                          M         
                          M         if      (CH9SC0_REMOVE_COUPLER_SLACK-SKEME_BASE) > 0xFFF    ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVE_COUPLER_SLACK range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0007AE B2C7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVE_COUPLER_SLACK-SKEME_BASE)) & 0x0F) , low (C
                          M         endif
                          M                 
                      02337         BRANCH_TO       CH9SC0_REMOVED_COUPLER_SLACK
                          M         
                          M         if      (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE) > 0xFFF   ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVED_COUPLER_SLACK range over 4096 bytes -- MUST USE BRANCH_EXT for >4
                          M         else
0007B0 EAC7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE)) & 0x0F) , low (
                          M         endif
                          M                 
                      02338                         
0007B2                02339 CH9SC0_REMOVE_COUPLER_SLACK
                      02340         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_B ;CV166 A6       Coupler 
0007B2 80E1 0BB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_B
                      02341         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL       
0007B6 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESE
                      02342         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
0007BA 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02343                 PLAY    HNDL_SC0_COUPLER_SLACK,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
0007BC 3F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_COUPLER_SLACK & 0x3F)+((no_loop<<6
                          M         list
                      02344                 
                      02345         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x04,COMP_ALL,SKIP_GRTR           ; Check if stopped
0007BE 00FF 0004          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x04,COMP_ALL
                      02346                 BRANCH_TO       CH9SC0_REMOVED_COUPLER_SLACK2
                          M         
                          M         if      (CH9SC0_REMOVED_COUPLER_SLACK2-SKEME_BASE) > 0xFFF  ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVED_COUPLER_SLACK2 range over 4096 bytes -- MUST USE BRANCH_EXT for >
                          M         else
0007C2 C6C7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVED_COUPLER_SLACK2-SKEME_BASE)) & 0x0F) , low 
                          M         endif
                          M                 
                      02347         BRANCH_TO       CH9SC0_REMOVED_COUPLER_SLACK
                          M         
                          M         if      (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE) > 0xFFF   ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVED_COUPLER_SLACK range over 4096 bytes -- MUST USE BRANCH_EXT for >4
                          M         else
0007C4 EAC7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE)) & 0x0F) , low (
                          M         endif
                          M                 
                      02348         
0007C6                02349 CH9SC0_REMOVED_COUPLER_SLACK2
                      02350         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_UNCOUPLE_ON              ; Skip if SF3 is not currently OFF -- li
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 77
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0007C6 1805               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_UNCOUPLE_ON 
                      02351                 END_SOUND
0007C8 0000               M                 DB      CMD_END_SND,0
                      02352                 
                      02353         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_A ;CV166 A6       Coupler 
0007CA 80E1 0AB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_A
                      02354         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL       
0007CE A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESE
                      02355         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
0007D2 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02356                 PLAY    HNDL_SC0_COUPLER_SLACK,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
0007D4 3F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_COUPLER_SLACK & 0x3F)+((no_loop<<6
                          M         list
                      02357                 
                      02358         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x05,COMP_ALL,SKIP_GRTR           ; Check if stopped
0007D6 00FF 0005          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x05,COMP_ALL
                      02359                 BRANCH_TO       CH9SC0_REMOVED_COUPLER_SLACK3   
                          M         
                          M         if      (CH9SC0_REMOVED_COUPLER_SLACK3-SKEME_BASE) > 0xFFF  ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVED_COUPLER_SLACK3 range over 4096 bytes -- MUST USE BRANCH_EXT for >
                          M         else
0007DA DEC7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVED_COUPLER_SLACK3-SKEME_BASE)) & 0x0F) , low 
                          M         endif
                          M                 
                      02360         BRANCH_TO       CH9SC0_REMOVED_COUPLER_SLACK    
                          M         
                          M         if      (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE) > 0xFFF   ;check branch size in SCHEME
                          M                 error   CH9SC0_REMOVED_COUPLER_SLACK range over 4096 bytes -- MUST USE BRANCH_EXT for >4
                          M         else
0007DC EAC7               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_REMOVED_COUPLER_SLACK-SKEME_BASE)) & 0x0F) , low (
                          M         endif
                          M                 
                      02361         
0007DE                02362 CH9SC0_REMOVED_COUPLER_SLACK3
                      02363         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_A ;CV166 A6       Coupler 
0007DE 80E1 0AB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_A
                      02364         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL       
0007E2 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESE
                      02365         
                      02366         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
0007E6 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02367                 PLAY    HNDL_SC0_COUPLER_SLACK,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
0007E8 3F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_COUPLER_SLACK & 0x3F)+((no_loop<<6
                          M         list
                      02368                 
0007EA                02369 CH9SC0_REMOVED_COUPLER_SLACK
                      02370         END_SOUND
0007EA 0000               M                 DB      CMD_END_SND,0
                      02371         
                      02372         
                      02373         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      02374         ;Straight to 1 manual notch set:
                      02375         INITIATE_SOUND TRIG_RUN1_ON,NORMAL
0007EC 2090               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_RUN1_ON +((NORMAL) & 0x80)
  0000001E                M ICNT += 1
                          M 
                      02376 
                      02377 ;SF21- Notch 1
                      02378                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0     
0007EE 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0
                      02379         END_SOUND
0007F2 0000               M                 DB      CMD_END_SND,0
                      02380         
                      02381         
                      02382         ;;INITIATE_SOUND TRIG_TBRAKE_ON,NORMAL
                      02383 ;SF26- Notch 6
                      02384                 ;;LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH6,0   
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 78
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02385         ;;END_SOUND     
                      02386 
                      02387         ;Straight to 7 manual notch set: SELECT SF27...
                      02388         ;;INITIATE_SOUND TRIG_NOTCHDN_ON,NORMAL
                      02389 ;SF27- Notch 7
                      02390                 ;;LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH7,0   
                      02391         ;;END_SOUND     
                      02392         
                      02393         ;Straight to 8 manual notch set: SELECT SF28...
                      02394         INITIATE_SOUND TRIG_RUN8_ON,NORMAL
0007F4 2790               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_RUN8_ON +((NORMAL) & 0x80)
  0000001F                M ICNT += 1
                          M 
                      02395 ;SF28- Notch 8
                      02396                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH8,0     
0007F6 0BE6 0070          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,NOTCH8,0
                      02397         END_SOUND       
0007FA 0000               M                 DB      CMD_END_SND,0
                      02398         
                      02399 
                      02400         
                      02401         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02402         ;       THIS ROUTINE IS CH2_ high priority/whistle/horn PERSISTENT (NOT INTERRUPTABLE)  
                      02403         ; SF26 NOTCH-UP
                      02404         ;----------------------------------------------------
                      02405         INITIATE_SOUND  TRIG_NOTCHUP_ON,NORMAL
0007FC 2590               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_NOTCHUP_ON +((NORMAL) & 0x80)
  00000020                M ICNT += 1
                          M 
                      02406         ;-------------------------------------------------
                      02407         ;SF27 ON Is now notch down for EVENT, integrate -VE in SPEED_DELTA
                      02408         ;MANUAL mode is ALREADY evaluated at CV11/START and OPSCV_WR that sets WKSB_SPDDELTA_BIT
                      02409         ;----------------------------------------------------   
                      02410         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MAX_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;prevent
0007FE 0BFC 0020          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_SPEED_DELTA,MAX_NOTCH_VAL,COMP_ALL
                      02411         ;FIX 1/25/18
                      02412                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,+0x10,MAX_NOTCH_VAL   
000802 ABE6 2010          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,+0x10,M
                      02413         ;reset when long at idle...
                      02414         ;MASK_COMPARE   WORK_SPEED_DELTA,IMMED_DATA,MAX_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;prevent
                      02415         ;       END_SOUND
                      02416                 
                      02417         END_SOUND
000806 0000               M                 DB      CMD_END_SND,0
                      02418 
                      02419         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02420         ;       THIS ROUTINE IS CH2_ high priority/whistle/horn PERSISTENT (NOT INTERRUPTABLE)  
                      02421         ; SF27 NOTCH-DOWN
                      02422         ;----------------------------------------------------
                      02423         INITIATE_SOUND  TRIG_NOTCHDN_ON,NORMAL
000808 2690               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_NOTCHDN_ON +((NORMAL) & 0x80)
  00000021                M ICNT += 1
                          M 
                      02424         ;-------------------------------------------------
                      02425         ;SF27 ON Is now notch down for EVENT, integrate -VE in SPEED_DELTA
                      02426         ;MANUAL mode is ALREADY evaluated at CV11/START and OPSCV_WR that sets WKSB_SPDDELTA_BIT
                      02427         ;----------------------------------------------------   
                      02428         ;PLAY HNDL_SC0_DEBUG1,no_loop,loop_STD  
                      02429 
                      02430         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;prevent
00080A 0BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      02431         ;FIX 1/25/18
                      02432                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   
00080E ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      02433         ;reset when long at idle...
                      02434         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_SAME            ;prevent
000812 0BFC 0000          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      02435                 END_SOUND
000816 0000               M                 DB      CMD_END_SND,0
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 79
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02436         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+WORK_PEAK_SPD,00,0  ;clear WORK_PEAK_SPD    
000818 19E6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_PEAK_SPD,00,0
                      02437                 
                      02438         END_SOUND
00081C 0000               M                 DB      CMD_END_SND,0
                      02439 
                      02440         
                      02441 
                      02442 ;---------------------------------------------
                      02443 ;  Decelerate  brake sounds:                  
                      02444 ;---------------------------------------------
                      02445         INITIATE_SOUND T_SPD_DECEL1,NORMAL              
00081E 7890               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), T_SPD_DECEL1 +((NORMAL) & 0x80)
  00000022                M ICNT += 1
                          M 
                      02446         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_GRTR            ;prevent
000820 0BFF 0000          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      02447                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   ;D
000824 ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      02448 
                      02449         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_GRTR            ;prevent
000828 0BFF 0000          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      02450                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   ;D
00082C ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      02451 
                      02452         ;SKIP UNLESS HAS ACTUALLY MOVED/MOVING
                      02453         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   
000830 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02454                 BRANCH_TO       CH7SC0_NOT_BRAKE
                          M         
                          M         if      (CH7SC0_NOT_BRAKE-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH7SC0_NOT_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000832 66C8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_NOT_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_NOT_B
                          M         endif
                          M                 
                      02455                 
                      02456         ;PLAY HNDL_SC0_DEBUG1,no_loop,loop_STD  
                      02457         ; Decelerate:
                      02458         ;SKIP_ON_TRIGGER        TRIG_FALSE,TRIG_IBRAKES_ON      ; But skip if BRAKE was previously on --
                      02459         ;       BRANCH_TO       CH7SC0_NOT_BRAKE        
                      02460                 
                      02461         ;when coupler lift ring is up do not play brake squeel:
                      02462         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_UNCOUPLE_ON      ; But skip if SF3 was previously OFF -- SF3 ON e
000834 1805               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_UNCOUPLE_ON 
                      02463                 BRANCH_TO       CH7SC0_NOT_BRAKE        
                          M         
                          M         if      (CH7SC0_NOT_BRAKE-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH7SC0_NOT_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000836 66C8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_NOT_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_NOT_B
                          M         endif
                          M                 
                      02464                 
                      02465         ;MASK_COMPARE   WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR           ; Check if stopped
                      02466         ;       BRANCH_TO       CH7SC0_BRAKE2
                      02467         ;BRANCH_TO      CH7SC0_NOT_BRAKE
                      02468         
000838                02469 CH7SC0_BRAKE2
                      02470         ; Check AUTOMATIC BRAKING INTERLOCK if Disabled
                      02471         ;PLAY HNDL_SC0_ABOUT,no_loop,loop_STD   ;debug2
                      02472 
                      02473         ;compare current brake cycle count when >0 continue to brake
                      02474         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,AUTO_BRAKE_MASK2,~AUTO_BRAKE_MASK2,SKIP_SAME ;BIT2 ON
000838 1EFC FB04          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,AUTO_BRAKE_MASK2,~AUTO_BRA
                      02475                 BRANCH_TO       CH7SC0_TEST_BRAKE               ;Skipped when ARG1 = ARG2
                          M         
                          M         if      (CH7SC0_TEST_BRAKE-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH7SC0_TEST_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 80
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
00083C 40C8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_TEST_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_TEST
                          M         endif
                          M                 
                      02476         BRANCH_TO       CH7SC0_NOT_BRAKE
                          M         
                          M         if      (CH7SC0_NOT_BRAKE-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH7SC0_NOT_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00083E 66C8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_NOT_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_NOT_B
                          M         endif
                          M                 
                      02477         
                      02478 
000840                02479 CH7SC0_TEST_BRAKE
                      02480         MASK_COMPARE    WORK_SPEED,IMMED_DATA,SCV_COUPLER_THRESHOLD,COMP_ALL,SKIP_LESS  ;28
000840 00FE 0096          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_SPEED,SCV_COUPLER_THRESHOLD,COMP_ALL
                      02481                 BRANCH_TO       CH7SC0_NOT_BRAKE                        ;Skipped when ARG1 < ARG2       
                          M         
                          M         if      (CH7SC0_NOT_BRAKE-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH7SC0_NOT_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000844 66C8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_NOT_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_NOT_B
                          M         endif
                          M                 
                      02482 
                      02483 ;                                                               SPEED THRESHOLD FOR HARD BRAKE 14-19    
                      02484         MASK_COMPARE    WORK_SPEED,IMMED_DATA,SCV_BRAKE_RATE,COMP_ALL,SKIP_LESS ;19
000846 00FE 0099          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,WORK_SPEED,SCV_BRAKE_RATE,COMP_ALL
                      02485                 BRANCH_TO       CH7SC0_NOT_BRAKE                        ;Skipped when ARG1 < ARG2       
                          M         
                          M         if      (CH7SC0_NOT_BRAKE-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH7SC0_NOT_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00084A 66C8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_NOT_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_NOT_B
                          M         endif
                          M                 
                      02486 
00084C                02487 CH7SC0_BRAKE
                      02488         MASK_COMPARE    WORK_SPEED_DELTA,IMMED_DATA,MIN_NOTCH_VAL,COMP_ALL,SKIP_GRTR            ;prevent
00084C 0BFF 0000          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED_DELTA,MIN_NOTCH_VAL,COMP_ALL
                      02489                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,MAX_NOTCH_VAL   ;D
000850 ABE6 20F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,-0x10,M
                      02490         
                      02491         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   
000854 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02492                 BRANCH_TO       CH7SC0_NOT_BRAKE
                          M         
                          M         if      (CH7SC0_NOT_BRAKE-SKEME_BASE) > 0xFFF               ;check branch size in SCHEME
                          M                 error   CH7SC0_NOT_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000856 66C8               M                 DB      CMD_GOTO_SND + ((high (CH7SC0_NOT_BRAKE-SKEME_BASE)) & 0x0F) , low (CH7SC0_NOT_B
                          M         endif
                          M                 
                      02493 
                      02494         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_E
000858 80E1 0E8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_E
                      02495         PLAY    HNDL_SC0_ENGINE_BRAKE_BEGIN,no_loop,loop_STD            ; light brake sound     
                          M         list ;2 byte PLAY  [HANDLE]
00085C 1A40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_BEGIN & 0x3F)+((no_lo
                          M         list
                      02496         PLAY    HNDL_SC0_ENGINE_BRAKE_LOOP1,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00085E 1B40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_LOOP1 & 0x3F)+((no_lo
                          M         list
000860                02497 CH7SC0_QUICK_BRAKE
                      02498         ;PLAY HNDL_SC0_DEBUG1,no_loop,loop_STD  
                      02499         PLAY    HNDL_SC0_ENGINE_BRAKE_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 81
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000860 1D40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_ENGINE_BRAKE_END & 0x3F)+((no_loop
                          M         list
                      02500         
                      02501         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x05,0   ;decrease
000862 BDE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x05,0
                      02502         
000866                02503 CH7SC0_NOT_BRAKE
                      02504         ;Set AUTOMATIC BRAKING INTERLOCK Off =0
                      02505         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,~AUTO_BRAKE_MASK2,MERGE_ALL_MASK      
000866 5EE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,~AUTO_BRAKE_MAS
                      02506 
                      02507         END_SOUND
00086A 0000               M                 DB      CMD_END_SND,0
                      02508         
                      02509         ;END CH2_============================================================== 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 82
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02510                 PAGE
                      02511                 
                      02512                 
                      02513 ;------------------------------------------------
                      02514 ;Start Channel 3                
                      02515 ;------------------------------------------------
                      02516         CHANNEL_START   3       ;typically for PERSISTENT sounds other than PRIME mover
00086C 0381               M                 DB      CMD_START_CHNL,3
                          M ;CTEMP += 1
00086E                02517 CH3SC0_BEGIN        
                      02518                 
                      02519 ;--------------------------------------------------------------------
                      02520 ;added 8/13/06 to holdoff until DIESEL START is complete
                      02521 ;--------------------------------------------------------------------
                      02522         INITIATE_SOUND  TRIG_SND_ACTV11,NORMAL                          ;run ONCE only
00086E 0F90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_SND_ACTV11 +((NORMAL) & 0x80)
  00000023                M ICNT += 1
                          M 
000870                02523 CH3SC0_INTERLOCK_HOLD
                      02524         DELAY_SOUND DELAY_THIS,24,DELAY_GLOBAL
000870 18B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), (24 & 0x7F)+DELAY_THIS 
                      02525         
                      02526         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
000872 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      02527                 BRANCH_TO       CH3SC0_INTERLOCK_HOLD    ;interlock is 00, freeze               ;Skipped
                          M         
                          M         if      (CH3SC0_INTERLOCK_HOLD-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH3SC0_INTERLOCK_HOLD range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000876 70C8               M                 DB      CMD_GOTO_SND + ((high (CH3SC0_INTERLOCK_HOLD-SKEME_BASE)) & 0x0F) , low (CH3SC0_
                          M         endif
                          M                 
                      02528         ;DO NOT reset blend, gain, pitch here:
                      02529         END_SOUND
000878 0000               M                 DB      CMD_END_SND,0
                      02530         
                      02531         
                      02532 ;BEGIN CH3_=============================
                      02533 
                      02534         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02535         ;       THIS ROUTINE IS CH3_ (NOT INTERRUPTABLE)
                      02536         ;   FUNCTION KEY SF31 - BELL, GRADE CROSSING SEQUENCE !
                      02537         ;       ::::::::::::::::::::::::::::::: EVENT MUST PRECEED SF1 BELOW ===========================
                      02538         ;-------------------------------------------------------
                      02539         INITIATE_SOUND TRIG_ALTGCS_ON,RUN_WHILE_TRIG    ;PZAP 2/13/17 +NO_PREEMPT_TRIG          ; Do not
00087A 2292               M                 DB      CMD_INITIATE_SND + ((RUN_WHILE_TRIG) & 0x07), TRIG_ALTGCS_ON +((RUN_WHILE_TRIG) 
  00000024                M ICNT += 1
                          M 
                      02540         ;                                               bit6 disable bell
                      02541         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x01,COMP_bit6,SKIP_SAME         ;SKIP_LESSSKIP_G
00087C B8FC BF01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x01,COMP_bit6
                      02542                 END_SOUND                               ;Skipped when ARG1 = ARG2
000880 0000               M                 DB      CMD_END_SND,0
                      02543         ; only one bell routine can be supported. use SF1 below.
                      02544         BRANCH_TO       CH4SC0_BELL_ON  
                          M         
                          M         if      (CH4SC0_BELL_ON-SKEME_BASE) > 0xFFF                 ;check branch size in SCHEME
                          M                 error   CH4SC0_BELL_ON range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000882 88C8               M                 DB      CMD_GOTO_SND + ((high (CH4SC0_BELL_ON-SKEME_BASE)) & 0x0F) , low (CH4SC0_BELL_ON
                          M         endif
                          M                 
                      02545         
                      02546         END_SOUND
000884 0000               M                 DB      CMD_END_SND,0
                      02547 
                      02548         
                      02549         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02550         ;       THIS ROUTINE IS CH3_ bell/air/fan/misc (NOT INTERRUPTABLE)
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 83
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02551         ;   FUNCTION KEY SF1 - BELL             
                      02552         ; -------------------------------------------------------------
                      02553         INITIATE_SOUND  TRIG_BELLS_ON,RUN_WHILE_TRIG    ;PZAP 2/13/17 +NO_PREEMPT_TRIG          ;continu
000886 0892               M                 DB      CMD_INITIATE_SND + ((RUN_WHILE_TRIG) & 0x07), TRIG_BELLS_ON +((RUN_WHILE_TRIG) &
  00000025                M ICNT += 1
                          M 
                      02554 ;-
000888                02555 CH4SC0_BELL_ON  
                      02556         ;                               bit6 disable bell
                      02557         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x01,COMP_bit6,SKIP_SAME         ;SKIP_LESSSKIP_G
000888 B8FC BF01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x01,COMP_bit6
                      02558                 END_SOUND                               ;Skipped when ARG1 = ARG2
00088C 0000               M                 DB      CMD_END_SND,0
                      02559         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BELL_VOLUME,SCALE_D
00088E 80E1 0D8C          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BELL_VOLUME,SCALE_D
                      02560         
                      02561         ;BELL SELECTED CV157:
                      02562         ;                       Decimal HEX                     Bit
                      02563         ;                                                               7654 3210
                      02564         ;       1               0               0x00            0000 0000
                      02565         ;       2               1               0x01            0000 0001
                      02566         ;       3               2               0x02            0000 0010
                      02567         ;       4               3               0x03            0000 0011
                      02568         ;       5               4               0x04            0000 0100
                      02569         ;                       Decimal HEX                     Bit
                      02570 ;----
                      02571 
                      02572 
                      02573 ;-----
                      02574 ;CV150= xxxx-x00X
000892                02575 CH4SC0_F1_BELL_00X
                      02576         ;MASK_COMPARE   SCV_157_SEL_BELL,IMMED_DATA,0x03,COMP_bit0,SKIP_LESS            ;SKIP_LESSSKIP_G
                      02577         ;       BRANCH_TO       CH4SC0_F1_BELL_003
                      02578         ;MASK_COMPARE   SCV_157_SEL_BELL,IMMED_DATA,0x02,COMP_bit0,SKIP_LESS            ;SKIP_LESSSKIP_G
                      02579         ;       BRANCH_TO       CH4SC0_F1_BELL_002
                      02580         MASK_COMPARE    SCV_157_SEL_BELL,IMMED_DATA,0x01,COMP_bit0,SKIP_LESS            ;SKIP_LESSSKIP_G
000892 9CFE FE01          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,SCV_157_SEL_BELL,0x01,COMP_bit0
                      02581                 BRANCH_TO       CH4SC0_F1_BELL_001
                          M         
                          M         if      (CH4SC0_F1_BELL_001-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH4SC0_F1_BELL_001 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000896 A2C8               M                 DB      CMD_GOTO_SND + ((high (CH4SC0_F1_BELL_001-SKEME_BASE)) & 0x0F) , low (CH4SC0_F1_
                          M         endif
                          M                 
                      02582 ;-
                      02583 ;CV150= 00 DEFAULT BELL
000898                02584 CH4SC0_F1_BELL_000
                      02585         PLAY    HNDL_SC0_BELL1,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
000898 1840               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BELL1 & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      02586         MASK_COMPARE    SCV_FEATURE2_DISABLE,IMMED_DATA,0x01,COMP_bit1,SKIP_SAME                ;SKIP_LE
00089A B9FC FD01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE2_DISABLE,0x01,COMP_bit1
                      02587                 BRANCH_TO       CH4SC0_F1_BELL_DELAY    
                          M         
                          M         if      (CH4SC0_F1_BELL_DELAY-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH4SC0_F1_BELL_DELAY range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00089E ACC8               M                 DB      CMD_GOTO_SND + ((high (CH4SC0_F1_BELL_DELAY-SKEME_BASE)) & 0x0F) , low (CH4SC0_F
                          M         endif
                          M                 
                      02588                 
                      02589         DELAY_SOUND     DELAY_CV,SCV_BELL_RING_RATE,DELAY_GLOBAL
0008A0 91B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), (SCV_BELL_RING_RATE & 0x7F)+DELAY_CV 
                      02590         ;chain bell
                      02591         ;END_SOUND
                      02592         ; uncomment to have only 1 bell sound fragments
                      02593         
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 84
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02594 ;CV150= 01 SECOND BELL
0008A2                02595 CH4SC0_F1_BELL_001   
                      02596 
                      02597         PLAY    HNDL_SC0_BELL2,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0008A2 1940               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BELL2 & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      02598         MASK_COMPARE    SCV_FEATURE2_DISABLE,IMMED_DATA,0x01,COMP_bit1,SKIP_SAME                ;SKIP_LE
0008A4 B9FC FD01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE2_DISABLE,0x01,COMP_bit1
                      02599                 BRANCH_TO       CH4SC0_F1_BELL_DELAY    
                          M         
                          M         if      (CH4SC0_F1_BELL_DELAY-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH4SC0_F1_BELL_DELAY range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0008A8 ACC8               M                 DB      CMD_GOTO_SND + ((high (CH4SC0_F1_BELL_DELAY-SKEME_BASE)) & 0x0F) , low (CH4SC0_F
                          M         endif
                          M                 
                      02600 
                      02601         DELAY_SOUND     DELAY_CV,SCV_BELL_RING_RATE,DELAY_GLOBAL        
0008AA 91B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), (SCV_BELL_RING_RATE & 0x7F)+DELAY_CV 
                      02602         
                      02603         ;END_SOUND
                      02604         
                      02605 ;CV150= 02 THIRD BELL
                      02606 ;CH4SC0_F1_BELL_002  
                      02607 
                      02608 ;       PLAY    HNDL_SC0_BELL3,no_loop,loop_STD
                      02609 ;       MASK_COMPARE    SCV_FEATURE2_DISABLE,IMMED_DATA,0x01,COMP_bit1,SKIP_SAME                ;SKIP_LE
                      02610 ;               BRANCH_TO       CH4SC0_F1_BELL_DELAY    
                      02611 
                      02612 ;       DELAY_SOUND     DELAY_CV,SCV_BELL_RING_RATE,DELAY_GLOBAL        
                      02613         
                      02614 ;       ;END_SOUND
                      02615         
                      02616 ;CV150= 03 FORTH BELL
                      02617 ;CH4SC0_F1_BELL_003  
                      02618 
                      02619 ;       PLAY    HNDL_SC0_BELL4,no_loop,loop_STD
                      02620 ;       MASK_COMPARE    SCV_FEATURE2_DISABLE,IMMED_DATA,0x01,COMP_bit1,SKIP_SAME                ;SKIP_LE
                      02621 ;               BRANCH_TO       CH4SC0_F1_BELL_DELAY    
                      02622 
                      02623 ;       DELAY_SOUND     DELAY_CV,SCV_BELL_RING_RATE,DELAY_GLOBAL        
                      02624         
                      02625 ;       ;END_SOUND
                      02626         
                      02627         
0008AC                02628 CH4SC0_F1_BELL_DELAY
                      02629         DELAY_SOUND     DELAY_CV,SCV_BELL_RING_RATE,DELAY_GLOBAL        
0008AC 91B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), (SCV_BELL_RING_RATE & 0x7F)+DELAY_CV 
                      02630         
                      02631         END_SOUND
0008AE 0000               M                 DB      CMD_END_SND,0
                      02632 
                      02633            
                      02634 
                      02635 
                      02636 ; -------------------------------------------------------------
                      02637 ;   FUNCTION KEY SF3 - UNCOUPLE  ! take up slack
                      02638 ; -------------------------------------------------------------
                      02639         INITIATE_SOUND TRIG_UNCOUPLE_ON,NOT_TRIG                        ; Play sound when SF3 is release
0008B0 9890               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_UNCOUPLE_ON +((NOT_TRIG) & 0x80)
  00000026                M ICNT += 1
                          M 
                      02640         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR           ; Check if stopped
0008B2 00FF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      02641                 BRANCH_TO       CH9SC0_UNCOUPLE
                          M         
                          M         if      (CH9SC0_UNCOUPLE-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH9SC0_UNCOUPLE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 85
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
0008B6 BAC8               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_UNCOUPLE-SKEME_BASE)) & 0x0F) , low (CH9SC0_UNCOUP
                          M         endif
                          M                 
                      02642         BRANCH_TO       CH9SC0_BRAKE_RELEASE
                          M         
                          M         if      (CH9SC0_BRAKE_RELEASE-SKEME_BASE) > 0xFFF           ;check branch size in SCHEME
                          M                 error   CH9SC0_BRAKE_RELEASE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0008B8 C2C8               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_BRAKE_RELEASE-SKEME_BASE)) & 0x0F) , low (CH9SC0_B
                          M         endif
                          M                 
                      02643                 
0008BA                02644 CH9SC0_UNCOUPLE 
                      02645         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_E   ; Volume set    
0008BA 80E1 0EB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_E
                      02646         PLAY    HNDL_SC0_UNCOUPLE_BEGIN,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
0008BE 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_UNCOUPLE_BEGIN & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTH
0008C0 0000               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_UNCOUPLE_BEGIN & 0x3F)+((no_loop<<6)&0x
                          M         list
                      02647          
0008C2                02648 CH9SC0_BRAKE_RELEASE
                      02649         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_B
0008C2 80E1 0BB5          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_B
                      02650 
                      02651         PLAY    HNDL_SC0_BRAKE_BAIL_OFFOFF,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0008C6 2340               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_BRAKE_BAIL_OFFOFF & 0x3F)+((no_loo
                          M         list
                      02652         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x15,0   ;decrease
0008C8 BDE6 00EB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x15,0
                      02653         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
0008CC 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02654                 PLAY    HNDL_SC0_UNCOUPLE_DISCONNECT,no_loop,loop_STD                                   
                          M         list ;4 byte XPLAY      [HANDLE]
0008CE 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_UNCOUPLE_DISCONNECT & 0xC0)+1 ;ADD REV PLAY FLAG PLU
0008D0 0100               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_UNCOUPLE_DISCONNECT & 0x3F)+((no_loop<<
                          M         list
                      02655 
                      02656         END_SOUND
0008D2 0000               M                 DB      CMD_END_SND,0
                      02657         
                      02658         
                      02659 ; -------------------------------------------------------------
                      02660 ;   FUNCTION KEY SF3 - UNCOUPLE  ! lift ring
                      02661 ; -------------------------------------------------------------
                      02662         INITIATE_SOUND TRIG_UNCOUPLE_ON,NORMAL                  ; Play lift ring sound when SF3 ON
0008D4 1890               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_UNCOUPLE_ON +((NORMAL) & 0x80)
  00000027                M ICNT += 1
                          M 
                      02663         ;set COUPLER_INTLK5 interlock:
                      02664         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~COUPLER_MASK5,MERGE_ALL_MASK        
0008D6 3EE6 00DF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~COUPLER_MASK5
                      02665         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_D   ; Volume set 
0008DA 80E1 0DB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_D
                      02666         PLAY    HNDL_SC0_UNCOUPLE_BEGIN,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
0008DE 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_UNCOUPLE_BEGIN & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTH
0008E0 0000               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_UNCOUPLE_BEGIN & 0x3F)+((no_loop<<6)&0x
                          M         list
                      02667         ;SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
                      02668                 PLAY    HNDL_SC0_UNCOUPLE_DISCONNECT,no_loop,loop_STD   
                          M         list ;4 byte XPLAY      [HANDLE]
0008E2 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_UNCOUPLE_DISCONNECT & 0xC0)+1 ;ADD REV PLAY FLAG PLU
0008E4 0100               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_UNCOUPLE_DISCONNECT & 0x3F)+((no_loop<<
                          M         list
                      02669                 
                      02670         END_SOUND
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 86
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0008E6 0000               M                 DB      CMD_END_SND,0
                      02671           
                      02672           
                      02673 ; -------------------------------------------------------------
                      02674 ;   FUNCTION KEY SF3 - COUPLE  ! COUPLE
                      02675 ; -------------------------------------------------------------
                      02676         INITIATE_SOUND TRIG_COUPLE_ON,NORMAL                    ;  sound when SF3 ON
0008E8 0A90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_COUPLE_ON +((NORMAL) & 0x80)
  00000028                M ICNT += 1
                          M 
                      02677         ;set COUPLER_INTLK5 interlock:
                      02678         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~COUPLER_MASK5,MERGE_ALL_MASK        
0008EA 3EE6 00DF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~COUPLER_MASK5
                      02679         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_D   ; Volume set 
0008EE 80E1 0DB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_D
                      02680         PLAY    HNDL_SC0_COUPLER_LIFT_RING,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
0008F2 3D40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_COUPLER_LIFT_RING & 0x3F)+((no_loo
                          M         list
                      02681         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
0008F4 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02682                 PLAY    HNDL_SC0_COUPLER_CLASH,no_loop,loop_STD         
                          M         list ;2 byte PLAY  [HANDLE]
0008F6 3E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_COUPLER_CLASH & 0x3F)+((no_loop<<6
                          M         list
                      02683                 
                      02684         END_SOUND
0008F8 0000               M                 DB      CMD_END_SND,0
                      02685           
                      02686 ; -------------------------------------------------------------
                      02687 ;   FUNCTION KEY SF7 - WHEEL FLANGE  !
                      02688 ; -------------------------------------------------------------
                      02689         INITIATE_SOUND TRIG_FLANGES_ON,NOT_TRIG         ; Interrupt play
0008FA 9290               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_FLANGES_ON +((NOT_TRIG) & 0x80)
  00000029                M ICNT += 1
                          M 
                      02690         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_A    
0008FC 80E1 0AB5          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_LETOFF_VOLUME,SCALE_A
                      02691 
                      02692         ;PLAY HNDL_SC0_ABOUT,no_loop,loop_STD   ;DEBUG2
                      02693 
                      02694         ;Set AUTOMATIC BRAKING INTERLOCK On =1
                      02695         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MASK2,MERGE_ALL_MASK     
000900 3EE6 00FB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~AUTO_BRAKE_MA
                      02696         END_SOUND       
000904 0000               M                 DB      CMD_END_SND,0
                      02697                  
                      02698 ; -------------------------------------------------------------
                      02699         INITIATE_SOUND TRIG_FLANGES_ON,NORMAL+ZAP                       ; Play sound when SF7 is pressed
000906 1291               M                 DB      CMD_INITIATE_SND + ((NORMAL+ZAP) & 0x07), TRIG_FLANGES_ON +((NORMAL+ZAP) & 0x80)
  0000002A                M ICNT += 1
                          M 
                      02700         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A    ; Volume set by Misc Vol
000908 80E1 0A90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A
00090C                02701 CH9SC0_WHEEL_SOUND2
                      02702 
                      02703         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
00090C 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02704                 BRANCH_TO       CH9SC0_WHEEL_SOUND
                          M         
                          M         if      (CH9SC0_WHEEL_SOUND-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH9SC0_WHEEL_SOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00090E 12C9               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_WHEEL_SOUND-SKEME_BASE)) & 0x0F) , low (CH9SC0_WHE
                          M         endif
                          M                 
                      02705         BRANCH_TO       CH9SC0_NO_WHEEL_SOUND
                          M         
                          M         if      (CH9SC0_NO_WHEEL_SOUND-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 87
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 error   CH9SC0_NO_WHEEL_SOUND range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000910 34C9               M                 DB      CMD_GOTO_SND + ((high (CH9SC0_NO_WHEEL_SOUND-SKEME_BASE)) & 0x0F) , low (CH9SC0_
                          M         endif
                          M                 
                      02706 ;-
000912                02707 CH9SC0_WHEEL_SOUND
                      02708 
                      02709         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_C   ;12/19/17
000912 80E1 0C8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_C
                      02710         PLAY    HNDL_SC0_WHEEL_FLANGE1,loop_till_FLANGES_OFF,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
000916 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_WHEEL_FLANGE1 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHE
000918 8B04               M                 DB      ((loop_till_FLANGES_OFF>>2)&0x07)+loop_STD, (HNDL_SC0_WHEEL_FLANGE1 & 0x3F)+((lo
                          M         list
                      02711         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_D   ;12/19/17
00091A 80E1 0D8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_D
                      02712         PLAY    HNDL_SC0_WHEEL_FLANGE2,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
00091E 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_WHEEL_FLANGE2 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHE
000920 0C00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_WHEEL_FLANGE2 & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      02713         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL           
000922 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+WORK_SPEED,MAXP_DIESEL,DI
                      02714         
                      02715         PLAY    HNDL_SC0_WHEEL_FLANGE2,loop_till_FLANGES_OFF,loop_INVERT
                          M         list ;4 byte XPLAY      [HANDLE]
000926 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_WHEEL_FLANGE2 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHE
000928 8C0C               M                 DB      ((loop_till_FLANGES_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_WHEEL_FLANGE2 & 0x3F)+(
                          M         list
                      02716         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_C   ;12/19/17
00092A 80E1 0C8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_C
                      02717         PLAY    HNDL_SC0_WHEEL_FLANGE1,no_loop,loop_STD                   
                          M         list ;4 byte XPLAY      [HANDLE]
00092E 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_WHEEL_FLANGE1 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHE
000930 0B00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_WHEEL_FLANGE1 & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      02718 
                      02719         END_SOUND
000932 0000               M                 DB      CMD_END_SND,0
                      02720          
                      02721 
000934                02722 CH9SC0_NO_WHEEL_SOUND           
                      02723         LOAD_MODIFIER MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B
000934 80E1 0B90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B
                      02724         END_SOUND
000938 0000               M                 DB      CMD_END_SND,0
                      02725         
                      02726         
                      02727 ;------------------------------------------------
                      02728 ;-----------  PERSISTENT air compressor on TIMER/speed and SF20,*** 11/21 BRK/zap with BELL or DYNAMICS!
                      02729 ;------------------------------------------------
                      02730         INITIATE_SOUND  TRIG_SCAT1,NORMAL               ;NORMAL+ZAP             ;RUN_WHILE_TRIG 
00093A 6190               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_SCAT1 +((NORMAL) & 0x80)
  0000002B                M ICNT += 1
                          M 
00093C                02731 CH8SC0_AIR_PLAY
                      02732         ;interlock scatter event handler here to prevent play after disable.
                      02733         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,COMP_MASK0,~COMP_MASK0,SKIP_SAME     ;bit0   COMPRESS
00093C 1EFC FE01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,COMP_MASK0,~COMP_MASK0
                      02734                 END_SOUND       
000940 0000               M                 DB      CMD_END_SND,0
                      02735         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
000942 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      02736                 END_SOUND        ;interlock is 00, freeze               ;Skipped when ARG1 = ARG2
000946 0000               M                 DB      CMD_END_SND,0
                      02737 
                      02738         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_COMPR_ON                ;disable
000948 1F04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_COMPR_ON 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 88
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02739                 END_SOUND
00094A 0000               M                 DB      CMD_END_SND,0
                      02740                         
                      02741         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
00094C 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      02742                 BRANCH_TO       CH8SC0_NO_COMP ;until startup done
                          M         
                          M         if      (CH8SC0_NO_COMP-SKEME_BASE) > 0xFFF                 ;check branch size in SCHEME
                          M                 error   CH8SC0_NO_COMP range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000950 8CC9               M                 DB      CMD_GOTO_SND + ((high (CH8SC0_NO_COMP-SKEME_BASE)) & 0x0F) , low (CH8SC0_NO_COMP
                          M         endif
                          M                 
                      02743  
                      02744         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COMPRESSOR_PUMP_VOLUME,SCALE_A
000952 80E1 0AAE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COMPRESSOR_PUMP_VOLUME,S
                      02745         
                      02746         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
000956 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02747                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COMPRESSOR_PUMP_VOLUME,SCALE_B
000958 80E1 0BAE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COMPRESSOR_PUMP_VOLUME,S
                      02748         PLAY    HNDL_SC0_AIR_DRYER1,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
00095C 3740               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIR_DRYER1 & 0x3F)+((no_loop<<6)&0
                          M         list
                      02749 
00095E                02750 CH8SC0_AIR_SEQ
                      02751         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL1,AIR_PRESSURE_LIMIT,SINTEN_LOW+WORK_SPEE
00095E 21E4 4058          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL1,AIR_PRESSURE_LIM
                      02752         PLAY    HNDL_SC0_AIRCOMP_START,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
000962 2C40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIRCOMP_START & 0x3F)+((no_loop<<6
                          M         list
                      02753         
000964                02754 CH8SC0_AIR_LOOPER
                      02755 
000964                02756 CH8SC0_NOT_SHAFT_DRIVEN
                      02757         ;play only one sound fragment:
                      02758         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL
000964 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESE
                      02759                 
                      02760         ;estop is on:
                      02761         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_ESTOP_ON                ;disable
000968 1604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_ESTOP_ON 
                      02762                 END_SOUND
00096A 0000               M                 DB      CMD_END_SND,0
                      02763                 
                      02764         PLAY    HNDL_SC0_AIRCOMP_RUN1,no_loop,loop_INVERT       
                          M         list ;2 byte PLAY  [HANDLE]
00096C 2D48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_AIRCOMP_RUN1 & 0x3F)+((no_loop<<
                          M         list
                      02765         PLAY    HNDL_SC0_AIRCOMP_RUN1,no_loop,loop_INVERT       
                          M         list ;2 byte PLAY  [HANDLE]
00096E 2D48               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_AIRCOMP_RUN1 & 0x3F)+((no_loop<<
                          M         list
                      02766         BRANCH_TO       CH8SC0_AIR_LOOP_END
                          M         
                          M         if      (CH8SC0_AIR_LOOP_END-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH8SC0_AIR_LOOP_END range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000970 72C9               M                 DB      CMD_GOTO_SND + ((high (CH8SC0_AIR_LOOP_END-SKEME_BASE)) & 0x0F) , low (CH8SC0_AI
                          M         endif
                          M                 
                      02767 
                      02768                         
000972                02769 CH8SC0_AIR_LOOP_END     
                      02770         ;loop unitl max pressure:
                      02771         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,+0x01,80   ;increment
000972 BDE6 5001          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,+0x01,80
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 89
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02772         ;max AIR PRESSURE reset
                      02773         ;MIN_AIR_PRESS  EQU     40
                      02774         ;AIR_PRESSURE_LIMIT  ;notCV149 Compressor/Airpump run time              [88]
                      02775         ;AIR_PRESS              EQU WORK_USER_3 ; used to save current air or brake pressure
                      02776 
                      02777         MASK_COMPARE AIR_PRESS,IMMED_DATA,AIR_PRESSURE_LIMIT,COMP_ALL,SKIP_GRTR
000976 1DFF 0058          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,AIR_PRESS,AIR_PRESSURE_LIMIT,COMP_ALL
                      02778                 BRANCH_TO       CH8SC0_AIR_LOOPER
                          M         
                          M         if      (CH8SC0_AIR_LOOPER-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH8SC0_AIR_LOOPER range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00097A 64C9               M                 DB      CMD_GOTO_SND + ((high (CH8SC0_AIR_LOOPER-SKEME_BASE)) & 0x0F) , low (CH8SC0_AIR_
                          M         endif
                          M                 
                      02779         BRANCH_TO       CH8SC0_AIR_PRESS_LIMIT
                          M         
                          M         if      (CH8SC0_AIR_PRESS_LIMIT-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH8SC0_AIR_PRESS_LIMIT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00097C 7EC9               M                 DB      CMD_GOTO_SND + ((high (CH8SC0_AIR_PRESS_LIMIT-SKEME_BASE)) & 0x0F) , low (CH8SC0
                          M         endif
                          M                 
                      02780 
00097E                02781 CH8SC0_AIR_PRESS_LIMIT
                      02782         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+AIR_PRESS,AIR_PRESSURE_LIMIT,0              ;CLEAR 
00097E 1DE6 0058          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+AIR_PRESS,AIR_PRESSURE_LIMIT,
                      02783         
000982                02784 CH8SC0_AIR_PRESS_EXIT
                      02785         PLAY    HNDL_SC0_AIRCOMP_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000982 2E40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIRCOMP_END & 0x3F)+((no_loop<<6)&
                          M         list
                      02786         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_DRYER_VOLUME,SCALE_E
000984 80E1 0EAD          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_DRYER_VOLUME,SCALE_E
                      02787 
                      02788         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL1,AIRPUMP_START_RATE,SINTEN_LOW+WORK_SPEE
000988 21E4 401E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL1,AIRPUMP_START_RA
                      02789         
00098C                02790 CH8SC0_NO_COMP ;until startup done
                      02791         BRANCH_TO       CH15SC0_PLAY_DRYER
                          M         
                          M         if      (CH15SC0_PLAY_DRYER-SKEME_BASE) > 0xFFF             ;check branch size in SCHEME
                          M                 error   CH15SC0_PLAY_DRYER range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
00098C 8CC5               M                 DB      CMD_GOTO_SND + ((high (CH15SC0_PLAY_DRYER-SKEME_BASE)) & 0x0F) , low (CH15SC0_PL
                          M         endif
                          M                 
                      02792         END_SOUND       
00098E 0000               M                 DB      CMD_END_SND,0
                      02793         
                      02794         
                      02795         
                      02796 ;------------------------------------------------
                      02797 ;-----------  PERSISTENT vary load on TIMER/speed 
                      02798 ;       TRIM NOTCH AND IDLE
                      02799 ;------------------------------------------------
                      02800         INITIATE_SOUND  TRIG_SCAT5,NORMAL+ZAP           ;RUN_WHILE_TRIG                 
000990 6591               M                 DB      CMD_INITIATE_SND + ((NORMAL+ZAP) & 0x07), TRIG_SCAT5 +((NORMAL+ZAP) & 0x80)
  0000002C                M ICNT += 1
                          M 
                      02801         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x14,0   ;decrease
000992 BDE6 00EC          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x14,0
                      02802         MASK_COMPARE COUNT_LOOP,IMMED_DATA,3,COMP_ALL,SKIP_LESS    
000996 1AFE 0003          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,COUNT_LOOP,3,COMP_ALL
                      02803                 BRANCH_TO       CH13SC0_MOVING_EXIT
                          M         
                          M         if      (CH13SC0_MOVING_EXIT-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH13SC0_MOVING_EXIT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 90
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
00099A D4C9               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_MOVING_EXIT-SKEME_BASE)) & 0x0F) , low (CH13SC0_M
                          M         endif
                          M                 
                      02804 
                      02805         ;aux or hep is running:
                      02806         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_AXGEN_ON; But branch if SF30 was previously on
00099C 2404               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_AXGEN_ON 
                      02807                 END_SOUND       
00099E 0000               M                 DB      CMD_END_SND,0
                      02808                 
                      02809         ;estop is on:
                      02810         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_ESTOP_ON                ;disable
0009A0 1604               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_ESTOP_ON 
                      02811                 END_SOUND
0009A2 0000               M                 DB      CMD_END_SND,0
                      02812                 
                      02813         ;in advanced consist:
                      02814         MASK_COMPARE    SCV_CV19,IMMED_DATA,1,COMP_ALL,SKIP_LESS
0009A4 12FE 0001          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,SCV_CV19,1,COMP_ALL
                      02815                 END_SOUND       ;WHEN IN ADVANCED CONSIST DO NOT AUTO VARY NOTCH SOUNDS...4/3/2015
0009A8 0000               M                 DB      CMD_END_SND,0
                      02816 
                      02817         MASK_COMPARE    SCV_FEATURE2_DISABLE,IMMED_DATA,0x01,COMP_bit3,SKIP_SAME                ;SKIP_LE
0009AA B9FC F701          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE2_DISABLE,0x01,COMP_bit3
                      02818                 END_SOUND       
0009AE 0000               M                 DB      CMD_END_SND,0
                      02819         ;moving at all?:
                      02820         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR ;compare current speed 
0009B0 00FF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      02821                 BRANCH_TO       CH13SC0_MOVING_STOPPED  
                          M         
                          M         if      (CH13SC0_MOVING_STOPPED-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH13SC0_MOVING_STOPPED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0009B4 D0C9               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_MOVING_STOPPED-SKEME_BASE)) & 0x0F) , low (CH13SC
                          M         endif
                          M                 
0009B6                02822 CH13SC0_FLANGE_SOUND    
                      02823         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A    ; Volume set by Misc Vol
0009B6 80E1 0A90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A
                      02824         PLAY    HNDL_SC0_WHEEL_FLANGE1,no_loop,loop_STD 
                          M         list ;4 byte XPLAY      [HANDLE]
0009BA 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_WHEEL_FLANGE1 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHE
0009BC 0B00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_WHEEL_FLANGE1 & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      02825         ;cutdown 4k:LOAD_MODIFIER       MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B    ; Volume
                      02826         ;cutdown 4k:PLAY        HNDL_SC0_WHEEL_FLANGE1,no_loop,loop_STD 
                      02827 
                      02828         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A    ; Volume set by Misc Vol
0009BE 80E1 0A90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_A
                      02829         PLAY    HNDL_SC0_WHEEL_FLANGE2,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
0009C2 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_WHEEL_FLANGE2 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHE
0009C4 0C00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_WHEEL_FLANGE2 & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      02830         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B    ; Volume set by Misc Vol
0009C6 80E1 0B90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_B
                      02831         PLAY    HNDL_SC0_WHEEL_FLANGE2,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
0009CA 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_WHEEL_FLANGE2 & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHE
0009CC 0C00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_WHEEL_FLANGE2 & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      02832         BRANCH_TO       CH13SC0_MOVING_EXIT
                          M         
                          M         if      (CH13SC0_MOVING_EXIT-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH13SC0_MOVING_EXIT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0009CE D4C9               M                 DB      CMD_GOTO_SND + ((high (CH13SC0_MOVING_EXIT-SKEME_BASE)) & 0x0F) , low (CH13SC0_M
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 91
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M                 
                      02833 
0009D0                02834 CH13SC0_MOVING_STOPPED
                      02835         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,0x00,0       ; set Manual Notch value
0009D0 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,0x00,0
                      02836                 
0009D4                02837 CH13SC0_MOVING_EXIT
                      02838         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL5,SCALE_MAX,SINTEN_MID+WORK_SPEED+WORK_PE
0009D4 25E4 790F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL5,SCALE_MAX,SINTEN
                      02839         
                      02840         END_SOUND
0009D8 0000               M                 DB      CMD_END_SND,0
                      02841         
                      02842         
                      02843         ;END CH3_==============================================================
                      02844 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 92
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02845                 PAGE
                      02846         
                      02847 ;------------------------------------------------
                      02848 ;Start Channel 4                
                      02849 ;------------------------------------------------
0009DA                02850 CH4SC0_BEGIN
                      02851         CHANNEL_START   4       ;typically TRANSIENT channel for QUEUED non-persistent sounds
0009DA 0481               M                 DB      CMD_START_CHNL,4
                          M ;CTEMP += 1
                      02852 
                      02853 ;------------------------------------------------
                      02854 ;added 8/13/06 to holdoff until START is complete
                      02855 ;------------------------------------------------
                      02856 ;UC4.0================
                      02857         INITIATE_SOUND  TRIG_SND_ACTV11,NORMAL                          ;run ONCE only
0009DC 0F90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_SND_ACTV11 +((NORMAL) & 0x80)
  0000002D                M ICNT += 1
                          M 
0009DE                02858 CH4SC0_INTERLOCK_HOLD
                      02859 
                      02860         DELAY_SOUND DELAY_THIS,24,DELAY_GLOBAL
0009DE 18B5               M                 DB      CMD_DELAY_SND + (DELAY_GLOBAL & 0x01), (24 & 0x7F)+DELAY_THIS 
                      02861         
                      02862         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
0009E0 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      02863                 BRANCH_TO       CH4SC0_INTERLOCK_HOLD                                   ;interlock is 00
                          M         
                          M         if      (CH4SC0_INTERLOCK_HOLD-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH4SC0_INTERLOCK_HOLD range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0009E4 DEC9               M                 DB      CMD_GOTO_SND + ((high (CH4SC0_INTERLOCK_HOLD-SKEME_BASE)) & 0x0F) , low (CH4SC0_
                          M         endif
                          M                 
                      02864         ;DO NOT reset blend, gain, pitch here:
                      02865         END_SOUND
0009E6 0000               M                 DB      CMD_END_SND,0
                      02866         
                      02867         
                      02868         
                      02869 ;BEGIN CH4SC0_ ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                      02870         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02871         ;       THIS ROUTINE IS CH4_ (NOT INTERRUPTABLE)
                      02872 
                      02873         ;----------------- SF4= DYNAMIC BRAKE fans- persistent instaed of 
                      02874         ;------------------------------------------------
                      02875         INITIATE_SOUND  TRIG_DYNBRK_ON,NORMAL
0009E8 0B90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_DYNBRK_ON +((NORMAL) & 0x80)
  0000002E                M ICNT += 1
                          M 
                      02876          
                      02877         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING
0009EA 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02878                 BRANCH_TO       CH5SC0_HAND_BRAKE
                          M         
                          M         if      (CH5SC0_HAND_BRAKE-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH5SC0_HAND_BRAKE range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0009EC 32CA               M                 DB      CMD_GOTO_SND + ((high (CH5SC0_HAND_BRAKE-SKEME_BASE)) & 0x0F) , low (CH5SC0_HAND
                          M         endif
                          M                 
                      02879         ;               bit5 disable Dynamic BRAKES                                     =32
                      02880         MASK_COMPARE    SCV_FEATURE3_DISABLE,IMMED_DATA,0x00,COMP_bit5,SKIP_SAME                ;SKIP_LE
0009EE BAFC DF00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE3_DISABLE,0x00,COMP_bit5
                      02881                 BRANCH_TO       CH5SC0_DYN_DISABLED
                          M         
                          M         if      (CH5SC0_DYN_DISABLED-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH5SC0_DYN_DISABLED range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0009F2 18CA               M                 DB      CMD_GOTO_SND + ((high (CH5SC0_DYN_DISABLED-SKEME_BASE)) & 0x0F) , low (CH5SC0_DY
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 93
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M                 
                      02882                 
                      02883         ;Proper working Dynamic Brakes. PM Spools down to Idle and then rises as Dynamic Brake Fan Runs.
                      02884         ; AND The Engine Brakes faster due to Dynamic Brake motor Logic.        11/26/2015
                      02885         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,0,0        ;clr SPD DELTA HISTORY
0009F4 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,0,0
                      02886         ;Vary Dynamic Braking on SF4 loop 2/10/15
                      02887         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,DYN_CTRL_MASK3,~DYN_CTRL_MASK3,SKIP_SAME     ;TEST BI
0009F8 1EFC F708          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,DYN_CTRL_MASK3,~DYN_CTRL_M
                      02888                 BRANCH_TO       CH5SC0_DYN_NOTCH5       ;bit3   DYNAMIC BRAKE CONTROL INTERLOCK 
                          M         
                          M         if      (CH5SC0_DYN_NOTCH5-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH5SC0_DYN_NOTCH5 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
0009FC FEC9               M                 DB      CMD_GOTO_SND + ((high (CH5SC0_DYN_NOTCH5-SKEME_BASE)) & 0x0F) , low (CH5SC0_DYN_
                          M         endif
                          M                 
0009FE                02889 CH5SC0_DYN_NOTCH5
                      02890 ;       INCREASE THROTTLE TO - Notch 4
                      02891         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_INTEGRATE+WORK_SPEED_DELTA,+0x10,MAX_NOTCH_VAL   ;increme
0009FE ABE6 2010          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+WORK_SPEED_DELTA,+0x10,M
                      02892         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_DYN_VOLUME,SCALE_E               ;0X14 OR
000A02 80E1 0EB2          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_DYN_VOLUME,SCALE_E
                      02893         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL       
000A06 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESE
                      02894         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,DYN_CTRL_MASK3,MERGE_ALL_MASK ;Set Var
000A0A 5EE6 0008          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,DYN_CTRL_MASK3,
                      02895         PLAY    HNDL_SC0_DYN_BRAKE_START,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000A0E 2940               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_DYN_BRAKE_START & 0x3F)+((no_loop<
                          M         list
                      02896          
000A10                02897 CH5SC0_PLAY_DYN_NOTCH
                      02898         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL       
000A10 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0+WORK_SPEED,MAXP_DIESE
                      02899         ;PLAY   HNDL_SC0_DYN_BRAKE_START,no_loop,loop_STD
                      02900         PLAY    HNDL_SC0_DYN_BRAKE_SUSTAIN,loop_till_DYNBRK_OFF,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000A14 EA4A               M         DB      CMD_PLAY_SND+((loop_till_DYNBRK_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_DYN_BRAKE_SUSTAIN &
                          M         list
                      02901         PLAY    HNDL_SC0_DYN_BRAKE_SUSTAIN,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000A16 2A40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_DYN_BRAKE_SUSTAIN & 0x3F)+((no_loo
                          M         list
                      02902                                         
000A18                02903 CH5SC0_DYN_DISABLED
                      02904         PLAY    HNDL_SC0_DYN_BRAKE_END,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
000A18 2B40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_DYN_BRAKE_END & 0x3F)+((no_loop<<6
                          M         list
                      02905         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0   ; set Manual Notch value
000A1A 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,NOTCH1,0
                      02906 
                      02907         ;Reset dynamics to normal
                      02908         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~DYN_CTRL_MASK3,MERGE_ALL_MASK       
000A1E 3EE6 00F7          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~DYN_CTRL_MASK
                      02909         LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+0x0,IMAXP_DIESEL,DITHERP_DIESEL ;for discrete no
000A22 A0E2 005E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+0x0,IMAXP_DIESEL,DITHERP_
                      02910         LOAD_MODIFIER  MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_DYN_VOLUME,SCALE_B        
000A26 80E1 0BB2          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_DYN_VOLUME,SCALE_B
                      02911 
                      02912         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x12,0   ;decrease
000A2A BDE6 00EE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x12,0
                      02913         END_SOUND
000A2E 0000               M                 DB      CMD_END_SND,0
                      02914         
                      02915                 
                      02916 ;------------------------------------------------
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 94
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02917 ; HAND BRAKE -- while stopped
                      02918 ;------------------------------------------------
                      02919         INITIATE_SOUND  TRIG_HBRAKE_ON,NORMAL
000A30 1590               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_HBRAKE_ON +((NORMAL) & 0x80)
  0000002F                M ICNT += 1
                          M 
                      02920 
000A32                02921 CH5SC0_HAND_BRAKE
                      02922         ;should not be on deck pulling brake when loco is in motion:
                      02923         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_MOVING
000A32 0E04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_MOVING 
                      02924                 END_SOUND       
000A34 0000               M                 DB      CMD_END_SND,0
                      02925                 
                      02926         ;Reset dynamics to normal
                      02927         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_AND+USER_INTLK_BITS,~DYN_CTRL_MASK3,MERGE_ALL_MASK       
000A36 3EE6 00F7          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_AND+USER_INTLK_BITS,~DYN_CTRL_MASK
                      02928         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_F   
000A3A 80E1 0F8F          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_BRAKE_VOLUME,SCALE_F
                      02929         
                      02930         PLAY    HNDL_SC0_HBRAKE_BEGIN,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000A3E 2540               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HBRAKE_BEGIN & 0x3F)+((no_loop<<6)
                          M         list
                      02931         ;PLAY   HNDL_SC0_HBRAKE_LOOP,no_loop,loop_INVERT                
                      02932         PLAY    HNDL_SC0_HBRAKE_LOOP,loop_till_HBRAKE_OFF,loop_INVERT
                          M         list ;2 byte PLAY  [HANDLE]
000A40 664D               M         DB      CMD_PLAY_SND+((loop_till_HBRAKE_OFF>>2)&0x07)+loop_INVERT, (HNDL_SC0_HBRAKE_LOOP & 0x3F)
                          M         list
                      02933         PLAY    HNDL_SC0_HBRAKE_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000A42 2840               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_HBRAKE_END & 0x3F)+((no_loop<<6)&0
                          M         list
                      02934         
                      02935         END_SOUND               
000A44 0000               M                 DB      CMD_END_SND,0
                      02936         
                      02937 
                      02938         
                      02939         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      02940         ;       THIS ROUTINE IS CH4_(NOT INTERRUPTABLE)
                      02941         ;----------------- SF25= AUX Generator - persistent 
                      02942         ;------------------------------------------------
                      02943         INITIATE_SOUND  TRIG_AXGEN_ON,NORMAL+NO_PREEMPT_TRIG            ; Do not allow aux to be interru
000A46 2494               M                 DB      CMD_INITIATE_SND + ((NORMAL+NO_PREEMPT_TRIG) & 0x07), TRIG_AXGEN_ON +((NORMAL+NO
  00000030                M ICNT += 1
                          M 
                      02944         LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK  ;STD full volu
000A48 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      02945 
                      02946         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x01,COMP_bit0,SKIP_SAME         ;SKIP_LESSSKIP_G
000A4C B8FC FE01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x01,COMP_bit0
                      02947                 BRANCH_TO       CH12SC0_RUN_AUX
                          M         
                          M         if      (CH12SC0_RUN_AUX-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH12SC0_RUN_AUX range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000A50 54CA               M                 DB      CMD_GOTO_SND + ((high (CH12SC0_RUN_AUX-SKEME_BASE)) & 0x0F) , low (CH12SC0_RUN_A
                          M         endif
                          M                 
                      02948         BRANCH_TO       CH12SC0_RUN_HEP
                          M         
                          M         if      (CH12SC0_RUN_HEP-SKEME_BASE) > 0xFFF                ;check branch size in SCHEME
                          M                 error   CH12SC0_RUN_HEP range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000A52 6CCA               M                 DB      CMD_GOTO_SND + ((high (CH12SC0_RUN_HEP-SKEME_BASE)) & 0x0F) , low (CH12SC0_RUN_H
                          M         endif
                          M                 
                      02949         
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 95
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A54                02950 CH12SC0_RUN_AUX
                      02951         ;Most FP-units for passenger service were built in the early 50's. They came with steam generato
                      02952         ;Starting around 1960 some replaced the steam generators with Cummins diesel HEP units 
                      02953         ;putting out 440VAc, Others came with Detroit Diesel HEP units. 
                      02954         ;Later NS OSX units have revised AUX generators.
                      02955         PLAY    HNDL_SC0_AUX_START,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
000A54 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_AUX_START & 0xC0)+1 ;ADD REV PLAY FLAG PLUS OTHER BI
000A56 0D00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AUX_START & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      02956         ;               PLAY_AUX_GEN
                      02957         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_AUXGEN_VOLUME,SCALE_A
000A58 80E1 0AAA          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_AUXGEN_VOLUME,SCALE_A
                      02958         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   ;raise voulme if not moving
000A5C 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      02959                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_AUXGEN_VOLUME,SCALE_B
000A5E 80E1 0BAA          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_AUXGEN_VOLUME,SCALE_B
                      02960 
                      02961         PLAY    HNDL_SC0_AUX_RUN,loop_till_init_TRIG,loop_INVERT
                          M         list ;4 byte XPLAY      [HANDLE]
000A62 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_AUX_RUN & 0xC0)+1   ;ADD REV PLAY FLAG PLUS OTHER BI
000A64 CE09               M                 DB      ((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_AUX_RUN & 0x3F)+((loop_ti
                          M         list
                      02962         PLAY    HNDL_SC0_AUX_END,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
000A66 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_AUX_END & 0xC0)+1   ;ADD REV PLAY FLAG PLUS OTHER BI
000A68 0F00               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AUX_END & 0x3F)+((no_loop<<6)&0xC0) 
                          M         list
                      02963         END_SOUND
000A6A 0000               M                 DB      CMD_END_SND,0
                      02964 
000A6C                02965 CH12SC0_RUN_HEP         ;Run at Notch 7
                      02966         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,0x60,0       
000A6C 0BE6 0060          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,0x60,0
                      02967         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_F                             
000A70 80E1 0FAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_F
                      02968         PLAY    HNDL_SC0_FAN1_LOOP,no_loop,loop_INVERT          
                          M         list ;2 byte PLAY  [HANDLE]
000A74 3548               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((no_loop<<6)&
                          M         list
                      02969         PLAY    HNDL_SC0_FAN1_LOOP,loop_till_init_TRIG,loop_INVERT      
                          M         list ;2 byte PLAY  [HANDLE]
000A76 F549               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((
                          M         list
                      02970 
                      02971         END_SOUND
000A78 0000               M                 DB      CMD_END_SND,0
                      02972         
                      02973         
                      02974         
                      02975 
                      02976 ;----------------------------------------
                      02977 ;   TIMED CYCLE OF FAN1 (TIMER SCAT3)
                      02978 ;----------------------------------------
                      02979         INITIATE_SOUND TRIG_SCAT3,NORMAL+ZAP            ; Allows air sounds to be preempted     
000A7A 6391               M                 DB      CMD_INITIATE_SND + ((NORMAL+ZAP) & 0x07), TRIG_SCAT3 +((NORMAL+ZAP) & 0x80)
  00000031                M ICNT += 1
                          M 
                      02980         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x12,0   ;decrease
000A7C BDE6 00EE          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x12,0
                      02981         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,COMP_MASK0,~COMP_MASK0,SKIP_SAME     ;bit0   COMPRESS
000A80 1EFC FE01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,COMP_MASK0,~COMP_MASK0
                      02982                 END_SOUND
000A84 0000               M                 DB      CMD_END_SND,0
                      02983         ;interlock scatter event handler here to prevent play after disable.
                      02984         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
000A86 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      02985                 END_SOUND               ;Skipped when ARG1 = ARG2
000A8A 0000               M                 DB      CMD_END_SND,0
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 96
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02986         ;disable fans with bit3
                      02987         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x01,COMP_bit3,SKIP_SAME         ;SKIP_LESSSKIP_G
000A8C B8FC F701          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x01,COMP_bit3
                      02988                 END_SOUND                       ;Skipped when ARG1 = ARG2
000A90 0000               M                 DB      CMD_END_SND,0
                      02989         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_AXGEN_ON; But branch if SF30 was previously on
000A92 2404               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_AXGEN_ON 
                      02990                 END_SOUND 
000A94 0000               M                 DB      CMD_END_SND,0
                      02991         ;SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FAND_ON                ;disable
                      02992         ;       END_SOUND               
                      02993 
                      02994 
000A96                02995 CH12SC0_LOW_FAN
                      02996         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FANS_ON         ; Qualify with SF11 OFF
000A96 1A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_FANS_ON 
                      02997                 END_SOUND                                       ; Ends here if SF20 is ON       
000A98 0000               M                 DB      CMD_END_SND,0
                      02998 
                      02999         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL3,20+WORK_SPEED,SINTEN_LOW+WORK_SPEED ; r
000A9A 23E4 4014          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL3,20+WORK_SPEED,SI
                      03000         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH4,COMP_7LSB,SKIP_GRTR   ;Skip if                        
000A9E 1BFF 8030          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,PREV_NOTCH,NOTCH4,COMP_7LSB
                      03001                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_B                     
000AA2 80E1 0BAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_B
                      03002         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   ;raise voulme if not moving
000AA6 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      03003                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_C                     
000AA8 80E1 0CAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_C
                      03004         ;raise volume if in notch 4 or greater
                      03005         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH4,COMP_7LSB,SKIP_LESS    ;Skip if 
000AAC 1BFE 8030          M                 DB      CMD_MASK_COMPARE+SKIP_LESS+IMMED_DATA,PREV_NOTCH,NOTCH4,COMP_7LSB
                      03006                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_D                     
000AB0 80E1 0DAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_D
                      03007         ;cutdown 4k:PLAY        HNDL_SC0_FAN1_LOOP,no_loop,loop_STD     
                      03008         PLAY    HNDL_SC0_FAN1_LOOP,loop_till_init_TRIG,loop_INVERT      
                          M         list ;2 byte PLAY  [HANDLE]
000AB4 F549               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((
                          M         list
                      03009         ;cutdown 4k:PLAY        HNDL_SC0_FAN1_LOOP,no_loop,loop_STD
                      03010         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL3,44+WORK_SPEED,SINTEN_HIGH  ; Next cycle
000AB6 23E4 C02C          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL3,44+WORK_SPEED,SI
                      03011         END_SOUND
000ABA 0000               M                 DB      CMD_END_SND,0
                      03012 
                      03013 
                      03014 ;----------------------------------------
                      03015 ;   TIMED CYCLE OF FAN1 (TIMER SCAT2)
                      03016 ;----------------------------------------
                      03017         INITIATE_SOUND  TRIG_SCAT2,NORMAL+ZAP   ; Allows air sounds to be preempted     
000ABC 6291               M                 DB      CMD_INITIATE_SND + ((NORMAL+ZAP) & 0x07), TRIG_SCAT2 +((NORMAL+ZAP) & 0x80)
  00000032                M ICNT += 1
                          M 
                      03018         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x11,0   ;decrease
000ABE BDE6 00EF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x11,0
                      03019         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,COMP_MASK0,~COMP_MASK0,SKIP_SAME     ;bit0   COMPRESS
000AC2 1EFC FE01          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,COMP_MASK0,~COMP_MASK0
                      03020                 END_SOUND
000AC6 0000               M                 DB      CMD_END_SND,0
                      03021         ;interlock scatter event handler here to prevent play after disable.
                      03022         MASK_COMPARE    WORK_STATUS_BITS,IMMED_DATA,WKSB_INTERLOCK_MASK,~WKSB_INTERLOCK_MASK,SKIP_SAME ;
000AC8 07FC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,WKSB_INTERLOCK_MASK,~WKSB
                      03023                 END_SOUND                       ;Skipped when ARG1 = ARG2
000ACC 0000               M                 DB      CMD_END_SND,0
                      03024         
                      03025         ;disable fans with bit3
                      03026         MASK_COMPARE    SCV_FEATURE_DISABLE,IMMED_DATA,0x01,COMP_bit3,SKIP_SAME         ;SKIP_LESSSKIP_G
000ACE B8FC F701          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE_DISABLE,0x01,COMP_bit3
                      03027                 END_SOUND               ;Skipped when ARG1 = ARG2       
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 97
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000AD2 0000               M                 DB      CMD_END_SND,0
                      03028         
                      03029         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_AXGEN_ON; But branch if SF30 was previously on
000AD4 2404               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_AXGEN_ON 
                      03030                 END_SOUND       
000AD6 0000               M                 DB      CMD_END_SND,0
                      03031         ;SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FAND_ON                ;disable
                      03032         ;       END_SOUND
000AD8                03033 CH14SC0_HIGH_FAN                
                      03034         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_FANS_ON         ; Qualify with SF11 OFF
000AD8 1A04               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_FANS_ON 
                      03035                 END_SOUND                                       ; Ends here if SF20 is ON       
000ADA 0000               M                 DB      CMD_END_SND,0
                      03036                 
                      03037         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH4,COMP_ALL,SKIP_GRTR    ;Skip if 
000ADC 1BFF 0030          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,PREV_NOTCH,NOTCH4,COMP_ALL
                      03038                 BRANCH_TO       CH14SC0_LOWHIGH_FAN             
                          M         
                          M         if      (CH14SC0_LOWHIGH_FAN-SKEME_BASE) > 0xFFF            ;check branch size in SCHEME
                          M                 error   CH14SC0_LOWHIGH_FAN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000AE0 E4CA               M                 DB      CMD_GOTO_SND + ((high (CH14SC0_LOWHIGH_FAN-SKEME_BASE)) & 0x0F) , low (CH14SC0_L
                          M         endif
                          M                 
                      03039         BRANCH_TO       CH14SC0_PLAY_HIGH_FAN           
                          M         
                          M         if      (CH14SC0_PLAY_HIGH_FAN-SKEME_BASE) > 0xFFF          ;check branch size in SCHEME
                          M                 error   CH14SC0_PLAY_HIGH_FAN range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000AE2 F2CA               M                 DB      CMD_GOTO_SND + ((high (CH14SC0_PLAY_HIGH_FAN-SKEME_BASE)) & 0x0F) , low (CH14SC0
                          M         endif
                          M                 
                      03040         
000AE4                03041 CH14SC0_LOWHIGH_FAN      
                      03042         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_9                             
000AE4 80E1 09AB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_9
                      03043 
                      03044         PLAY    HNDL_SC0_FAN1_START,no_loop,loop_STD    
                          M         list ;2 byte PLAY  [HANDLE]
000AE8 3440               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_FAN1_START & 0x3F)+((no_loop<<6)&0
                          M         list
                      03045         PLAY    HNDL_SC0_FAN1_LOOP,no_loop,loop_INVERT  
                          M         list ;2 byte PLAY  [HANDLE]
000AEA 3548               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((no_loop<<6)&
                          M         list
                      03046         PLAY    HNDL_SC0_FAN1_LOOP,loop_till_init_TRIG,loop_INVERT      
                          M         list ;2 byte PLAY  [HANDLE]
000AEC F549               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((
                          M         list
                      03047         PLAY    HNDL_SC0_FAN1_END,no_loop,loop_STD              
                          M         list ;2 byte PLAY  [HANDLE]
000AEE 3640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_FAN1_END & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      03048         END_SOUND       
000AF0 0000               M                 DB      CMD_END_SND,0
                      03049         
000AF2                03050 CH14SC0_PLAY_HIGH_FAN   
                      03051         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL2,25+WORK_SPEED,SINTEN_LOW+WORK_SPEED ;  
000AF2 22E4 4019          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL2,25+WORK_SPEED,SI
                      03052         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH4,COMP_ALL,SKIP_GRTR   ;Skip if         
000AF6 1BFF 0030          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,PREV_NOTCH,NOTCH4,COMP_ALL
                      03053                 BRANCH_TO       CH14SC0_PLAY_HIGH_FAN1
                          M         
                          M         if      (CH14SC0_PLAY_HIGH_FAN1-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH14SC0_PLAY_HIGH_FAN1 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000AFA 00CB               M                 DB      CMD_GOTO_SND + ((high (CH14SC0_PLAY_HIGH_FAN1-SKEME_BASE)) & 0x0F) , low (CH14SC
                          M         endif
                          M                 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 98
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03054         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_C             ; Air volume con
000AFC 80E1 0CAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_C
                      03055         
000B00                03056 CH14SC0_PLAY_HIGH_FAN1
                      03057         SKIP_ON_TRIGGER TRIG_TRUE,TRIG_MOVING   ;raise voulme if not moving
000B00 0E05               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_TRUE & 0x03), TRIG_MOVING 
                      03058                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_B                     
000B02 80E1 0BAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_B
                      03059         ;raise volume if in notch 4 or greater
                      03060         MASK_COMPARE PREV_NOTCH,IMMED_DATA,NOTCH4,COMP_ALL,SKIP_GRTR    ;Skip if 
000B06 1BFF 0030          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,PREV_NOTCH,NOTCH4,COMP_ALL
                      03061                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_D                     
000B0A 80E1 0DAB          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_FAN_VOLUME,SCALE_D
                      03062         PLAY    HNDL_SC0_FAN1_START,no_loop,loop_STD    
                          M         list ;2 byte PLAY  [HANDLE]
000B0E 3440               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_FAN1_START & 0x3F)+((no_loop<<6)&0
                          M         list
                      03063         PLAY    HNDL_SC0_FAN1_LOOP,no_loop,loop_INVERT  
                          M         list ;2 byte PLAY  [HANDLE]
000B10 3548               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((no_loop<<6)&
                          M         list
                      03064         PLAY    HNDL_SC0_FAN1_LOOP,loop_till_init_TRIG,loop_INVERT      
                          M         list ;2 byte PLAY  [HANDLE]
000B12 F549               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_FAN1_LOOP & 0x3F)+((
                          M         list
                      03065         PLAY    HNDL_SC0_FAN1_END,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000B14 3640               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_FAN1_END & 0x3F)+((no_loop<<6)&0xC
                          M         list
                      03066         LOAD_MODIFIER   MTYPE_SCATTER,SCAT_CMD_PERIOD+SCAT_CHNL2,60+WORK_SPEED,SINTEN_MID+WORK_SPEED  ; 
000B16 22E4 603C          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SCATTER&0x0F),SCAT_CMD_PERIOD+SCAT_CHNL2,60+WORK_SPEED,SI
                      03067         
                      03068         END_SOUND
000B1A 0000               M                 DB      CMD_END_SND,0
                      03069         
                      03070         ;-------------------------------
                      03071         ;SF12 Disconnect Coupler
                      03072         ;-------------------------------
                      03073         INITIATE_SOUND  TRIG_COUPLERD_ON,NORMAL         
000B1C 1B90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_COUPLERD_ON +((NORMAL) & 0x80)
  00000033                M ICNT += 1
                          M 
                      03074 
                      03075                 BRANCH_TO       CH6SC0_PLAY_DISCONNECT
                          M         
                          M         if      (CH6SC0_PLAY_DISCONNECT-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH6SC0_PLAY_DISCONNECT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000B1E 4ACB               M                 DB      CMD_GOTO_SND + ((high (CH6SC0_PLAY_DISCONNECT-SKEME_BASE)) & 0x0F) , low (CH6SC0
                          M         endif
                          M                 
                      03076         END_SOUND 
000B20 0000               M                 DB      CMD_END_SND,0
                      03077 
                      03078         
                      03079         ;---------------------------------------------
                      03080         ;  Accelerate   Play UnCoupler            ::::: New 11/19/2015
                      03081         ;---------------------------------------------
                      03082         INITIATE_SOUND T_SPD_ACCEL1,NORMAL
000B22 7390               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), T_SPD_ACCEL1 +((NORMAL) & 0x80)
  00000034                M ICNT += 1
                          M 
                      03083         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x10,0   ;decrease
000B24 BDE6 00F0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x10,0
                      03084         ;set drift interlock:
                      03085         ;(drift is interlocked when not decelerating. when accelerating heavy sounds play.
                      03086         ;interlock is set on bit is =1)(i.e. DRIFTING IS OFF)
                      03087         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,VARY_DRIFT_MASK7,MERGE_ALL_MASK       
000B28 5EE6 0080          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,VARY_DRIFT_MASK
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 99
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03088         ;=============== ACCEL REPEATS MANY TIMES =================
                      03089         ;  Accelerate   Play UnCoupler            ::::: New 11/19/2015
                      03090         MASK_COMPARE    WORK_SPEED,IMMED_DATA,0x01,COMP_ALL,SKIP_GRTR           ; Check if stopped
000B2C 00FF 0001          M                 DB      CMD_MASK_COMPARE+SKIP_GRTR+IMMED_DATA,WORK_SPEED,0x01,COMP_ALL
                      03091                 BRANCH_TO       CH6SC0_PLAY_BLIP2
                          M         
                          M         if      (CH6SC0_PLAY_BLIP2-SKEME_BASE) > 0xFFF              ;check branch size in SCHEME
                          M                 error   CH6SC0_PLAY_BLIP2 range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000B30 34CB               M                 DB      CMD_GOTO_SND + ((high (CH6SC0_PLAY_BLIP2-SKEME_BASE)) & 0x0F) , low (CH6SC0_PLAY
                          M         endif
                          M                 
                      03092         END_SOUND
000B32 0000               M                 DB      CMD_END_SND,0
                      03093         
000B34                03094 CH6SC0_PLAY_BLIP2
                      03095         ;blip motor here:
                      03096         LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_2,SCALE_MAX   ;Increment
000B34 BCE6 0F02          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+VARY_LOAD,+SCALE_INCR_2,
                      03097 
                      03098         MASK_COMPARE WORK_STATUS_BITS,IMMED_DATA,0x02,~WKSB_DIRNOW_MASK,SKIP_SAME               ; Skip t
000B38 07FC FD02          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,WORK_STATUS_BITS,0x02,~WKSB_DIRNOW_MASK
                      03099                 END_SOUND
000B3C 0000               M                 DB      CMD_END_SND,0
                      03100                 
                      03101 
                      03102         LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_E 
000B3E 80E1 0EB0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_COUPLER_VOLUME,SCALE_E
                      03103                 
                      03104         MASK_COMPARE    USER_INTLK_BITS,IMMED_DATA,COUPLER_MASK5,~COUPLER_MASK5,SKIP_SAME       ;TEST BI
000B42 1EFC DF20          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,USER_INTLK_BITS,COUPLER_MASK5,~COUPLER_MAS
                      03105                 BRANCH_TO       CH6SC0_PLAY_DISCONNECT
                          M         
                          M         if      (CH6SC0_PLAY_DISCONNECT-SKEME_BASE) > 0xFFF         ;check branch size in SCHEME
                          M                 error   CH6SC0_PLAY_DISCONNECT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000B46 4ACB               M                 DB      CMD_GOTO_SND + ((high (CH6SC0_PLAY_DISCONNECT-SKEME_BASE)) & 0x0F) , low (CH6SC0
                          M         endif
                          M                 
                      03106         BRANCH_TO       CH6SC0_PLAYED_DISCONNECT
                          M         
                          M         if      (CH6SC0_PLAYED_DISCONNECT-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH6SC0_PLAYED_DISCONNECT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000B48 52CB               M                 DB      CMD_GOTO_SND + ((high (CH6SC0_PLAYED_DISCONNECT-SKEME_BASE)) & 0x0F) , low (CH6S
                          M         endif
                          M                 
                      03107         
                      03108 
000B4A                03109 CH6SC0_PLAY_DISCONNECT
                      03110 
                      03111         SKIP_ON_TRIGGER TRIG_FALSE,TRIG_UNCOUPLE_ON     ; Skip if SF3 is not currently on -- lift ring m
000B4A 1804               M                 DB      CMD_SKIP_ON_TRIGGER + (TRIG_FALSE & 0x03), TRIG_UNCOUPLE_ON 
                      03112                 BRANCH_TO       CH6SC0_PLAYED_DISCONNECT
                          M         
                          M         if      (CH6SC0_PLAYED_DISCONNECT-SKEME_BASE) > 0xFFF       ;check branch size in SCHEME
                          M                 error   CH6SC0_PLAYED_DISCONNECT range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000B4C 52CB               M                 DB      CMD_GOTO_SND + ((high (CH6SC0_PLAYED_DISCONNECT-SKEME_BASE)) & 0x0F) , low (CH6S
                          M         endif
                          M                 
                      03113         PLAY    HNDL_SC0_UNCOUPLE_DISCONNECT,no_loop,loop_STD
                          M         list ;4 byte XPLAY      [HANDLE]
000B4E 41F2               M                 DB      CMD_PLAY_EXPANDED,(HNDL_SC0_UNCOUPLE_DISCONNECT & 0xC0)+1 ;ADD REV PLAY FLAG PLU
000B50 0100               M                 DB      ((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_UNCOUPLE_DISCONNECT & 0x3F)+((no_loop<<
                          M         list
                      03114                   
000B52                03115 CH6SC0_PLAYED_DISCONNECT                
                      03116 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 100
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03117         LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,MERGE_ALL_MASK  ;OR=SETt
000B52 5EE6 0020          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,M
                      03118         
                      03119         END_SOUND
000B56 0000               M                 DB      CMD_END_SND,0
                      03120                 
                      03121         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      03122                 ;TRACTION SOUNDS -- CONTINUOUS:
                      03123                 ;----------------------------------------
                      03124                 ;    Start moving from idle                                 
                      03125                 ;----------------------------------------
                      03126 
                      03127                 INITIATE_SOUND  T_SPD_IDLEXIT,RUN_WHILE_TRIG+ZAP
000B58 7693               M                 DB      CMD_INITIATE_SND + ((RUN_WHILE_TRIG+ZAP) & 0x07), T_SPD_IDLEXIT +((RUN_WHILE_TRI
  00000035                M ICNT += 1
                          M 
                      03128                 MASK_COMPARE    SCV_FEATURE4_DISABLE,IMMED_DATA,0x00,COMP_bit0,SKIP_SAME                
000B5A BBFC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE4_DISABLE,0x00,COMP_bit0
                      03129                         END_SOUND                       ;bypass disabled traction sounds:
000B5E 0000               M                 DB      CMD_END_SND,0
                      03130 
                      03131                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_TRACTION_MOTOR_VOLUME,SCALE_9  ;use VOL
000B60 80E1 09AF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_TRACTION_MOTOR_VOLUME,SC
                      03132                 PLAY HNDL_SC0_TRACTION_START,no_loop,loop_STD                           ;Play idle to ru
                          M         list ;2 byte PLAY  [HANDLE]
000B64 2F40               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_TRACTION_START & 0x3F)+((no_loop<<
                          M         list
                      03133 ;There is no END_SOUND callout here - otherwise it plays this more than once!! 
                      03134 
                      03135                 ;----------------------------------------
                      03136                 ;  Run at speed
                      03137                 ;----------------------------------------
                      03138                 INITIATE_SOUND  T_SPD_RUN,RUN_WHILE_TRIG+ZAP
000B66 7793               M                 DB      CMD_INITIATE_SND + ((RUN_WHILE_TRIG+ZAP) & 0x07), T_SPD_RUN +((RUN_WHILE_TRIG+ZA
  00000036                M ICNT += 1
                          M 
                      03139                 MASK_COMPARE    SCV_FEATURE4_DISABLE,IMMED_DATA,0x00,COMP_bit0,SKIP_SAME                
000B68 BBFC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE4_DISABLE,0x00,COMP_bit0
                      03140                         END_SOUND                       ;bypass disabled traction sounds:
000B6C 0000               M                 DB      CMD_END_SND,0
                      03141 
                      03142                 LOAD_MODIFIER   MTYPE_BLEND, BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0,BLENDG_DSL_ACCEL
000B6E 00E3 0506          M                 DB      CMD_LOAD_MODIFY+(MTYPE_BLEND&0x0F),BLEND_CURRENT_CHNL+BLEND_GAIN0+BLEND_FASE0,BL
                      03143                 ;LOAD_MODIFIER  MTYPE_GAIN,IMMED_GAIN_MODIFY+0x18,SCV_TRACTION_MOTOR_VOLUME,DITHER+LOW_D
                      03144                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY+0x5,SCV_TRACTION_MOTOR_VOLUME,DITHER+LOW_DI
000B72 85E1 A0AF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY+0x5,SCV_TRACTION_MOTOR_VOLUM
                      03145                 LOAD_MODIFIER   MTYPE_PITCH,ANALOG_PITCH_MODIFY+WORK_SPEED,MAXP_DIESEL,DITHERP_DIESEL
000B76 A0E2 003E          M                 DB      CMD_LOAD_MODIFY+(MTYPE_PITCH&0x0F),ANALOG_PITCH_MODIFY+WORK_SPEED,MAXP_DIESEL,DI
                      03146                 PLAY    HNDL_SC0_TRACTION_RUN,loop_till_init_TRIG,loop_INVERT 
                          M         list ;2 byte PLAY  [HANDLE]
000B7A F049               M         DB      CMD_PLAY_SND+((loop_till_init_TRIG>>2)&0x07)+loop_INVERT, (HNDL_SC0_TRACTION_RUN & 0x3F)
                          M         list
                      03147                 END_SOUND
000B7C 0000               M                 DB      CMD_END_SND,0
                      03148 
                      03149                 ;----------------------------------------
                      03150                 ;   Coming to rest                            
                      03151                 ;----------------------------------------
                      03152                 INITIATE_SOUND  TRIG_MOVING,NOT_TRIG    
000B7E 8E90               M                 DB      CMD_INITIATE_SND + ((NOT_TRIG) & 0x07), TRIG_MOVING +((NOT_TRIG) & 0x80)
  00000037                M ICNT += 1
                          M 
                      03153                 MASK_COMPARE    SCV_FEATURE4_DISABLE,IMMED_DATA,0x00,COMP_bit0,SKIP_SAME                
000B80 BBFC FE00          M                 DB      CMD_MASK_COMPARE+SKIP_SAME+IMMED_DATA,SCV_FEATURE4_DISABLE,0x00,COMP_bit0
                      03154                         END_SOUND                       ;bypass disabled traction sounds:
000B84 0000               M                 DB      CMD_END_SND,0
                      03155 
                      03156 ;               LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_TRACTION_MOTOR_VOLUME,SCALE_9
                      03157 
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 101
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03158                 PLAY HNDL_SC0_TRACTION_END,no_loop,loop_STD 
                          M         list ;2 byte PLAY  [HANDLE]
000B86 3140               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_TRACTION_END & 0x3F)+((no_loop<<6)
                          M         list
                      03159                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x01,0   ;decrease
000B88 BDE6 00FF          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x01,0
                      03160 
                      03161                 END_SOUND
000B8C 0000               M                 DB      CMD_END_SND,0
                      03162 
                      03163 
                      03164 
                      03165 
                      03166         ;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                      03167         ;       SF20 COMPRESSOR
                      03168         ;-------------------------------
                      03169         INITIATE_SOUND  TRIG_COMPR_ON,NORMAL    ;RUN_WHILE_TRIG         ;continuous NON repeat version  
000B8E 1F90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_COMPR_ON +((NORMAL) & 0x80)
  00000038                M ICNT += 1
                          M 
                      03170                 ;interlock is set on bit is =1) (i.e. DRIFTING IS OFF)
                      03171                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,VARY_DRIFT_MASK7,MERGE_ALL_MAS
000B90 5EE6 0080          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,VARY_DRIFT_MASK
                      03172                 LOAD_MODIFIER   MTYPE_GAIN,IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C
000B94 80E1 0C90          M                 DB      CMD_LOAD_MODIFY+(MTYPE_GAIN&0x0F),IMMED_GAIN_MODIFY,SCV_MISC_VOLUME,SCALE_C
                      03173                 PLAY    HNDL_SC0_AIR_LETOFF,no_loop,loop_STD
                          M         list ;2 byte PLAY  [HANDLE]
000B98 3240               M         DB      CMD_PLAY_SND+((no_loop>>2)&0x07)+loop_STD,  (HNDL_SC0_AIR_LETOFF & 0x3F)+((no_loop<<6)&0
                          M         list
                      03174                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_INTEGRATE+AIR_PRESS,-0x19,0   ;decrease
000B9A BDE6 00E7          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_INTEGRATE+AIR_PRESS,-0x19,0
                      03175                 LOAD_MODIFIER   MTYPE_WORK_IMMED,FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,MERGE_ALL_MASK  
000B9E 5EE6 0020          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_OR+USER_INTLK_BITS,COUPLER_MASK5,M
                      03176         ;---------------------------------------------
                      03177         ;  RESET MAX GAIN ET.AL
                      03178         ;---------------------------------------------
                      03179                 ;LOAD_MODIFIER  MTYPE_WORK_IMMED,FMATH_LODE+PREV_NOTCH,0,0    ;Set value initial
                      03180                 LOAD_MODIFIER MTYPE_WORK_IMMED,FMATH_LODE+WORK_SPEED_DELTA,0x00,0       ; set Manual Not
000BA2 0BE6 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),FMATH_LODE+WORK_SPEED_DELTA,0x00,0
                      03181                 ;MAX GAIN:
                      03182                 LOAD_MODIFIER   MTYPE_WORK_IMMED,WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_ALL_MASK  ;STD f
000BA6 08E6 00C0          M                 DB      CMD_LOAD_MODIFY+(MTYPE_WORK_IMMED&0x0F),WORK_GLBL_GAIN,DEFAULT_GLBL_GAIN,MERGE_A
                      03183                 BRANCH_TO       CH8SC0_AIR_SEQ
                          M         
                          M         if      (CH8SC0_AIR_SEQ-SKEME_BASE) > 0xFFF                 ;check branch size in SCHEME
                          M                 error   CH8SC0_AIR_SEQ range over 4096 bytes -- MUST USE BRANCH_EXT for >4k
                          M         else
000BAA 5EC9               M                 DB      CMD_GOTO_SND + ((high (CH8SC0_AIR_SEQ-SKEME_BASE)) & 0x0F) , low (CH8SC0_AIR_SEQ
                          M         endif
                          M                 
                      03184 
                      03185         END_SOUND       
000BAC 0000               M                 DB      CMD_END_SND,0
                      03186                 
                      03187         
                      03188 ; -------------------------------------------------------------
                      03189 ;   SET DEFAULT CVs WHEN SETTING CV8 TO 8/9
                      03190 ; -------------------------------------------------------------
                      03191         ; These CV values are set at the moment the SPJ is downloaded to the decoder: CV > 155 CANNOT BE
                      03192         INITIATE_SOUND  TRIG_FACTORY_CVRESET,NORMAL
000BAE 5A90               M                 DB      CMD_INITIATE_SND + ((NORMAL) & 0x07), TRIG_FACTORY_CVRESET +((NORMAL) & 0x80)
  00000039                M ICNT += 1
                          M 
                      03193 
000BB0                03194 CH16SC0_FACTORY_CVSET
                      03195 ;NOTE: REMOVE MOST OF THESE SETTINGS AFTER TESTING::::
                      03196 ;SHOULD test herE for POR SW version higher than 8!!
                      03197 ;skip these if NOT SFX2 capable
                      03198         ;;;NO NO;;;;    LOAD_MODIFIER   MTYPE_SNDCV,SCV_CV1,4,0                 ;CV1 Primary address
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 102
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03199         ;; fact default is AUTO NOTCHING
                      03200         ;xLOAD_MODIFIER MTYPE_SNDCV,SCV_CV3,50,0                        ;CV3
                      03201         ;xLOAD_MODIFIER MTYPE_SNDCV,SCV_CV4,43,0                        ;CV4
                      03202         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV8,255,0               ;make sure is RO
                      03203         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV19,0,0  Advanced Consist [0]
                      03204         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV21,248,0  Advanced Consist SF0-SF8 [248] 
                      03205         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV22,52,0  Advanced Consist SF3-SF7 [52] 
                      03206         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV29,7,0                ;CV29 REVERSE
                      03207         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV49,2,0                ;CV49 MARS lite
                      03208         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV57,238,0  BEMF Consist + Advanced Consist, 0-15 / 0-15, 15=max
                      03209         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV58,12,0               ;CV58 Should be low 1-5
                      03210         LOAD_MODIFIER   MTYPE_SNDCV,SCV_CV60,0,0                ;CV61 SELECT SCHEME 0=DIESEL
000BB0 3BE5 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SNDCV&0x0F),SCV_CV60,0,0
                      03211         LOAD_MODIFIER   MTYPE_SNDCV,SCV_CV105,USER_SDF_SUB_ID,0 ; Identifies Project VERSION within auth
000BB4 68E5 0046          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SNDCV&0x0F),SCV_CV105,USER_SDF_SUB_ID,0
                      03212         LOAD_MODIFIER   MTYPE_SNDCV,SCV_CV106,PROJECT_ID,0              ; Identifies Project change with
Warning[202]: Argument out of range.  Least significant bits used.
000BB8 69E5 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SNDCV&0x0F),SCV_CV106,PROJECT_ID,0
                      03213         ;LOAD_MODIFIER  MTYPE_SNDCV,SCV_CV121,255,0             ;make sure is RO
                      03214         LOAD_MODIFIER   MTYPE_SNDCV,SCV_CV153,PROJECT_ID,0              ; Identifies Project change with
Warning[202]: Argument out of range.  Least significant bits used.
000BBC 98E5 0000          M                 DB      CMD_LOAD_MODIFY+(MTYPE_SNDCV&0x0F),SCV_CV153,PROJECT_ID,0
                      03215          ;cutback20:LOAD_MODIFIER MTYPE_SNDCV,SCV_DCONFIG,127,0 ;;CV131 127 is diesel config
                      03216         ;LOAD_MODIFIER MTYPE_SNDCV,SCV_DCONFIG,0,0      ;CV131 0 is Steam config 
                      03217          ;cutback20:LOAD_MODIFIER MTYPE_SNDCV,SCV_NOTCH,191,0   ;CV132 notch rate 64-128 to avoid missin
                      03218          ;cutback20:LOAD_MODIFIER MTYPE_SNDCV,SNDCV_STEAM,60,0  ;CV133= typ steam CAM config byte, x80=E
                      03219 ;                               DRIVER size bit7=1 means EXTERNAL INPUT_0 generates a special CAM code a
                      03220          ;cutback20:LOAD_MODIFIER MTYPE_SNDCV,SCV_STGEAR,41,0   ;CV134= steam gear ratio trim [28]
                      03221          ;cutback20:LOAD_MODIFIER MTYPE_SNDCV,SCV_MUTE_VOL,30,0 ;CV135= vol level when MUTE action is tr
                      03222         ;SCV_MAIN_PITCH                 ;CV136
                      03223          ;cutback20:LOAD_MODIFIER MTYPE_SNDCV,SCV_DISTANCE_RATE,30,0     ;cv139 Set to trigger distance 
                      03224          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_USER_SDF_SUB_ID,USER_SDF_SUB_ID,0       ;CV160 i
                      03225          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_FEATURE_DISABLE,128,0           ;CV185 is bit va
                      03226 ;                               bit0 disable  HEP diesel =1  AUX GEN    =0
                      03227 ;                               bit1 disable hard automatic braking     =2
                      03228 ;                               bit2 disable startup sounds                             =4
                      03229 ;                               bit3 disable Fans                                               =8
                      03230 ;                               bit4 disable toots on direction change  =16
                      03231 ;                               bit5 disable grade crossing random play =32
                      03232 ;                               bit6 disable bell                                               =64
                      03233 ;                               bit7 fuel prime once for Gen1 diesels OR multiple start warning bells Ge
                      03234 ;                               bit7 steam disable Open Cyl Cocks       =128            
                      03235          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_FEATURE2_DISABLE,3,0    ;CV186 is bit values to 
                      03236 ;                               bit0 disable Diesel Low Idle=1 Enabled=0        =0=Enabled
                      03237 ;                               bit0 disable STEAM BLOWER=1 BOILER=0            =1
                      03238 ;                               bit1 disable Chain bells 1-4                            =2
                      03239 ;                               bit2 disable STOKER change to SHOVEL            =4
                      03240 ;                               bit3 disable AUTO VARY NOTCH                            =8
                      03241 ;                               bit4 disable Shaft Driven Compressor            =16
                      03242 ;                               bit5 disable ALCO Idle Stumble=32 Disable=0     =32
                      03243 ;                               bit6 disable Auto REAR HORN/WHISTLE signals: 00=Off     =64
                      03244 ;                               bit7 disable Duel Prime Movers          0 = Off =128 = Duel On
                      03245          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_FEATURE3_DISABLE,0,0    ;CV187 is bit values to 
                      03246 ;                               bit0 disable Short Horn/whistle                         Enabled=0       
                      03247 ;                               bit1 disable DEMO ALL HornS/whistles            Enabled=2       =0 Disab
                      03248 ;                               bit2 disable Bell on Idle Exit                                          
                      03249 ;                               bit3 disable Motor Lock on SF10                                         
                      03250 ;                               bit4 disable Startup MUTED                                              
                      03251 ;                               bit5 disable Dynamic BRAKES                                             
                      03252 ;                               bit6 disable Run High                                                   
                      03253 ;                               bit7 disable Auto Wheel Slip                                            
                      03254          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_FEATURE4_DISABLE,0,0    ;CV188 is bit values to 
                      03255 ;                               bit0 disable Traction Motor             = 1 Disabled
                      03256 ;                               bit1 disable HILO HORN                          = 2 Disabled
                      03257 ;                               bit2 disable 3                                          = 4 Disabled
                      03258 ;                               bit3 disable 4                                          = 8 Disabled
                      03259 ;                               bit4 disable 5                                          = 16 Disabled
                      03260 ;                               bit5 disable 6                                          = 32 Disabled
                      03261 ;                               bit6 disable 7                                          = 64 Disabled
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 103
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03262 ;                               bit7 disable 8                                          = 64 Disabled
                      03263 
                      03264 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     
                      03265 ; MERGE UNIQUE CV VALUES HERE FOR THIS SPJ ONLY:
                      03266          ;cutback20: #INCLUDE   EL7c4x6d30CVS.INC
                      03267 ;;;;;;;;;;;;;;;;;;;     ;;;;; FOLLOW WITH ASM FINAL CODE HERE:
                      03268         ;END CH3_==============================================================
                      03269 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      03270         ;no end sound here (MUST BE IN ASM) END_SOUND         
                      03271 ;end EL7c4x6d30base
                      03272                                                                                         
                      00601 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00602          ;;;;;;;;;;;;FOLLOW WITH VERY LAST CV RESET CODE HERE:
                      00603          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_CV3,31,0 ;CV3     Momentum acceleration rate, 0-
                      00604          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_CV4,28,0 ;CV4     Momentum deceleration rate, 0-
                      00605          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_CV23,50,0;SCV_23  Acceleration Mass 0-255 [50] 
                      00606          ;cutback20:LOAD_MODIFIER       MTYPE_SNDCV,SCV_CV24,50,0;SCV_24  Deceleration Mass 0-255 [50] 
                      00607          ;cutback22:LOAD_MODIFIER       MTYPE_SNDCV,SCV_USER_SDF_ID,AuthorCode,0        ;CV152 defines U
                      00608         ;cutback22:LOAD_MODIFIER        MTYPE_SNDCV,SCV_PROJECT_ID,PROJECT_ID,0         ;CV153 [0]  Iden
                      00609         ;cutback22:LOAD_MODIFIER        MTYPE_SNDCV,SCV_CV160,USER_SDF_SUB_ID,0         ;CV160 is SUB id
                      00610         ;cutback22:LOAD_MODIFIER        MTYPE_SNDCV,SCV_CV106,PROJECT_ID,0              ;CV106 [0]  Iden
                      00611         ;cutback22:LOAD_MODIFIER        MTYPE_SNDCV,SCV_CV153,PROJECT_ID,0              ;CV153 [0]  Iden
                      00612 
                      00613 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00614         ;X LOAD_MODIFIER        MTYPE_SNDCV,SCV_FEATURE_DISABLE,128,0           ;CV185 is bit values to 
                      00615 ;                               bit0 disable  HEP Aux Gen =1  AUX GEN   =0
                      00616 ;                               bit1 disable hard automatic braking     =2
                      00617 ;                               bit2 disable startup sounds                             =4
                      00618 ;                               bit3 disable Fans                                               =8
                      00619 ;                               bit4 disable toots on direction change  =16
                      00620 ;                               bit5 disable grade crossing random play =32
                      00621 ;                               bit6 disable bell                                               =64
                      00622 ;                               bit7 fuel prime once for Gen1 diesels OR multiple start warning bells Ge
                      00623         ;X LOAD_MODIFIER        MTYPE_SNDCV,SCV_FEATURE2_DISABLE,2,0    ;CV186 is bit values to disable 
                      00624 ;                               bit0 disable Low Idle=1 Enabled=0       =0=Enabled
                      00625 ;                               bit0 disable STEAM BLOWER=1 BOILER=0            =1
                      00626 ;                               bit1 disable Chain bells 1-4                            =2
                      00627 ;                               bit2 disable STOKER change to SHOVEL            =4
                      00628 ;                               bit3 disable AUTO VARY NOTCH                            =8
                      00629 ;                               bit4 disable Shaft Driven Compressor            =16
                      00630 ;                               bit5 disable ALCO Idle Stumble=32 Disable=0     =32
                      00631 ;                               bit6 disable Auto REAR HORN/WHISTLE signals: 00=Off     =64
                      00632 ;                               bit7 disable Duel Prime Movers          0 = Off =128 = Duel On
                      00633         ;X LOAD_MODIFIER        MTYPE_SNDCV,SCV_FEATURE3_DISABLE,0,0    ;CV187 is bit values to disable 
                      00634 ;                               bit0 disable Short Horn/whistle                         Enabled=0       
                      00635 ;                               bit1 disable DEMO ALL HornS/whistles            Enabled=2       =0 Disab
                      00636 ;                               bit2 disable Bell on Idle Exit                                          
                      00637 ;                               bit3 disable Motor Lock on SF10                                         
                      00638 ;                               bit4 disable Startup MUTED                                              
                      00639 ;                               bit5 disable Dynamic BRAKES                                             
                      00640 ;                               bit6 disable Run High                                                   
                      00641 ;                               bit7 disable Auto Wheel Slip                                            
                      00642          ;;;;;;3/26/18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MUST BE VERY LAST CODE IN FINAL CHANNEL;;;;;;;;;;;;;;
                      00643         ;CV189 Water Alarm Volume                                                       0-64    [45]
                      00644         ;CV190 Cutoff Speed for high speed chuffs                       40-99   [48]    
                      00645         ;CV191 Drift Volume                                                                     0-64    
                      00646         ;CV192 Cutoff Speed for LONG HORN                                       4-9     [9]
                      00647         ;CV193 Sound Project TYPE
                      00648         ;cutback20:LOAD_MODIFIER        MTYPE_SNDCV,SCV_SOUND_PROJ_TYPE,128,0   ;CV193 Sound Project TYP
                      00649 ;Possible Values are :
                      00650 ;       :                       Decimal HEX                     Bit
                      00651 ;       :                                                               7654 3210
                      00652 ;       :       1               0               0x00            0000 0000               Steam Coal
                      00653 ;       :       2               1               0x01            0000 0001               Steam Oil
                      00654 ;       :       3               2               0x02            0000 0010               Steam Coal  Arti
                      00655 ;       :       4               3               0x03            0000 0011               Steam Oil Articu
                      00656 ;       :       5               4               0x04            0000 0100               Steam Geared    
                      00657 ;       :       9               8               0x08            0000 1000               Steam non-fired 
                      00658 ;       :       81              80              0x50            0101 0000               Gas Carbody / Do
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 104
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00659 ;       :       127             128             0x80            1000 0000               Diesel
                      00660 ;       :       145             144             0x90            1001 0000               Diesel Carbody  
                      00661 ;       :       193             192             0xC0            1100 0000               Diesel Dual Moto
                      00662 ;       :       225             224             0xE0            1110 0000               Diesel Dual Moto
                      00663 ;       :       241             240             0xF0            1111 0000               Diesel Boxcab
                      00664 ;       :       137             136             0x88            1000 1000               Traction
                      00665         ;CV194 Sound Project Memory Required [1=512kb, 2=1024kb, 3=8mb, 4=4mb, 8=8mb, 16=16mb].
                      00666         ;cutback20:LOAD_MODIFIER        MTYPE_SNDCV,SCV_SOUND_PROJ_MEMREQ,1,0   ;CV194 Sound Project Mem
                      00667         ;CV195 Sound Project JMRI Definition
                      00668         ;cutback20:LOAD_MODIFIER        MTYPE_SNDCV,SCV_SOUND_PROJ_JMRIDEF,59,0         ;CV195 Sound Pro
                      00669         ;CV_196 ;RESERVED 
                      00670         ;CV_197 ;RESERVED 
                      00671         ;CV_198 ;RESERVED 
                      00672         ;CV_199 ;RESERVED 
                      00673         ;CV_200 ;RESERVED 
                      00674         ;CV_201 ;RESERVED (221) 
                      00675         ;CV_202 ;NON_SOUND_JMRIDEF ; JMRI Definition (0-255) 
                      00676         ;CV_203 ;Decoder Memory Available (read only) [1=512kb, 2=1024kb, 3=8mb, 4=4mb, 8=8mb, 16=16mb].
                      00677         END_SOUND
000BC0 0000               M                 DB      CMD_END_SND,0
                      00678 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00679 ;------------------------------------------------
                      00680 ; End of Scheme 0
                      00681 ;------------------------------------------------
                      00682 ;===============================================================================
                      00683 ;------------------------------------------------
                      00684 ; End of SDL Code
                      00685 ;------------------------------------------------
000BC2                00686 END_SDL
                      00687         SKEME_START     CLOSE_SKEME             ;START of "CLOSE_SKEME" is SDL end
  00000BC2                M SKEME_BASE      SET     $                               ;for offset calc
000BC2 1FF1 0400          M                 DB      CMD_SKEME_START,(CLOSE_SKEME &0x1F), high((SKEME_NEXT0-$)+2),     low((SKEME_NEX
                      00688         SKEME_END       CLOSE_SKEME
000BC6                    M SKEME_NEXT0
  00000001                M SCNT += 1
                          M ;CCNT=CTEMP                             ;xfer MAX value seen in last scheme
                          M ;CTEMP = 0
                      00689 
                      00690 ;This should run in all assmeblies to confirm limits not exceeded for VERSION assumed
000BC6                00691 VERSION_CHECKS
                      00692         IF      ICNT>MAX_INITIATES
                      00693    INITIATE EXCEEDS DEFINED LIMIT FOR THIS VERSION
                      00694          ELSE
                      00695         ENDIF
                      00696 ;       IF      CCNT> (MAX_CHANNELS+1) 
                      00697 ;   CHANNELS USED EXCEEDS DEFINED LIMIT FOR THIS VERSION
                      00698 ;        ELSE
                      00699 ;       ENDIF
                      00700         IF      SCNT>MAX_SCHEMES
                      00701    SCHEMES USED EXCEEDS DEFINED LIMIT FOR THIS VERSION
                      00702          ELSE
                      00703         ENDIF  
Warning[207]: Found label after column 1. (ICNT)
  0000003A            00704         ICNT = ICNT+1
Warning[207]: Found label after column 1. (TEMP)
  000000C6            00705         TEMP = MAX_INITIATES-ICNT
Warning[207]: Found label after column 1. (MAX_SCHEMES)
  00000040            00706         MAX_SCHEMES = MAX_SCHEMES +0
Warning[207]: Found label after column 1. (MAX_INITIATES)
  00000100            00707         MAX_INITIATES = MAX_INITIATES +0
Warning[207]: Found label after column 1. (MAX_CHANNELS)
  00000008            00708         MAX_CHANNELS = MAX_CHANNELS +0
                      00709 
000BC6                00710 END_SDF
                      00711         END             ;==================================
MPASM  5.30                        ACS235.ASM   3-19-2025  1:06:53         PAGE 105
single scheme- discrete notching SDF3.0 Decoder Series6
SOUND PROCESSOR SOUND COMMAND macros for DIGITRAX scalable sound engine TECHNOLOGY.  (C) 2004,2005,2006,2012,2013,2018 Digitrax Inc.
MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0 : XXXXXX---------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Bytes Used:  3014
Program Memory Bytes Free: 13370


Errors   :     0
Warnings :     9 reported,     0 suppressed
Messages :     0 reported,     0 suppressed

